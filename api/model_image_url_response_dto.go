/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImageUrlResponseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageUrlResponseDto{}

// ImageUrlResponseDto struct for ImageUrlResponseDto
type ImageUrlResponseDto struct {
	Id string `json:"id"`
	Url string `json:"url"`
}

type _ImageUrlResponseDto ImageUrlResponseDto

// NewImageUrlResponseDto instantiates a new ImageUrlResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageUrlResponseDto(id string, url string) *ImageUrlResponseDto {
	this := ImageUrlResponseDto{}
	this.Id = id
	this.Url = url
	return &this
}

// NewImageUrlResponseDtoWithDefaults instantiates a new ImageUrlResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageUrlResponseDtoWithDefaults() *ImageUrlResponseDto {
	this := ImageUrlResponseDto{}
	return &this
}

// GetId returns the Id field value
func (o *ImageUrlResponseDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ImageUrlResponseDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ImageUrlResponseDto) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *ImageUrlResponseDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ImageUrlResponseDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ImageUrlResponseDto) SetUrl(v string) {
	o.Url = v
}

func (o ImageUrlResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageUrlResponseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *ImageUrlResponseDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageUrlResponseDto := _ImageUrlResponseDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImageUrlResponseDto)

	if err != nil {
		return err
	}

	*o = ImageUrlResponseDto(varImageUrlResponseDto)

	return err
}

type NullableImageUrlResponseDto struct {
	value *ImageUrlResponseDto
	isSet bool
}

func (v NullableImageUrlResponseDto) Get() *ImageUrlResponseDto {
	return v.value
}

func (v *NullableImageUrlResponseDto) Set(val *ImageUrlResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableImageUrlResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableImageUrlResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageUrlResponseDto(val *ImageUrlResponseDto) *NullableImageUrlResponseDto {
	return &NullableImageUrlResponseDto{value: val, isSet: true}
}

func (v NullableImageUrlResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageUrlResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



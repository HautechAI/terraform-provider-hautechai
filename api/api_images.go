/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ImagesAPI interface {

	/*
	ImagesControllerFinalizeUploadV1 Method for ImagesControllerFinalizeUploadV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiImagesControllerFinalizeUploadV1Request
	*/
	ImagesControllerFinalizeUploadV1(ctx context.Context) ApiImagesControllerFinalizeUploadV1Request

	// ImagesControllerFinalizeUploadV1Execute executes the request
	//  @return ImageEntity
	ImagesControllerFinalizeUploadV1Execute(r ApiImagesControllerFinalizeUploadV1Request) (*ImageEntity, *http.Response, error)

	/*
	ImagesControllerGetImageV1 Method for ImagesControllerGetImageV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiImagesControllerGetImageV1Request
	*/
	ImagesControllerGetImageV1(ctx context.Context, id string) ApiImagesControllerGetImageV1Request

	// ImagesControllerGetImageV1Execute executes the request
	//  @return ImageEntity
	ImagesControllerGetImageV1Execute(r ApiImagesControllerGetImageV1Request) (*ImageEntity, *http.Response, error)

	/*
	ImagesControllerGetRepresentationV1 Method for ImagesControllerGetRepresentationV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param type_
	@return ApiImagesControllerGetRepresentationV1Request
	*/
	ImagesControllerGetRepresentationV1(ctx context.Context, id string, type_ string) ApiImagesControllerGetRepresentationV1Request

	// ImagesControllerGetRepresentationV1Execute executes the request
	//  @return ImageRepresentationResponseDto
	ImagesControllerGetRepresentationV1Execute(r ApiImagesControllerGetRepresentationV1Request) (*ImageRepresentationResponseDto, *http.Response, error)

	/*
	ImagesControllerGetUrlsV1 Method for ImagesControllerGetUrlsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiImagesControllerGetUrlsV1Request
	*/
	ImagesControllerGetUrlsV1(ctx context.Context) ApiImagesControllerGetUrlsV1Request

	// ImagesControllerGetUrlsV1Execute executes the request
	//  @return []ImageEntity
	ImagesControllerGetUrlsV1Execute(r ApiImagesControllerGetUrlsV1Request) ([]ImageEntity, *http.Response, error)

	/*
	ImagesControllerStartUploadV1 Method for ImagesControllerStartUploadV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiImagesControllerStartUploadV1Request
	*/
	ImagesControllerStartUploadV1(ctx context.Context) ApiImagesControllerStartUploadV1Request

	// ImagesControllerStartUploadV1Execute executes the request
	//  @return InitializeImageUploadResultDto
	ImagesControllerStartUploadV1Execute(r ApiImagesControllerStartUploadV1Request) (*InitializeImageUploadResultDto, *http.Response, error)
}

// ImagesAPIService ImagesAPI service
type ImagesAPIService service

type ApiImagesControllerFinalizeUploadV1Request struct {
	ctx context.Context
	ApiService ImagesAPI
	createImageParamsDto *CreateImageParamsDto
}

func (r ApiImagesControllerFinalizeUploadV1Request) CreateImageParamsDto(createImageParamsDto CreateImageParamsDto) ApiImagesControllerFinalizeUploadV1Request {
	r.createImageParamsDto = &createImageParamsDto
	return r
}

func (r ApiImagesControllerFinalizeUploadV1Request) Execute() (*ImageEntity, *http.Response, error) {
	return r.ApiService.ImagesControllerFinalizeUploadV1Execute(r)
}

/*
ImagesControllerFinalizeUploadV1 Method for ImagesControllerFinalizeUploadV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImagesControllerFinalizeUploadV1Request
*/
func (a *ImagesAPIService) ImagesControllerFinalizeUploadV1(ctx context.Context) ApiImagesControllerFinalizeUploadV1Request {
	return ApiImagesControllerFinalizeUploadV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImageEntity
func (a *ImagesAPIService) ImagesControllerFinalizeUploadV1Execute(r ApiImagesControllerFinalizeUploadV1Request) (*ImageEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagesAPIService.ImagesControllerFinalizeUploadV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/images/upload/finalize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createImageParamsDto == nil {
		return localVarReturnValue, nil, reportError("createImageParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createImageParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImagesControllerGetImageV1Request struct {
	ctx context.Context
	ApiService ImagesAPI
	id string
}

func (r ApiImagesControllerGetImageV1Request) Execute() (*ImageEntity, *http.Response, error) {
	return r.ApiService.ImagesControllerGetImageV1Execute(r)
}

/*
ImagesControllerGetImageV1 Method for ImagesControllerGetImageV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiImagesControllerGetImageV1Request
*/
func (a *ImagesAPIService) ImagesControllerGetImageV1(ctx context.Context, id string) ApiImagesControllerGetImageV1Request {
	return ApiImagesControllerGetImageV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageEntity
func (a *ImagesAPIService) ImagesControllerGetImageV1Execute(r ApiImagesControllerGetImageV1Request) (*ImageEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagesAPIService.ImagesControllerGetImageV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/images/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImagesControllerGetRepresentationV1Request struct {
	ctx context.Context
	ApiService ImagesAPI
	id string
	type_ string
}

func (r ApiImagesControllerGetRepresentationV1Request) Execute() (*ImageRepresentationResponseDto, *http.Response, error) {
	return r.ApiService.ImagesControllerGetRepresentationV1Execute(r)
}

/*
ImagesControllerGetRepresentationV1 Method for ImagesControllerGetRepresentationV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @param type_
 @return ApiImagesControllerGetRepresentationV1Request
*/
func (a *ImagesAPIService) ImagesControllerGetRepresentationV1(ctx context.Context, id string, type_ string) ApiImagesControllerGetRepresentationV1Request {
	return ApiImagesControllerGetRepresentationV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
		type_: type_,
	}
}

// Execute executes the request
//  @return ImageRepresentationResponseDto
func (a *ImagesAPIService) ImagesControllerGetRepresentationV1Execute(r ApiImagesControllerGetRepresentationV1Request) (*ImageRepresentationResponseDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageRepresentationResponseDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagesAPIService.ImagesControllerGetRepresentationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/images/{id}/representation/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImagesControllerGetUrlsV1Request struct {
	ctx context.Context
	ApiService ImagesAPI
	getUrlsForImagesParamsDto *GetUrlsForImagesParamsDto
}

func (r ApiImagesControllerGetUrlsV1Request) GetUrlsForImagesParamsDto(getUrlsForImagesParamsDto GetUrlsForImagesParamsDto) ApiImagesControllerGetUrlsV1Request {
	r.getUrlsForImagesParamsDto = &getUrlsForImagesParamsDto
	return r
}

func (r ApiImagesControllerGetUrlsV1Request) Execute() ([]ImageEntity, *http.Response, error) {
	return r.ApiService.ImagesControllerGetUrlsV1Execute(r)
}

/*
ImagesControllerGetUrlsV1 Method for ImagesControllerGetUrlsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImagesControllerGetUrlsV1Request
*/
func (a *ImagesAPIService) ImagesControllerGetUrlsV1(ctx context.Context) ApiImagesControllerGetUrlsV1Request {
	return ApiImagesControllerGetUrlsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ImageEntity
func (a *ImagesAPIService) ImagesControllerGetUrlsV1Execute(r ApiImagesControllerGetUrlsV1Request) ([]ImageEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ImageEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagesAPIService.ImagesControllerGetUrlsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/images/many"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getUrlsForImagesParamsDto == nil {
		return localVarReturnValue, nil, reportError("getUrlsForImagesParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getUrlsForImagesParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImagesControllerStartUploadV1Request struct {
	ctx context.Context
	ApiService ImagesAPI
}

func (r ApiImagesControllerStartUploadV1Request) Execute() (*InitializeImageUploadResultDto, *http.Response, error) {
	return r.ApiService.ImagesControllerStartUploadV1Execute(r)
}

/*
ImagesControllerStartUploadV1 Method for ImagesControllerStartUploadV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImagesControllerStartUploadV1Request
*/
func (a *ImagesAPIService) ImagesControllerStartUploadV1(ctx context.Context) ApiImagesControllerStartUploadV1Request {
	return ApiImagesControllerStartUploadV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InitializeImageUploadResultDto
func (a *ImagesAPIService) ImagesControllerStartUploadV1Execute(r ApiImagesControllerStartUploadV1Request) (*InitializeImageUploadResultDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InitializeImageUploadResultDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImagesAPIService.ImagesControllerStartUploadV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/images/upload/initialize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

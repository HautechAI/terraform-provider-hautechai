/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GPTV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GPTV1Input{}

// GPTV1Input struct for GPTV1Input
type GPTV1Input struct {
	Model *string `json:"model,omitempty"`
	Prompt string `json:"prompt"`
	ImageId *string `json:"imageId,omitempty"`
}

type _GPTV1Input GPTV1Input

// NewGPTV1Input instantiates a new GPTV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGPTV1Input(prompt string) *GPTV1Input {
	this := GPTV1Input{}
	var model string = "gpt-4o"
	this.Model = &model
	this.Prompt = prompt
	return &this
}

// NewGPTV1InputWithDefaults instantiates a new GPTV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGPTV1InputWithDefaults() *GPTV1Input {
	this := GPTV1Input{}
	var model string = "gpt-4o"
	this.Model = &model
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *GPTV1Input) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GPTV1Input) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *GPTV1Input) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *GPTV1Input) SetModel(v string) {
	o.Model = &v
}

// GetPrompt returns the Prompt field value
func (o *GPTV1Input) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *GPTV1Input) GetPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *GPTV1Input) SetPrompt(v string) {
	o.Prompt = v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *GPTV1Input) GetImageId() string {
	if o == nil || IsNil(o.ImageId) {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GPTV1Input) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *GPTV1Input) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *GPTV1Input) SetImageId(v string) {
	o.ImageId = &v
}

func (o GPTV1Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GPTV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	toSerialize["prompt"] = o.Prompt
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	return toSerialize, nil
}

func (o *GPTV1Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"prompt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGPTV1Input := _GPTV1Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGPTV1Input)

	if err != nil {
		return err
	}

	*o = GPTV1Input(varGPTV1Input)

	return err
}

type NullableGPTV1Input struct {
	value *GPTV1Input
	isSet bool
}

func (v NullableGPTV1Input) Get() *GPTV1Input {
	return v.value
}

func (v *NullableGPTV1Input) Set(val *GPTV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableGPTV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableGPTV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGPTV1Input(val *GPTV1Input) *NullableGPTV1Input {
	return &NullableGPTV1Input{value: val, isSet: true}
}

func (v NullableGPTV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGPTV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



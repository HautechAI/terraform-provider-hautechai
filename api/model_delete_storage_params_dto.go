/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteStorageParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteStorageParamsDto{}

// DeleteStorageParamsDto struct for DeleteStorageParamsDto
type DeleteStorageParamsDto struct {
	Key string `json:"key"`
}

type _DeleteStorageParamsDto DeleteStorageParamsDto

// NewDeleteStorageParamsDto instantiates a new DeleteStorageParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteStorageParamsDto(key string) *DeleteStorageParamsDto {
	this := DeleteStorageParamsDto{}
	this.Key = key
	return &this
}

// NewDeleteStorageParamsDtoWithDefaults instantiates a new DeleteStorageParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteStorageParamsDtoWithDefaults() *DeleteStorageParamsDto {
	this := DeleteStorageParamsDto{}
	return &this
}

// GetKey returns the Key field value
func (o *DeleteStorageParamsDto) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DeleteStorageParamsDto) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DeleteStorageParamsDto) SetKey(v string) {
	o.Key = v
}

func (o DeleteStorageParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteStorageParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *DeleteStorageParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteStorageParamsDto := _DeleteStorageParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteStorageParamsDto)

	if err != nil {
		return err
	}

	*o = DeleteStorageParamsDto(varDeleteStorageParamsDto)

	return err
}

type NullableDeleteStorageParamsDto struct {
	value *DeleteStorageParamsDto
	isSet bool
}

func (v NullableDeleteStorageParamsDto) Get() *DeleteStorageParamsDto {
	return v.value
}

func (v *NullableDeleteStorageParamsDto) Set(val *DeleteStorageParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteStorageParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteStorageParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteStorageParamsDto(val *DeleteStorageParamsDto) *NullableDeleteStorageParamsDto {
	return &NullableDeleteStorageParamsDto{value: val, isSet: true}
}

func (v NullableDeleteStorageParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteStorageParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



openapi: 3.0.0
info:
  contact: {}
  description: ""
  title: Hautech API
  version: "1.0"
servers:
- url: /
security:
- bearer: []
paths:
  /v1/accounts:
    get:
      operationId: AccountsController_listAccounts_v1
      parameters:
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountsDto'
          description: ""
      tags:
      - Accounts
    post:
      operationId: AccountsController_createAccount_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountParamsDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Accounts
  /v1/accounts/self:
    get:
      operationId: AccountsController_getSelf_v1
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Accounts
  /v1/accounts/{id}:
    get:
      operationId: AccountsController_getAccount_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Accounts
  /v1/accounts/alias/{id}:
    get:
      operationId: AccountsController_getAccountByAlias_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Accounts
  /v1/accounts/{id}/balance:
    get:
      operationId: BalancesController_getBalance_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResultDto'
          description: ""
      tags:
      - Balances
    put:
      operationId: BalancesController_addBalance_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBalanceControllerParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Balances
  /v1/accounts/self/balance:
    get:
      operationId: BalancesController_getBalanceForSelf_v1
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResultDto'
          description: ""
      tags:
      - Balances
  /v1/collections:
    get:
      operationId: CollectionsController_listCollections_v1
      parameters:
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsDto'
          description: ""
      tags:
      - Collections
    post:
      operationId: CollectionsController_createCollection_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionParamsDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
          description: ""
      tags:
      - Collections
  /v1/collections/{id}:
    get:
      operationId: CollectionsController_getCollection_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
          description: ""
      tags:
      - Collections
  /v1/collections/{id}/metadata:
    put:
      operationId: CollectionsController_updateMetadata_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEntity'
          description: ""
      tags:
      - Collections
  /v1/collections/{id}/items/add:
    post:
      operationId: CollectionsController_addItems_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemsToCollectionControllerParamsDto'
        required: true
      responses:
        "201":
          description: ""
      tags:
      - Collections
  /v1/collections/{id}/items:
    get:
      operationId: CollectionsController_listItems_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: kind
        required: false
        schema:
          enum:
          - collection
          - operation
          - stack
          - image
          - pose
          - storage
          - pipeline
          - forbidden
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionItemsDto'
          description: ""
      tags:
      - Collections
  /v1/collections/{id}/items/remove:
    post:
      operationId: CollectionsController_removeItems_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveItemsFromCollectionControllerParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Collections
  /v1/groups:
    post:
      operationId: GroupsController_createGroup_v1
      parameters: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntity'
          description: ""
      tags:
      - Groups
  /v1/groups/{id}:
    delete:
      operationId: GroupsController_deleteGroup_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: ""
      tags:
      - Groups
    get:
      operationId: GroupsController_getGroup_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntity'
          description: ""
      tags:
      - Groups
  /v1/groups/{id}/accounts/add:
    post:
      operationId: GroupsController_addAccount_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAccountToGroupControllerParamsDto'
        required: true
      responses:
        "201":
          description: ""
      tags:
      - Groups
  /v1/groups/{id}/accounts/remove:
    post:
      operationId: GroupsController_removeAccount_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveAccountFromGroupControllerParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Groups
  /v1/images/upload/initialize:
    post:
      operationId: ImagesController_startUpload_v1
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializeImageUploadResultDto'
          description: ""
      tags:
      - Images
  /v1/images/upload/finalize:
    post:
      operationId: ImagesController_finalizeUpload_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageParamsDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageEntity'
          description: ""
      tags:
      - Images
  /v1/images/many:
    post:
      operationId: ImagesController_getUrls_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUrlsForImagesParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImageEntity'
                type: array
          description: ""
      tags:
      - Images
  /v1/images/{id}:
    get:
      operationId: ImagesController_getImage_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageEntity'
          description: ""
      tags:
      - Images
  /v1/images/{id}/representation/{type}:
    get:
      operationId: ImagesController_getRepresentation_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRepresentationResponseDto'
          description: ""
      tags:
      - Images
  /v1/operations/{id}:
    get:
      operationId: OperationsController_getOperation_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationEntity'
          description: ""
      tags:
      - Operations
  /v1/operations/many:
    post:
      operationId: OperationsController_getOperations_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOperationsParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OperationEntity'
                type: array
          description: ""
      tags:
      - Operations
  /v1/operations:
    get:
      operationId: OperationsController_listOperations_v1
      parameters:
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsDto'
          description: ""
      tags:
      - Operations
  /v1/operations/{id}/metadata:
    put:
      operationId: OperationsController_updateMetadata_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEntity'
          description: ""
      tags:
      - Operations
  /v1/poses/{id}:
    get:
      operationId: PosesController_getPose_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoseEntity'
          description: ""
      tags:
      - Poses
  /v1/poses:
    get:
      operationId: PosesController_listPoses_v1
      parameters:
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPosesDto'
          description: ""
      tags:
      - Poses
  /v1/poses/{id}/preview:
    put:
      operationId: PosesController_setPosePreview_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPosePreviewControllerParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Poses
  /v1/poses/{id}/metadata:
    put:
      operationId: PosesController_updateMetadata_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEntity'
          description: ""
      tags:
      - Poses
  /v1/stacks:
    get:
      operationId: StacksController_listStacks_v1
      parameters:
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStacksDto'
          description: ""
      tags:
      - Stacks
    post:
      operationId: StacksController_createStack_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStackParamsDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Stacks
  /v1/stacks/{id}:
    get:
      operationId: StacksController_getStack_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Stacks
  /v1/stacks/{id}/metadata:
    put:
      operationId: StacksController_updateMetadata_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceEntity'
          description: ""
      tags:
      - Stacks
  /v1/stacks/{id}/items/add:
    post:
      operationId: StacksController_addItems_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemsToStackControllerParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Stacks
  /v1/stacks/{id}/items/remove:
    post:
      operationId: StacksController_removeItems_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveItemsFromCollectionControllerParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Stacks
  /v1/storage:
    post:
      operationId: StorageController_createRecord_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageRecordParamsDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageEntity'
          description: ""
      tags:
      - Storage
  /v1/storage/many:
    post:
      operationId: StorageController_getRecords_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetStorageRecordParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StorageRecordsResultDto'
                type: array
          description: ""
      tags:
      - Storage
  /v1/storage/delete:
    post:
      operationId: StorageController_deleteRecord_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteStorageParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Storage
  /v1/storage/write:
    post:
      operationId: StorageController_updateRecord_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorageRecordParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageEntity'
          description: ""
      tags:
      - Storage
  /v1/websocket/auth:
    post:
      operationId: WebsocketController_registerWebsocket_v1
      parameters: []
      responses:
        "201":
          description: ""
      tags:
      - Websocket
  /v1/websocket/settings:
    get:
      operationId: WebsocketController_getSettings_v1
      parameters: []
      responses:
        "200":
          description: ""
      tags:
      - Websocket
  /v1/pipelines:
    get:
      operationId: PipelinesController_listPipelines_v1
      parameters:
      - explode: true
        in: query
        name: orderBy
        required: false
        schema:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelinesDto'
          description: ""
      tags:
      - Pipelines
    post:
      operationId: PipelinesController_createPipeline_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePipelineParamsDto'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
          description: ""
      tags:
      - Pipelines
  /v1/pipelines/{id}:
    get:
      operationId: PipelinesController_getPipeline_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
          description: ""
      tags:
      - Pipelines
  /v1/permissions/available:
    get:
      operationId: PermissionsController_listAvailablePermissions_v1
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: ""
      tags:
      - Permissions
  /v1/resources/{id}/access/grant:
    post:
      operationId: AccessController_grantAccess_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantAccessControllerParams'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Access
  /v1/resources/{id}/access/revoke:
    post:
      operationId: AccessController_revokeAccess_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeAccessControllerParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Access
  /v1/resources/{id}/access/attach:
    post:
      operationId: AccessController_attachAccess_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachAccessControllerParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Access
  /v1/resources/{id}/access/detach:
    post:
      operationId: AccessController_detachAccess_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachAccessControllerParamsDto'
        required: true
      responses:
        "204":
          description: ""
      tags:
      - Access
  /v1/resources/{id}/access:
    get:
      operationId: AccessController_access_v1
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccessControllerDto'
          description: ""
      summary: UNSTABLE
      tags:
      - Access
  /v1/operations/run/haute.linda.v1:
    post:
      operationId: OperationsController_run_haute.linda.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/haute.linda.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/haute.linda.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/haute.naomi.v1:
    post:
      operationId: OperationsController_run_haute.naomi.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/haute.naomi.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/haute.naomi.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/inpaint.kate.v1:
    post:
      operationId: OperationsController_run_inpaint.kate.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inpaint.kate.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inpaint.kate.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/gpt.v1:
    post:
      operationId: OperationsController_run_gpt.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gpt.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gpt.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/imagine.kate.v1:
    post:
      operationId: OperationsController_run_imagine.kate.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imagine.kate.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imagine.kate.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/upscale.v1:
    post:
      operationId: OperationsController_run_upscale.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upscale.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upscale.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/objectDetection.v1:
    post:
      operationId: OperationsController_run_objectDetection.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectDetection.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectDetection.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/segmentAnything.embeddings.v1:
    post:
      operationId: OperationsController_run_segmentAnything.embeddings.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/segmentAnything.embeddings.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentAnything.embeddings.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/segmentAnything.mask.v1:
    post:
      operationId: OperationsController_run_segmentAnything.mask.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/segmentAnything.mask.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentAnything.mask.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/poseEstimation.v1:
    post:
      operationId: OperationsController_run_poseEstimation.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/poseEstimation.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poseEstimation.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/cut.v1:
    post:
      operationId: OperationsController_run_cut.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cut.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cut.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/crop.v1:
    post:
      operationId: OperationsController_run_crop.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crop.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crop.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/noise.v1:
    post:
      operationId: OperationsController_run_noise.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noise.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noise.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/composite.v1:
    post:
      operationId: OperationsController_run_composite.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/composite.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/composite.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/vton.gisele.v1:
    post:
      operationId: OperationsController_run_vton.gisele.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vton.gisele.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vton.gisele.v1.response'
          description: ""
      tags:
      - Operations
  /v1/operations/run/negateImage.v1:
    post:
      operationId: OperationsController_run_negateImage.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/negateImage.v1.request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/negateImage.v1.response'
          description: ""
      tags:
      - Operations
  /v1/call/access.grant:
    post:
      operationId: CallController_call_access.grant_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAccessParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/access.attach:
    post:
      operationId: CallController_call_access.attach_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachAccessParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/accounts.create:
    post:
      operationId: CallController_call_accounts.create_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Call
  /v1/call/accounts.get:
    post:
      operationId: CallController_call_accounts.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Call
  /v1/call/accounts.self:
    post:
      operationId: CallController_call_accounts.self_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
          description: ""
      tags:
      - Call
  /v1/call/accounts.list:
    post:
      operationId: CallController_call_accounts.list_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAccountsParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountsDto'
          description: ""
      tags:
      - Call
  /v1/call/accounts.balance.add:
    post:
      operationId: CallController_call_accounts.balance.add_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBalanceParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/accounts.balance.self:
    post:
      operationId: CallController_call_accounts.balance.self_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResultDto'
          description: ""
      tags:
      - Call
  /v1/call/accounts.balance.get:
    post:
      operationId: CallController_call_accounts.balance.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBalanceParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResultDto'
          description: ""
      tags:
      - Call
  /v1/call/collections.create:
    post:
      operationId: CallController_call_collections.create_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
          description: ""
      tags:
      - Call
  /v1/call/collections.get:
    post:
      operationId: CallController_call_collections.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
          description: ""
      tags:
      - Call
  /v1/call/collections.list:
    post:
      operationId: CallController_call_collections.list_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCollectionsParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsDto'
          description: ""
      tags:
      - Call
  /v1/call/collections.metadata.update:
    post:
      operationId: CallController_call_collections.metadata.update_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionEntity'
          description: ""
      tags:
      - Call
  /v1/call/collections.items.add:
    post:
      operationId: CallController_call_collections.items.add_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemsToCollectionParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/collections.items.list:
    post:
      operationId: CallController_call_collections.items.list_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCollectionItemsParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionItemsDto'
          description: ""
      tags:
      - Call
  /v1/call/collections.items.remove:
    post:
      operationId: CallController_call_collections.items.remove_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveItemsFromCollectionParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/groups.create:
    post:
      operationId: CallController_call_groups.create_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntity'
          description: ""
      tags:
      - Call
  /v1/call/groups.get:
    post:
      operationId: CallController_call_groups.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEntity'
          description: ""
      tags:
      - Call
  /v1/call/groups.delete:
    post:
      operationId: CallController_call_groups.delete_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/groups.accounts.add:
    post:
      operationId: CallController_call_groups.accounts.add_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAccountToGroupParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/groups.accounts.remove:
    post:
      operationId: CallController_call_groups.accounts.remove_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveAccountFromGroupParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/images.getMany:
    post:
      operationId: CallController_call_images.getMany_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUrlsForImagesParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ImageUrlResponseDto'
                type: array
          description: ""
      tags:
      - Call
  /v1/call/images.get:
    post:
      operationId: CallController_call_images.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetImageParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageEntity'
          description: ""
      tags:
      - Call
  /v1/call/images.representations.get:
    post:
      operationId: CallController_call_images.representations.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetImageRepresentationParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRepresentationResponseDto'
          description: ""
      tags:
      - Call
  /v1/call/operations.get:
    post:
      operationId: CallController_call_operations.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOperationParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationEntity'
          description: ""
      tags:
      - Call
  /v1/call/operations.getMany:
    post:
      operationId: CallController_call_operations.getMany_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOperationsParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OperationEntity'
                type: array
          description: ""
      tags:
      - Call
  /v1/call/operations.list:
    post:
      operationId: CallController_call_operations.list_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOperationsParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsDto'
          description: ""
      tags:
      - Call
  /v1/call/operations.metadata.update:
    post:
      operationId: CallController_call_operations.metadata.update_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationEntity'
          description: ""
      tags:
      - Call
  /v1/call/operations.wait:
    post:
      operationId: CallController_call_operations.wait_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitOperationParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationEntity'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.haute.linda.v1:
    post:
      operationId: CallController_call_operations.run.haute.linda.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/haute.linda.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/haute.linda.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.haute.naomi.v1:
    post:
      operationId: CallController_call_operations.run.haute.naomi.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/haute.naomi.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/haute.naomi.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.inpaint.kate.v1:
    post:
      operationId: CallController_call_operations.run.inpaint.kate.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inpaint.kate.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inpaint.kate.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.gpt.v1:
    post:
      operationId: CallController_call_operations.run.gpt.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gpt.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gpt.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.imagine.kate.v1:
    post:
      operationId: CallController_call_operations.run.imagine.kate.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imagine.kate.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imagine.kate.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.upscale.v1:
    post:
      operationId: CallController_call_operations.run.upscale.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upscale.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upscale.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.objectDetection.v1:
    post:
      operationId: CallController_call_operations.run.objectDetection.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectDetection.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectDetection.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.segmentAnything.embeddings.v1:
    post:
      operationId: CallController_call_operations.run.segmentAnything.embeddings.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/segmentAnything.embeddings.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentAnything.embeddings.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.segmentAnything.mask.v1:
    post:
      operationId: CallController_call_operations.run.segmentAnything.mask.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/segmentAnything.mask.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/segmentAnything.mask.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.poseEstimation.v1:
    post:
      operationId: CallController_call_operations.run.poseEstimation.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/poseEstimation.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/poseEstimation.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.cut.v1:
    post:
      operationId: CallController_call_operations.run.cut.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cut.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cut.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.crop.v1:
    post:
      operationId: CallController_call_operations.run.crop.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/crop.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/crop.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.noise.v1:
    post:
      operationId: CallController_call_operations.run.noise.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/noise.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noise.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.composite.v1:
    post:
      operationId: CallController_call_operations.run.composite.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/composite.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/composite.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.vton.gisele.v1:
    post:
      operationId: CallController_call_operations.run.vton.gisele.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vton.gisele.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vton.gisele.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/operations.run.negateImage.v1:
    post:
      operationId: CallController_call_operations.run.negateImage.v1_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/negateImage.v1.request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/negateImage.v1.response'
          description: ""
      tags:
      - Call
  /v1/call/poses.get:
    post:
      operationId: CallController_call_poses.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPoseParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoseEntity'
          description: ""
      tags:
      - Call
  /v1/call/poses.list:
    post:
      operationId: CallController_call_poses.list_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPosesParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPosesDto'
          description: ""
      tags:
      - Call
  /v1/call/poses.preview.set:
    post:
      operationId: CallController_call_poses.preview.set_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPosePreviewDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/stacks.create:
    post:
      operationId: CallController_call_stacks.create_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStackParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Call
  /v1/call/stacks.get:
    post:
      operationId: CallController_call_stacks.get_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetStackParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Call
  /v1/call/stacks.list:
    post:
      operationId: CallController_call_stacks.list_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListStacksParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStacksDto'
          description: ""
      tags:
      - Call
  /v1/call/stacks.metadata.update:
    post:
      operationId: CallController_call_stacks.metadata.update_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceMetadataDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Call
  /v1/call/stacks.items.add:
    post:
      operationId: CallController_call_stacks.items.add_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemsToStackParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Call
  /v1/call/stacks.items.remove:
    post:
      operationId: CallController_call_stacks.items.remove_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveItemsFromStackParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StackEntity'
          description: ""
      tags:
      - Call
  /v1/call/storage.create:
    post:
      operationId: CallController_call_storage.create_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageRecordParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageEntity'
          description: ""
      tags:
      - Call
  /v1/call/storage.delete:
    post:
      operationId: CallController_call_storage.delete_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteStorageParamsDto'
        required: true
      responses:
        "200":
          description: ""
      tags:
      - Call
  /v1/call/storage.getMany:
    post:
      operationId: CallController_call_storage.getMany_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetStorageRecordParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StorageRecordsResultDto'
                type: array
          description: ""
      tags:
      - Call
  /v1/call/storage.update:
    post:
      operationId: CallController_call_storage.update_v1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorageRecordParamsDto'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageEntity'
          description: ""
      tags:
      - Call
components:
  schemas:
    CreateAccountParamsDto:
      example:
        alias: alias
      properties:
        alias:
          type: string
      type: object
    AccountEntity:
      example:
        id: id
        type: root
      properties:
        id:
          type: string
        type:
          enum:
          - root
          - user
          type: string
      required:
      - id
      - type
      type: object
    ListAccountsDto:
      example:
        data:
        - id: id
          type: root
        - id: id
          type: root
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/AccountEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    AddBalanceControllerParamsDto:
      example:
        amount: amount
      properties:
        amount:
          type: string
      required:
      - amount
      type: object
    BalanceResultDto:
      example:
        balance: balance
      properties:
        balance:
          type: string
      required:
      - balance
      type: object
    CreateCollectionParamsDto:
      example:
        metadata: "{}"
      properties:
        metadata:
          type: object
      type: object
    CollectionEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: 0.8008281904610115
        creatorId: creatorId
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          type: number
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - kind
      - metadata
      - updatedAt
      type: object
    ListCollectionsDto:
      example:
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: 0.8008281904610115
          creatorId: creatorId
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: 0.8008281904610115
          creatorId: creatorId
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/CollectionEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    UpdateMetadataDto:
      example:
        overwrite: "{}"
      properties:
        overwrite:
          type: object
      required:
      - overwrite
      type: object
    ResourceEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: collection
        creatorId: creatorId
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          enum:
          - collection
          - operation
          - stack
          - image
          - pose
          - storage
          - pipeline
          - forbidden
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - kind
      - metadata
      - updatedAt
      type: object
    AddItemsToCollectionControllerParamsDto:
      example:
        itemIds:
        - itemIds
        - itemIds
      properties:
        itemIds:
          items:
            type: string
          type: array
      required:
      - itemIds
      type: object
    ListCollectionItemsDto:
      example:
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: collection
          creatorId: creatorId
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: collection
          creatorId: creatorId
          id: id
          updatedAt: 2000-01-23T04:56:07.000+00:00
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/ResourceEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    RemoveItemsFromCollectionControllerParamsDto:
      example:
        itemIds:
        - itemIds
        - itemIds
      properties:
        itemIds:
          items:
            type: string
          type: array
      required:
      - itemIds
      type: object
    GroupEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: id
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      type: object
    AddAccountToGroupControllerParamsDto:
      example:
        accountId: accountId
        role: maintainer
      properties:
        accountId:
          type: string
        role:
          enum:
          - maintainer
          - member
          - owner
          type: string
      required:
      - accountId
      - role
      type: object
    RemoveAccountFromGroupControllerParamsDto:
      example:
        accountId: accountId
        role: maintainer
      properties:
        accountId:
          type: string
        role:
          enum:
          - maintainer
          - member
          - owner
          type: string
      required:
      - accountId
      - role
      type: object
    InitializeImageUploadResultDto:
      example:
        uploadUrl: uploadUrl
      properties:
        uploadUrl:
          type: string
      required:
      - uploadUrl
      type: object
    CreateImageParamsDto:
      example:
        fileToken: fileToken
      properties:
        fileToken:
          type: string
      type: object
    ImageEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: image
        creatorId: creatorId
        width: 0.8008281904610115
        format: format
        id: id
        url: url
        updatedAt: 2000-01-23T04:56:07.000+00:00
        height: 6.027456183070403
      properties:
        kind:
          default: image
          enum:
          - collection
          - operation
          - stack
          - image
          - pose
          - storage
          - pipeline
          - forbidden
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        width:
          type: number
        height:
          type: number
        format:
          type: string
        url:
          type: string
      required:
      - createdAt
      - creatorId
      - format
      - height
      - id
      - kind
      - metadata
      - updatedAt
      - url
      - width
      type: object
    GetUrlsForImagesParamsDto:
      example:
        ids:
        - ids
        - ids
      properties:
        ids:
          items:
            type: string
          type: array
      required:
      - ids
      type: object
    ImageRepresentationResponseDto:
      example:
        imageId: imageId
        type: type
        url: url
      properties:
        imageId:
          type: string
        type:
          type: string
        url:
          type: string
      required:
      - imageId
      - type
      - url
      type: object
    OperationEntity:
      example:
        output: "{}"
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        input:
          type: object
        output:
          nullable: true
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    GetOperationsParamsDto:
      example:
        ids:
        - ids
        - ids
      properties:
        ids:
          items:
            type: string
          type: array
      required:
      - ids
      type: object
    ListOperationsDto:
      example:
        data:
        - output: "{}"
          input: "{}"
          createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: operation
          creatorId: creatorId
          id: id
          type: type
          status: pending
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - output: "{}"
          input: "{}"
          createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: operation
          creatorId: creatorId
          id: id
          type: type
          status: pending
          updatedAt: 2000-01-23T04:56:07.000+00:00
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/OperationEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    PoseEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        previewImageId: previewImageId
        kind: pose
        creatorId: creatorId
        sourceImage:
          createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: image
          creatorId: creatorId
          width: 0.8008281904610115
          format: format
          id: id
          url: url
          updatedAt: 2000-01-23T04:56:07.000+00:00
          height: 6.027456183070403
        id: id
        previewImage:
          createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: image
          creatorId: creatorId
          width: 0.8008281904610115
          format: format
          id: id
          url: url
          updatedAt: 2000-01-23T04:56:07.000+00:00
          height: 6.027456183070403
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: pose
          enum:
          - pose
          type: string
        sourceImage:
          $ref: '#/components/schemas/ImageEntity'
        previewImage:
          $ref: '#/components/schemas/ImageEntity'
        previewImageId:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - kind
      - metadata
      - sourceImage
      - updatedAt
      type: object
    ListPosesDto:
      example:
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          previewImageId: previewImageId
          kind: pose
          creatorId: creatorId
          sourceImage:
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: image
            creatorId: creatorId
            width: 0.8008281904610115
            format: format
            id: id
            url: url
            updatedAt: 2000-01-23T04:56:07.000+00:00
            height: 6.027456183070403
          id: id
          previewImage:
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: image
            creatorId: creatorId
            width: 0.8008281904610115
            format: format
            id: id
            url: url
            updatedAt: 2000-01-23T04:56:07.000+00:00
            height: 6.027456183070403
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          previewImageId: previewImageId
          kind: pose
          creatorId: creatorId
          sourceImage:
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: image
            creatorId: creatorId
            width: 0.8008281904610115
            format: format
            id: id
            url: url
            updatedAt: 2000-01-23T04:56:07.000+00:00
            height: 6.027456183070403
          id: id
          previewImage:
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: image
            creatorId: creatorId
            width: 0.8008281904610115
            format: format
            id: id
            url: url
            updatedAt: 2000-01-23T04:56:07.000+00:00
            height: 6.027456183070403
          updatedAt: 2000-01-23T04:56:07.000+00:00
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/PoseEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    SetPosePreviewControllerParamsDto:
      example:
        previewImageId: previewImageId
      properties:
        previewImageId:
          type: string
      required:
      - previewImageId
      type: object
    CreateStackParamsDto:
      example:
        metadata: "{}"
      properties:
        metadata:
          type: object
      type: object
    StackEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: stack
        creatorId: creatorId
        id: id
        items:
        - output: "{}"
          input: "{}"
          createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: operation
          creatorId: creatorId
          id: id
          type: type
          status: pending
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - output: "{}"
          input: "{}"
          createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: operation
          creatorId: creatorId
          id: id
          type: type
          status: pending
          updatedAt: 2000-01-23T04:56:07.000+00:00
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: stack
          enum:
          - stack
          type: string
        items:
          items:
            $ref: '#/components/schemas/StackEntity_items_inner'
          type: array
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - items
      - kind
      - metadata
      - updatedAt
      type: object
    ListStacksDto:
      example:
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: stack
          creatorId: creatorId
          id: id
          items:
          - output: "{}"
            input: "{}"
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: operation
            creatorId: creatorId
            id: id
            type: type
            status: pending
            updatedAt: 2000-01-23T04:56:07.000+00:00
          - output: "{}"
            input: "{}"
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: operation
            creatorId: creatorId
            id: id
            type: type
            status: pending
            updatedAt: 2000-01-23T04:56:07.000+00:00
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: stack
          creatorId: creatorId
          id: id
          items:
          - output: "{}"
            input: "{}"
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: operation
            creatorId: creatorId
            id: id
            type: type
            status: pending
            updatedAt: 2000-01-23T04:56:07.000+00:00
          - output: "{}"
            input: "{}"
            createdAt: 2000-01-23T04:56:07.000+00:00
            metadata: "{}"
            kind: operation
            creatorId: creatorId
            id: id
            type: type
            status: pending
            updatedAt: 2000-01-23T04:56:07.000+00:00
          updatedAt: 2000-01-23T04:56:07.000+00:00
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/StackEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    AddItemsToStackControllerParamsDto:
      example:
        itemIds:
        - itemIds
        - itemIds
      properties:
        itemIds:
          items:
            type: string
          type: array
      required:
      - itemIds
      type: object
    CreateStorageRecordParamsDto:
      example:
        value: "{}"
        key: key
      properties:
        key:
          type: string
        value:
          type: object
      required:
      - key
      - value
      type: object
    StorageEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: storage
        creatorId: creatorId
        id: id
        value: "{}"
        key: key
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: storage
          enum:
          - storage
          type: string
        key:
          type: string
        value:
          type: object
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - key
      - kind
      - metadata
      - updatedAt
      - value
      type: object
    GetStorageRecordParamsDto:
      example:
        keys:
        - keys
        - keys
      properties:
        keys:
          items:
            type: string
          minItems: 1
          type: array
      required:
      - keys
      type: object
    StorageRecordsResultDto:
      example:
        value: "{}"
        key: key
      properties:
        key:
          type: string
        value:
          type: object
      required:
      - key
      - value
      type: object
    DeleteStorageParamsDto:
      example:
        key: key
      properties:
        key:
          type: string
      required:
      - key
      type: object
    UpdateStorageRecordParamsDto:
      example:
        value: "{}"
        key: key
      properties:
        key:
          type: string
        value:
          type: object
      required:
      - key
      - value
      type: object
    CreatePipelineParamsDto:
      example:
        metadata: "{}"
        tasks: "{}"
      properties:
        metadata:
          type: object
        tasks:
          type: object
      required:
      - tasks
      type: object
    PipelineEntity:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: pipeline
        permissions: "{}"
        creatorId: creatorId
        state: "{}"
        id: id
        tasks:
        - "{}"
        - "{}"
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: pipeline
          enum:
          - pipeline
          type: string
        permissions:
          type: object
        state:
          type: object
        status:
          enum:
          - pending
          - completed
          - failed
          type: string
        tasks:
          items:
            type: object
          type: array
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - kind
      - metadata
      - permissions
      - state
      - status
      - tasks
      - updatedAt
      type: object
    ListPipelinesDto:
      example:
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: pipeline
          permissions: "{}"
          creatorId: creatorId
          state: "{}"
          id: id
          tasks:
          - "{}"
          - "{}"
          status: pending
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          metadata: "{}"
          kind: pipeline
          permissions: "{}"
          creatorId: creatorId
          state: "{}"
          id: id
          tasks:
          - "{}"
          - "{}"
          status: pending
          updatedAt: 2000-01-23T04:56:07.000+00:00
        pageInfo:
          nextCursor: nextCursor
      properties:
        data:
          items:
            $ref: '#/components/schemas/PipelineEntity'
          type: array
        pageInfo:
          $ref: '#/components/schemas/ListAccountsDto_pageInfo'
      required:
      - data
      - pageInfo
      type: object
    GrantAccessControllerParams:
      example:
        access: access
        principalId: principalId
        principalType: account
      properties:
        principalType:
          enum:
          - account
          - group
          type: string
        principalId:
          type: string
        access:
          type: string
      required:
      - access
      - principalId
      - principalType
      type: object
    RevokeAccessControllerParamsDto:
      example:
        access: access
        principalId: principalId
        principalType: account
      properties:
        principalType:
          enum:
          - account
          - group
          type: string
        principalId:
          type: string
        access:
          type: string
      required:
      - access
      - principalId
      - principalType
      type: object
    AttachAccessControllerParamsDto:
      example:
        parentResourceId: parentResourceId
      properties:
        parentResourceId:
          type: string
      required:
      - parentResourceId
      type: object
    DetachAccessControllerParamsDto:
      example:
        parentResourceId: parentResourceId
      properties:
        parentResourceId:
          type: string
      required:
      - parentResourceId
      type: object
    ListAccessControllerAttachmentsDto:
      example:
        parentResourceId: parentResourceId
      properties:
        parentResourceId:
          type: string
      required:
      - parentResourceId
      type: object
    ListAccessControllerGrantsDto:
      example:
        access: owner
        principalId: principalId
        principalType: principalType
      properties:
        principalId:
          type: string
        principalType:
          type: string
        access:
          enum:
          - owner
          - maintainer
          - writer
          - reader
          - member
          - can_assign_members
          - can_assign_maintainers
          - can_assign_owners
          - can_view
          - can_write
          - can_edit
          - can_delete
          - can_change_access
          - can_add_items
          - can_remove_items
          - can_list
          - parent
          type: string
      required:
      - access
      - principalId
      - principalType
      type: object
    ListAccessControllerDto:
      example:
        grants:
        - access: owner
          principalId: principalId
          principalType: principalType
        - access: owner
          principalId: principalId
          principalType: principalType
        attachments:
        - parentResourceId: parentResourceId
        - parentResourceId: parentResourceId
      properties:
        attachments:
          items:
            $ref: '#/components/schemas/ListAccessControllerAttachmentsDto'
          type: array
        grants:
          items:
            $ref: '#/components/schemas/ListAccessControllerGrantsDto'
          type: array
      required:
      - attachments
      - grants
      type: object
    LindaHauteV1Input:
      properties:
        aspectRatio:
          enum:
          - 1:1
          - 9:7
          - 7:9
          - 19:13
          - 13:19
          - 7:4
          - 4:7
          - 12:5
          - 5:12
          type: string
        productImageId:
          type: string
        prompt:
          type: string
        seed:
          type: number
        imageWeight:
          default: 0.5
          maximum: 1
          minimum: 0
          type: number
        negativePrompt:
          default: "(too many fingers, face asymmetry, eyes asymmetry, deformed eyes,\
            \ open mouth), worst quality, low quality, illustration, 3d, 2d, painting,\
            \ cartoons, sketch"
          type: string
        inferenceSteps:
          default: 33
          maximum: 100
          minimum: 1
          type: number
        guidanceScale:
          default: 6
          maximum: 10
          minimum: 0
          type: number
        strength:
          default: 0.3
          maximum: 1
          minimum: 0
          type: number
      required:
      - aspectRatio
      - productImageId
      - prompt
      - seed
      type: object
    haute.linda.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/LindaHauteV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    OperationOutputImageMultiple:
      properties:
        kind:
          enum:
          - image/multiple
          type: string
        imageIds:
          items:
            type: string
          type: array
      required:
      - imageIds
      - kind
      type: object
    haute.linda.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageMultiple'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    NaomiHauteV1Input:
      properties:
        loraIds:
          default:
          - 6a463153-464d-42f2-867e-76f6fef76281
          description: UNSTABLE
          items:
            type: string
          type: array
        prompt:
          type: string
        category:
          type: string
        garmentImageId:
          type: string
        poseId:
          type: string
        seed:
          type: number
        width:
          type: number
        height:
          type: number
        textGuidanceScale:
          default: 2.5
          maximum: 10
          minimum: 0
          type: number
        imageGuidanceScale:
          default: 1.6
          maximum: 10
          minimum: 0
          type: number
        numInferenceSteps:
          default: 50
          maximum: 100
          minimum: 1
          type: number
        mode:
          default: apparel_to_model
          enum:
          - apparel_to_model
          - model_to_model
          type: string
      required:
      - category
      - garmentImageId
      - height
      - poseId
      - prompt
      - seed
      - width
      type: object
    haute.naomi.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/NaomiHauteV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    OperationOutputImageSingle:
      properties:
        kind:
          enum:
          - image/single
          type: string
        imageId:
          type: string
      required:
      - imageId
      - kind
      type: object
    haute.naomi.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    KateInpaintV1Input:
      properties:
        imageId:
          type: string
        maskImageId:
          type: string
        maskSpread:
          default: 0
          maximum: 300
          minimum: 0
          type: number
        prompt:
          type: string
        seed:
          type: number
        strength:
          type: number
        height:
          type: number
        width:
          type: number
        numInferenceSteps:
          default: 30
          maximum: 50
          minimum: 1
          type: number
        guidanceScale:
          default: 7
          maximum: 50
          minimum: 1
          type: number
        branch:
          default: stable
          enum:
          - stable
          - nightly
          type: string
      required:
      - imageId
      - prompt
      - seed
      - strength
      type: object
    inpaint.kate.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/KateInpaintV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    inpaint.kate.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    GPTV1Input:
      properties:
        model:
          default: gpt-4o
          enum:
          - gpt-4o
          type: string
        prompt:
          type: string
        imageId:
          type: string
      required:
      - prompt
      type: object
    gpt.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/GPTV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    OperationOutputJSON:
      properties:
        kind:
          enum:
          - json
          type: string
        data:
          type: object
      required:
      - data
      - kind
      type: object
    gpt.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputJSON'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    KateImagineV1Input:
      properties:
        aspectRatio:
          enum:
          - 1:1
          - 9:7
          - 7:9
          - 19:13
          - 13:19
          - 7:4
          - 4:7
          type: string
        seed:
          type: string
        prompt:
          type: string
      required:
      - aspectRatio
      - prompt
      - seed
      type: object
    imagine.kate.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/KateImagineV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    imagine.kate.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    UpscaleV1Input:
      properties:
        imageId:
          type: string
      required:
      - imageId
      type: object
    upscale.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/UpscaleV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    upscale.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    ObjectDetectionV1Input:
      properties:
        labels:
          items:
            type: string
          type: array
        imageId:
          type: string
      required:
      - imageId
      - labels
      type: object
    objectDetection.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/ObjectDetectionV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    objectDetection.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputJSON'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    SegmentAnythingEmbeddingsV1Input:
      properties:
        imageId:
          type: string
      required:
      - imageId
      type: object
    segmentAnything.embeddings.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/SegmentAnythingEmbeddingsV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    segmentAnything.embeddings.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputJSON'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    SegmentAnythingMaskV1Input:
      properties:
        imageId:
          type: string
        box:
          items:
            type: number
          type: array
        smoothness:
          default: 0.1
          maximum: 1
          minimum: 0
          type: number
        maskThreshold:
          default: 0
          type: number
      required:
      - box
      - imageId
      type: object
    segmentAnything.mask.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/SegmentAnythingMaskV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    segmentAnything.mask.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    PoseEstimationV1Input:
      properties:
        imageId:
          type: string
      required:
      - imageId
      type: object
    poseEstimation.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/PoseEstimationV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    poseEstimation.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputJSON'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    CutV1Input:
      properties:
        imageId:
          type: string
        maskImageId:
          type: string
      required:
      - imageId
      - maskImageId
      type: object
    cut.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/CutV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    cut.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    CropV1Input:
      properties:
        imageId:
          type: string
        left:
          type: number
        top:
          type: number
        width:
          type: number
        height:
          type: number
      required:
      - height
      - imageId
      - left
      - top
      - width
      type: object
    crop.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/CropV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    crop.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    NoiseV1Input:
      properties:
        imageId:
          type: string
        mean:
          type: number
        sigma:
          type: number
      required:
      - imageId
      type: object
    noise.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/NoiseV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    noise.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    CompositeElement:
      properties:
        imageId:
          type: string
        left:
          maximum: 8192
          minimum: 1
          type: number
        top:
          maximum: 8192
          minimum: 1
          type: number
        width:
          maximum: 8192
          minimum: 1
          type: number
        height:
          maximum: 8192
          minimum: 1
          type: number
        fit:
          enum:
          - cover
          - contain
          - fill
          - inside
          - outside
          type: string
      required:
      - fit
      - height
      - imageId
      - left
      - top
      - width
      type: object
    CompositeV1Input:
      properties:
        width:
          maximum: 8192
          minimum: 1
          type: number
        height:
          maximum: 8192
          minimum: 1
          type: number
        background:
          pattern: "^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$"
          type: string
        elements:
          items:
            $ref: '#/components/schemas/CompositeElement'
          type: array
      required:
      - background
      - elements
      - height
      - width
      type: object
    composite.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/CompositeV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    composite.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    GiseleVtonV1Input:
      properties:
        category:
          enum:
          - dresses
          - lower_body
          - upper_body
          type: string
        imageId:
          type: string
        productDescription:
          type: string
        productImageId:
          type: string
        seed:
          type: number
      required:
      - category
      - imageId
      - productDescription
      - productImageId
      - seed
      type: object
    vton.gisele.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/GiseleVtonV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    vton.gisele.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    NegateImageV1Input:
      properties:
        imageId:
          type: string
      required:
      - imageId
      type: object
    negateImage.v1.request:
      properties:
        input:
          $ref: '#/components/schemas/NegateImageV1Input'
        metadata:
          type: object
      required:
      - input
      type: object
    negateImage.v1.response:
      example:
        output: ""
        input: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        metadata: "{}"
        kind: operation
        creatorId: creatorId
        id: id
        type: type
        status: pending
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        kind:
          default: operation
          enum:
          - operation
          type: string
        output:
          allOf:
          - $ref: '#/components/schemas/OperationOutputImageSingle'
          nullable: true
        input:
          type: object
        status:
          enum:
          - pending
          - finished
          - failed
          type: string
        type:
          type: string
        id:
          type: string
        creatorId:
          type: string
        metadata:
          type: object
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - creatorId
      - id
      - input
      - kind
      - metadata
      - output
      - status
      - type
      - updatedAt
      type: object
    ModifyAccessParamsDto:
      example:
        resourceId: resourceId
        access: access
        principalId: principalId
        principalType: account
      properties:
        principalType:
          enum:
          - account
          - group
          type: string
        principalId:
          type: string
        resourceId:
          type: string
        access:
          type: string
      required:
      - access
      - principalId
      - principalType
      - resourceId
      type: object
    AttachAccessParamsDto:
      example:
        resourceId: resourceId
        parentResourceId: parentResourceId
      properties:
        resourceId:
          type: string
        parentResourceId:
          type: string
      required:
      - parentResourceId
      - resourceId
      type: object
    GetAccountParamsDto:
      example:
        alias: alias
        id: id
      properties:
        id:
          type: string
        alias:
          type: string
      type: object
    ListAccountsParamsDto:
      example:
        cursor: cursor
        limit: 0.8008281904610115
        orderBy: createdAt_DESC
      properties:
        orderBy:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          type: string
        limit:
          default: 50
          type: number
        cursor:
          type: string
      type: object
    AddBalanceParamsDto:
      example:
        accountId: accountId
        amount: amount
      properties:
        amount:
          type: string
        accountId:
          type: string
      required:
      - accountId
      - amount
      type: object
    GetBalanceParamsDto:
      example:
        accountId: accountId
      properties:
        accountId:
          type: string
      required:
      - accountId
      type: object
    GetCollectionParamsDto:
      example:
        collectionId: collectionId
      properties:
        collectionId:
          type: string
      required:
      - collectionId
      type: object
    ListCollectionsParamsDto:
      example:
        cursor: cursor
        limit: 0.8008281904610115
        orderBy: createdAt_DESC
      properties:
        orderBy:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        limit:
          default: 50
          type: number
        cursor:
          type: string
      type: object
    UpdateResourceMetadataDto:
      example:
        update:
          overwrite: "{}"
        id: id
      properties:
        id:
          type: string
        update:
          $ref: '#/components/schemas/UpdateMetadataDto'
      required:
      - id
      - update
      type: object
    AddItemsToCollectionParamsDto:
      example:
        itemIds:
        - itemIds
        - itemIds
        collectionId: collectionId
      properties:
        collectionId:
          type: string
        itemIds:
          items:
            type: string
          type: array
      required:
      - collectionId
      - itemIds
      type: object
    ListCollectionItemsParamsDto:
      example:
        cursor: cursor
        kind: collection
        limit: 0.8008281904610115
        orderBy: createdAt_DESC
        collectionId: collectionId
      properties:
        collectionId:
          type: string
        orderBy:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        limit:
          default: 50
          type: number
        kind:
          enum:
          - collection
          - operation
          - stack
          - image
          - pose
          - storage
          - pipeline
          - forbidden
          type: string
        cursor:
          type: string
      required:
      - collectionId
      type: object
    RemoveItemsFromCollectionParamsDto:
      example:
        itemIds:
        - itemIds
        - itemIds
        collectionId: collectionId
      properties:
        collectionId:
          type: string
        itemIds:
          items:
            type: string
          type: array
      required:
      - collectionId
      - itemIds
      type: object
    GetGroupParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    DeleteParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    AddAccountToGroupParamsDto:
      example:
        accountId: accountId
        role: maintainer
        groupId: groupId
      properties:
        accountId:
          type: string
        groupId:
          type: string
        role:
          enum:
          - maintainer
          - member
          - owner
          type: string
      required:
      - accountId
      - groupId
      - role
      type: object
    RemoveAccountFromGroupParamsDto:
      example:
        accountId: accountId
        role: maintainer
        groupId: groupId
      properties:
        accountId:
          type: string
        groupId:
          type: string
        role:
          enum:
          - maintainer
          - member
          - owner
          type: string
      required:
      - accountId
      - groupId
      - role
      type: object
    ImageUrlResponseDto:
      example:
        id: id
        url: url
      properties:
        id:
          type: string
        url:
          type: string
      required:
      - id
      - url
      type: object
    GetImageParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    GetImageRepresentationParamsDto:
      example:
        imageId: imageId
        type: sam.v1
      properties:
        imageId:
          type: string
        type:
          enum:
          - sam.v1
          type: string
      required:
      - imageId
      - type
      type: object
    GetOperationParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    ListOperationsParamsDto:
      example:
        cursor: cursor
        limit: 0.8008281904610115
        orderBy: createdAt_DESC
      properties:
        orderBy:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        limit:
          default: 50
          type: number
        cursor:
          type: string
      type: object
    WaitOperationParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    GetPoseParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    ListPosesParamsDto:
      example:
        cursor: cursor
        limit: 0.8008281904610115
        orderBy: createdAt_DESC
      properties:
        orderBy:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          type: string
        limit:
          default: 50
          type: number
        cursor:
          type: string
      type: object
    SetPosePreviewDto:
      example:
        previewImageId: previewImageId
        poseId: poseId
      properties:
        poseId:
          type: string
        previewImageId:
          type: string
      required:
      - poseId
      - previewImageId
      type: object
    GetStackParamsDto:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    ListStacksParamsDto:
      example:
        cursor: cursor
        limit: 0.8008281904610115
        orderBy: createdAt_DESC
      properties:
        orderBy:
          default: createdAt_DESC
          enum:
          - createdAt_ASC
          - createdAt_DESC
          - updatedAt_ASC
          - updatedAt_DESC
          type: string
        limit:
          default: 50
          type: number
        cursor:
          type: string
      type: object
    AddItemsToStackParamsDto:
      example:
        stackId: stackId
        itemIds:
        - itemIds
        - itemIds
      properties:
        stackId:
          type: string
        itemIds:
          items:
            type: string
          type: array
      required:
      - itemIds
      - stackId
      type: object
    RemoveItemsFromStackParamsDto:
      example:
        stackId: stackId
        itemIds:
        - itemIds
        - itemIds
      properties:
        stackId:
          type: string
        itemIds:
          items:
            type: string
          type: array
      required:
      - itemIds
      - stackId
      type: object
    ListAccountsDto_pageInfo:
      example:
        nextCursor: nextCursor
      properties:
        nextCursor:
          type: string
      required:
      - nextCursor
      type: object
    StackEntity_items_inner:
      oneOf:
      - $ref: '#/components/schemas/OperationEntity'
      - $ref: '#/components/schemas/ImageEntity'
  securitySchemes:
    bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http

/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoveItemsFromCollectionParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveItemsFromCollectionParamsDto{}

// RemoveItemsFromCollectionParamsDto struct for RemoveItemsFromCollectionParamsDto
type RemoveItemsFromCollectionParamsDto struct {
	CollectionId string `json:"collectionId"`
	ItemIds []string `json:"itemIds"`
}

type _RemoveItemsFromCollectionParamsDto RemoveItemsFromCollectionParamsDto

// NewRemoveItemsFromCollectionParamsDto instantiates a new RemoveItemsFromCollectionParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveItemsFromCollectionParamsDto(collectionId string, itemIds []string) *RemoveItemsFromCollectionParamsDto {
	this := RemoveItemsFromCollectionParamsDto{}
	this.CollectionId = collectionId
	this.ItemIds = itemIds
	return &this
}

// NewRemoveItemsFromCollectionParamsDtoWithDefaults instantiates a new RemoveItemsFromCollectionParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveItemsFromCollectionParamsDtoWithDefaults() *RemoveItemsFromCollectionParamsDto {
	this := RemoveItemsFromCollectionParamsDto{}
	return &this
}

// GetCollectionId returns the CollectionId field value
func (o *RemoveItemsFromCollectionParamsDto) GetCollectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value
// and a boolean to check if the value has been set.
func (o *RemoveItemsFromCollectionParamsDto) GetCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionId, true
}

// SetCollectionId sets field value
func (o *RemoveItemsFromCollectionParamsDto) SetCollectionId(v string) {
	o.CollectionId = v
}

// GetItemIds returns the ItemIds field value
func (o *RemoveItemsFromCollectionParamsDto) GetItemIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value
// and a boolean to check if the value has been set.
func (o *RemoveItemsFromCollectionParamsDto) GetItemIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemIds, true
}

// SetItemIds sets field value
func (o *RemoveItemsFromCollectionParamsDto) SetItemIds(v []string) {
	o.ItemIds = v
}

func (o RemoveItemsFromCollectionParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveItemsFromCollectionParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collectionId"] = o.CollectionId
	toSerialize["itemIds"] = o.ItemIds
	return toSerialize, nil
}

func (o *RemoveItemsFromCollectionParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collectionId",
		"itemIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoveItemsFromCollectionParamsDto := _RemoveItemsFromCollectionParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoveItemsFromCollectionParamsDto)

	if err != nil {
		return err
	}

	*o = RemoveItemsFromCollectionParamsDto(varRemoveItemsFromCollectionParamsDto)

	return err
}

type NullableRemoveItemsFromCollectionParamsDto struct {
	value *RemoveItemsFromCollectionParamsDto
	isSet bool
}

func (v NullableRemoveItemsFromCollectionParamsDto) Get() *RemoveItemsFromCollectionParamsDto {
	return v.value
}

func (v *NullableRemoveItemsFromCollectionParamsDto) Set(val *RemoveItemsFromCollectionParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveItemsFromCollectionParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveItemsFromCollectionParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveItemsFromCollectionParamsDto(val *RemoveItemsFromCollectionParamsDto) *NullableRemoveItemsFromCollectionParamsDto {
	return &NullableRemoveItemsFromCollectionParamsDto{value: val, isSet: true}
}

func (v NullableRemoveItemsFromCollectionParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveItemsFromCollectionParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type GroupsAPI interface {

	/*
	GroupsControllerAddAccountV1 Method for GroupsControllerAddAccountV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGroupsControllerAddAccountV1Request
	*/
	GroupsControllerAddAccountV1(ctx context.Context, id string) ApiGroupsControllerAddAccountV1Request

	// GroupsControllerAddAccountV1Execute executes the request
	GroupsControllerAddAccountV1Execute(r ApiGroupsControllerAddAccountV1Request) (*http.Response, error)

	/*
	GroupsControllerCreateGroupV1 Method for GroupsControllerCreateGroupV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGroupsControllerCreateGroupV1Request
	*/
	GroupsControllerCreateGroupV1(ctx context.Context) ApiGroupsControllerCreateGroupV1Request

	// GroupsControllerCreateGroupV1Execute executes the request
	//  @return GroupEntity
	GroupsControllerCreateGroupV1Execute(r ApiGroupsControllerCreateGroupV1Request) (*GroupEntity, *http.Response, error)

	/*
	GroupsControllerDeleteGroupV1 Method for GroupsControllerDeleteGroupV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGroupsControllerDeleteGroupV1Request
	*/
	GroupsControllerDeleteGroupV1(ctx context.Context, id string) ApiGroupsControllerDeleteGroupV1Request

	// GroupsControllerDeleteGroupV1Execute executes the request
	GroupsControllerDeleteGroupV1Execute(r ApiGroupsControllerDeleteGroupV1Request) (*http.Response, error)

	/*
	GroupsControllerGetGroupV1 Method for GroupsControllerGetGroupV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGroupsControllerGetGroupV1Request
	*/
	GroupsControllerGetGroupV1(ctx context.Context, id string) ApiGroupsControllerGetGroupV1Request

	// GroupsControllerGetGroupV1Execute executes the request
	//  @return GroupEntity
	GroupsControllerGetGroupV1Execute(r ApiGroupsControllerGetGroupV1Request) (*GroupEntity, *http.Response, error)

	/*
	GroupsControllerRemoveAccountV1 Method for GroupsControllerRemoveAccountV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGroupsControllerRemoveAccountV1Request
	*/
	GroupsControllerRemoveAccountV1(ctx context.Context, id string) ApiGroupsControllerRemoveAccountV1Request

	// GroupsControllerRemoveAccountV1Execute executes the request
	GroupsControllerRemoveAccountV1Execute(r ApiGroupsControllerRemoveAccountV1Request) (*http.Response, error)
}

// GroupsAPIService GroupsAPI service
type GroupsAPIService service

type ApiGroupsControllerAddAccountV1Request struct {
	ctx context.Context
	ApiService GroupsAPI
	id string
	addAccountToGroupControllerParamsDto *AddAccountToGroupControllerParamsDto
}

func (r ApiGroupsControllerAddAccountV1Request) AddAccountToGroupControllerParamsDto(addAccountToGroupControllerParamsDto AddAccountToGroupControllerParamsDto) ApiGroupsControllerAddAccountV1Request {
	r.addAccountToGroupControllerParamsDto = &addAccountToGroupControllerParamsDto
	return r
}

func (r ApiGroupsControllerAddAccountV1Request) Execute() (*http.Response, error) {
	return r.ApiService.GroupsControllerAddAccountV1Execute(r)
}

/*
GroupsControllerAddAccountV1 Method for GroupsControllerAddAccountV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGroupsControllerAddAccountV1Request
*/
func (a *GroupsAPIService) GroupsControllerAddAccountV1(ctx context.Context, id string) ApiGroupsControllerAddAccountV1Request {
	return ApiGroupsControllerAddAccountV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GroupsAPIService) GroupsControllerAddAccountV1Execute(r ApiGroupsControllerAddAccountV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GroupsControllerAddAccountV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/groups/{id}/accounts/add"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addAccountToGroupControllerParamsDto == nil {
		return nil, reportError("addAccountToGroupControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addAccountToGroupControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsControllerCreateGroupV1Request struct {
	ctx context.Context
	ApiService GroupsAPI
}

func (r ApiGroupsControllerCreateGroupV1Request) Execute() (*GroupEntity, *http.Response, error) {
	return r.ApiService.GroupsControllerCreateGroupV1Execute(r)
}

/*
GroupsControllerCreateGroupV1 Method for GroupsControllerCreateGroupV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGroupsControllerCreateGroupV1Request
*/
func (a *GroupsAPIService) GroupsControllerCreateGroupV1(ctx context.Context) ApiGroupsControllerCreateGroupV1Request {
	return ApiGroupsControllerCreateGroupV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GroupEntity
func (a *GroupsAPIService) GroupsControllerCreateGroupV1Execute(r ApiGroupsControllerCreateGroupV1Request) (*GroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GroupsControllerCreateGroupV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsControllerDeleteGroupV1Request struct {
	ctx context.Context
	ApiService GroupsAPI
	id string
}

func (r ApiGroupsControllerDeleteGroupV1Request) Execute() (*http.Response, error) {
	return r.ApiService.GroupsControllerDeleteGroupV1Execute(r)
}

/*
GroupsControllerDeleteGroupV1 Method for GroupsControllerDeleteGroupV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGroupsControllerDeleteGroupV1Request
*/
func (a *GroupsAPIService) GroupsControllerDeleteGroupV1(ctx context.Context, id string) ApiGroupsControllerDeleteGroupV1Request {
	return ApiGroupsControllerDeleteGroupV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GroupsAPIService) GroupsControllerDeleteGroupV1Execute(r ApiGroupsControllerDeleteGroupV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GroupsControllerDeleteGroupV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGroupsControllerGetGroupV1Request struct {
	ctx context.Context
	ApiService GroupsAPI
	id string
}

func (r ApiGroupsControllerGetGroupV1Request) Execute() (*GroupEntity, *http.Response, error) {
	return r.ApiService.GroupsControllerGetGroupV1Execute(r)
}

/*
GroupsControllerGetGroupV1 Method for GroupsControllerGetGroupV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGroupsControllerGetGroupV1Request
*/
func (a *GroupsAPIService) GroupsControllerGetGroupV1(ctx context.Context, id string) ApiGroupsControllerGetGroupV1Request {
	return ApiGroupsControllerGetGroupV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GroupEntity
func (a *GroupsAPIService) GroupsControllerGetGroupV1Execute(r ApiGroupsControllerGetGroupV1Request) (*GroupEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GroupsControllerGetGroupV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupsControllerRemoveAccountV1Request struct {
	ctx context.Context
	ApiService GroupsAPI
	id string
	removeAccountFromGroupControllerParamsDto *RemoveAccountFromGroupControllerParamsDto
}

func (r ApiGroupsControllerRemoveAccountV1Request) RemoveAccountFromGroupControllerParamsDto(removeAccountFromGroupControllerParamsDto RemoveAccountFromGroupControllerParamsDto) ApiGroupsControllerRemoveAccountV1Request {
	r.removeAccountFromGroupControllerParamsDto = &removeAccountFromGroupControllerParamsDto
	return r
}

func (r ApiGroupsControllerRemoveAccountV1Request) Execute() (*http.Response, error) {
	return r.ApiService.GroupsControllerRemoveAccountV1Execute(r)
}

/*
GroupsControllerRemoveAccountV1 Method for GroupsControllerRemoveAccountV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGroupsControllerRemoveAccountV1Request
*/
func (a *GroupsAPIService) GroupsControllerRemoveAccountV1(ctx context.Context, id string) ApiGroupsControllerRemoveAccountV1Request {
	return ApiGroupsControllerRemoveAccountV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GroupsAPIService) GroupsControllerRemoveAccountV1Execute(r ApiGroupsControllerRemoveAccountV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupsAPIService.GroupsControllerRemoveAccountV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/groups/{id}/accounts/remove"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.removeAccountFromGroupControllerParamsDto == nil {
		return nil, reportError("removeAccountFromGroupControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.removeAccountFromGroupControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

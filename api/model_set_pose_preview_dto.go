/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetPosePreviewDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetPosePreviewDto{}

// SetPosePreviewDto struct for SetPosePreviewDto
type SetPosePreviewDto struct {
	PoseId string `json:"poseId"`
	PreviewImageId string `json:"previewImageId"`
}

type _SetPosePreviewDto SetPosePreviewDto

// NewSetPosePreviewDto instantiates a new SetPosePreviewDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetPosePreviewDto(poseId string, previewImageId string) *SetPosePreviewDto {
	this := SetPosePreviewDto{}
	this.PoseId = poseId
	this.PreviewImageId = previewImageId
	return &this
}

// NewSetPosePreviewDtoWithDefaults instantiates a new SetPosePreviewDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetPosePreviewDtoWithDefaults() *SetPosePreviewDto {
	this := SetPosePreviewDto{}
	return &this
}

// GetPoseId returns the PoseId field value
func (o *SetPosePreviewDto) GetPoseId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoseId
}

// GetPoseIdOk returns a tuple with the PoseId field value
// and a boolean to check if the value has been set.
func (o *SetPosePreviewDto) GetPoseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoseId, true
}

// SetPoseId sets field value
func (o *SetPosePreviewDto) SetPoseId(v string) {
	o.PoseId = v
}

// GetPreviewImageId returns the PreviewImageId field value
func (o *SetPosePreviewDto) GetPreviewImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviewImageId
}

// GetPreviewImageIdOk returns a tuple with the PreviewImageId field value
// and a boolean to check if the value has been set.
func (o *SetPosePreviewDto) GetPreviewImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviewImageId, true
}

// SetPreviewImageId sets field value
func (o *SetPosePreviewDto) SetPreviewImageId(v string) {
	o.PreviewImageId = v
}

func (o SetPosePreviewDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetPosePreviewDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["poseId"] = o.PoseId
	toSerialize["previewImageId"] = o.PreviewImageId
	return toSerialize, nil
}

func (o *SetPosePreviewDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"poseId",
		"previewImageId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetPosePreviewDto := _SetPosePreviewDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetPosePreviewDto)

	if err != nil {
		return err
	}

	*o = SetPosePreviewDto(varSetPosePreviewDto)

	return err
}

type NullableSetPosePreviewDto struct {
	value *SetPosePreviewDto
	isSet bool
}

func (v NullableSetPosePreviewDto) Get() *SetPosePreviewDto {
	return v.value
}

func (v *NullableSetPosePreviewDto) Set(val *SetPosePreviewDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSetPosePreviewDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSetPosePreviewDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetPosePreviewDto(val *SetPosePreviewDto) *NullableSetPosePreviewDto {
	return &NullableSetPosePreviewDto{value: val, isSet: true}
}

func (v NullableSetPosePreviewDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetPosePreviewDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



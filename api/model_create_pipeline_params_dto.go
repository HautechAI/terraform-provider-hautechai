/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePipelineParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePipelineParamsDto{}

// CreatePipelineParamsDto struct for CreatePipelineParamsDto
type CreatePipelineParamsDto struct {
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Tasks map[string]interface{} `json:"tasks"`
}

type _CreatePipelineParamsDto CreatePipelineParamsDto

// NewCreatePipelineParamsDto instantiates a new CreatePipelineParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePipelineParamsDto(tasks map[string]interface{}) *CreatePipelineParamsDto {
	this := CreatePipelineParamsDto{}
	this.Tasks = tasks
	return &this
}

// NewCreatePipelineParamsDtoWithDefaults instantiates a new CreatePipelineParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePipelineParamsDtoWithDefaults() *CreatePipelineParamsDto {
	this := CreatePipelineParamsDto{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CreatePipelineParamsDto) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePipelineParamsDto) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreatePipelineParamsDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CreatePipelineParamsDto) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetTasks returns the Tasks field value
func (o *CreatePipelineParamsDto) GetTasks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *CreatePipelineParamsDto) GetTasksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *CreatePipelineParamsDto) SetTasks(v map[string]interface{}) {
	o.Tasks = v
}

func (o CreatePipelineParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePipelineParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["tasks"] = o.Tasks
	return toSerialize, nil
}

func (o *CreatePipelineParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePipelineParamsDto := _CreatePipelineParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePipelineParamsDto)

	if err != nil {
		return err
	}

	*o = CreatePipelineParamsDto(varCreatePipelineParamsDto)

	return err
}

type NullableCreatePipelineParamsDto struct {
	value *CreatePipelineParamsDto
	isSet bool
}

func (v NullableCreatePipelineParamsDto) Get() *CreatePipelineParamsDto {
	return v.value
}

func (v *NullableCreatePipelineParamsDto) Set(val *CreatePipelineParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePipelineParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePipelineParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePipelineParamsDto(val *CreatePipelineParamsDto) *NullableCreatePipelineParamsDto {
	return &NullableCreatePipelineParamsDto{value: val, isSet: true}
}

func (v NullableCreatePipelineParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePipelineParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



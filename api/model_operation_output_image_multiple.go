/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OperationOutputImageMultiple type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationOutputImageMultiple{}

// OperationOutputImageMultiple struct for OperationOutputImageMultiple
type OperationOutputImageMultiple struct {
	Kind string `json:"kind"`
	ImageIds []string `json:"imageIds"`
}

type _OperationOutputImageMultiple OperationOutputImageMultiple

// NewOperationOutputImageMultiple instantiates a new OperationOutputImageMultiple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationOutputImageMultiple(kind string, imageIds []string) *OperationOutputImageMultiple {
	this := OperationOutputImageMultiple{}
	this.Kind = kind
	this.ImageIds = imageIds
	return &this
}

// NewOperationOutputImageMultipleWithDefaults instantiates a new OperationOutputImageMultiple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationOutputImageMultipleWithDefaults() *OperationOutputImageMultiple {
	this := OperationOutputImageMultiple{}
	return &this
}

// GetKind returns the Kind field value
func (o *OperationOutputImageMultiple) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *OperationOutputImageMultiple) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *OperationOutputImageMultiple) SetKind(v string) {
	o.Kind = v
}

// GetImageIds returns the ImageIds field value
func (o *OperationOutputImageMultiple) GetImageIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ImageIds
}

// GetImageIdsOk returns a tuple with the ImageIds field value
// and a boolean to check if the value has been set.
func (o *OperationOutputImageMultiple) GetImageIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageIds, true
}

// SetImageIds sets field value
func (o *OperationOutputImageMultiple) SetImageIds(v []string) {
	o.ImageIds = v
}

func (o OperationOutputImageMultiple) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationOutputImageMultiple) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["imageIds"] = o.ImageIds
	return toSerialize, nil
}

func (o *OperationOutputImageMultiple) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"imageIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperationOutputImageMultiple := _OperationOutputImageMultiple{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOperationOutputImageMultiple)

	if err != nil {
		return err
	}

	*o = OperationOutputImageMultiple(varOperationOutputImageMultiple)

	return err
}

type NullableOperationOutputImageMultiple struct {
	value *OperationOutputImageMultiple
	isSet bool
}

func (v NullableOperationOutputImageMultiple) Get() *OperationOutputImageMultiple {
	return v.value
}

func (v *NullableOperationOutputImageMultiple) Set(val *OperationOutputImageMultiple) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationOutputImageMultiple) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationOutputImageMultiple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationOutputImageMultiple(val *OperationOutputImageMultiple) *NullableOperationOutputImageMultiple {
	return &NullableOperationOutputImageMultiple{value: val, isSet: true}
}

func (v NullableOperationOutputImageMultiple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationOutputImageMultiple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ResourceEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceEntity{}

// ResourceEntity struct for ResourceEntity
type ResourceEntity struct {
	Kind string `json:"kind"`
	Id string `json:"id"`
	CreatorId string `json:"creatorId"`
	Metadata map[string]interface{} `json:"metadata"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _ResourceEntity ResourceEntity

// NewResourceEntity instantiates a new ResourceEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceEntity(kind string, id string, creatorId string, metadata map[string]interface{}, createdAt time.Time, updatedAt time.Time) *ResourceEntity {
	this := ResourceEntity{}
	this.Kind = kind
	this.Id = id
	this.CreatorId = creatorId
	this.Metadata = metadata
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewResourceEntityWithDefaults instantiates a new ResourceEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceEntityWithDefaults() *ResourceEntity {
	this := ResourceEntity{}
	return &this
}

// GetKind returns the Kind field value
func (o *ResourceEntity) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ResourceEntity) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ResourceEntity) SetKind(v string) {
	o.Kind = v
}

// GetId returns the Id field value
func (o *ResourceEntity) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceEntity) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceEntity) SetId(v string) {
	o.Id = v
}

// GetCreatorId returns the CreatorId field value
func (o *ResourceEntity) GetCreatorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *ResourceEntity) GetCreatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *ResourceEntity) SetCreatorId(v string) {
	o.CreatorId = v
}

// GetMetadata returns the Metadata field value
func (o *ResourceEntity) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ResourceEntity) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ResourceEntity) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ResourceEntity) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ResourceEntity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ResourceEntity) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ResourceEntity) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ResourceEntity) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ResourceEntity) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ResourceEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["id"] = o.Id
	toSerialize["creatorId"] = o.CreatorId
	toSerialize["metadata"] = o.Metadata
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ResourceEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"id",
		"creatorId",
		"metadata",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceEntity := _ResourceEntity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceEntity)

	if err != nil {
		return err
	}

	*o = ResourceEntity(varResourceEntity)

	return err
}

type NullableResourceEntity struct {
	value *ResourceEntity
	isSet bool
}

func (v NullableResourceEntity) Get() *ResourceEntity {
	return v.value
}

func (v *NullableResourceEntity) Set(val *ResourceEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceEntity(val *ResourceEntity) *NullableResourceEntity {
	return &NullableResourceEntity{value: val, isSet: true}
}

func (v NullableResourceEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NoiseV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoiseV1Input{}

// NoiseV1Input struct for NoiseV1Input
type NoiseV1Input struct {
	ImageId string `json:"imageId"`
	Mean *float32 `json:"mean,omitempty"`
	Sigma *float32 `json:"sigma,omitempty"`
}

type _NoiseV1Input NoiseV1Input

// NewNoiseV1Input instantiates a new NoiseV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoiseV1Input(imageId string) *NoiseV1Input {
	this := NoiseV1Input{}
	this.ImageId = imageId
	return &this
}

// NewNoiseV1InputWithDefaults instantiates a new NoiseV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoiseV1InputWithDefaults() *NoiseV1Input {
	this := NoiseV1Input{}
	return &this
}

// GetImageId returns the ImageId field value
func (o *NoiseV1Input) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *NoiseV1Input) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *NoiseV1Input) SetImageId(v string) {
	o.ImageId = v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *NoiseV1Input) GetMean() float32 {
	if o == nil || IsNil(o.Mean) {
		var ret float32
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoiseV1Input) GetMeanOk() (*float32, bool) {
	if o == nil || IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *NoiseV1Input) HasMean() bool {
	if o != nil && !IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float32 and assigns it to the Mean field.
func (o *NoiseV1Input) SetMean(v float32) {
	o.Mean = &v
}

// GetSigma returns the Sigma field value if set, zero value otherwise.
func (o *NoiseV1Input) GetSigma() float32 {
	if o == nil || IsNil(o.Sigma) {
		var ret float32
		return ret
	}
	return *o.Sigma
}

// GetSigmaOk returns a tuple with the Sigma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoiseV1Input) GetSigmaOk() (*float32, bool) {
	if o == nil || IsNil(o.Sigma) {
		return nil, false
	}
	return o.Sigma, true
}

// HasSigma returns a boolean if a field has been set.
func (o *NoiseV1Input) HasSigma() bool {
	if o != nil && !IsNil(o.Sigma) {
		return true
	}

	return false
}

// SetSigma gets a reference to the given float32 and assigns it to the Sigma field.
func (o *NoiseV1Input) SetSigma(v float32) {
	o.Sigma = &v
}

func (o NoiseV1Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoiseV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageId"] = o.ImageId
	if !IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}
	if !IsNil(o.Sigma) {
		toSerialize["sigma"] = o.Sigma
	}
	return toSerialize, nil
}

func (o *NoiseV1Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoiseV1Input := _NoiseV1Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoiseV1Input)

	if err != nil {
		return err
	}

	*o = NoiseV1Input(varNoiseV1Input)

	return err
}

type NullableNoiseV1Input struct {
	value *NoiseV1Input
	isSet bool
}

func (v NullableNoiseV1Input) Get() *NoiseV1Input {
	return v.value
}

func (v *NullableNoiseV1Input) Set(val *NoiseV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableNoiseV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableNoiseV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoiseV1Input(val *NoiseV1Input) *NullableNoiseV1Input {
	return &NullableNoiseV1Input{value: val, isSet: true}
}

func (v NullableNoiseV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoiseV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



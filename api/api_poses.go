/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PosesAPI interface {

	/*
	PosesControllerGetPoseV1 Method for PosesControllerGetPoseV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPosesControllerGetPoseV1Request
	*/
	PosesControllerGetPoseV1(ctx context.Context, id string) ApiPosesControllerGetPoseV1Request

	// PosesControllerGetPoseV1Execute executes the request
	//  @return PoseEntity
	PosesControllerGetPoseV1Execute(r ApiPosesControllerGetPoseV1Request) (*PoseEntity, *http.Response, error)

	/*
	PosesControllerListPosesV1 Method for PosesControllerListPosesV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPosesControllerListPosesV1Request
	*/
	PosesControllerListPosesV1(ctx context.Context) ApiPosesControllerListPosesV1Request

	// PosesControllerListPosesV1Execute executes the request
	//  @return ListPosesDto
	PosesControllerListPosesV1Execute(r ApiPosesControllerListPosesV1Request) (*ListPosesDto, *http.Response, error)

	/*
	PosesControllerSetPosePreviewV1 Method for PosesControllerSetPosePreviewV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPosesControllerSetPosePreviewV1Request
	*/
	PosesControllerSetPosePreviewV1(ctx context.Context, id string) ApiPosesControllerSetPosePreviewV1Request

	// PosesControllerSetPosePreviewV1Execute executes the request
	PosesControllerSetPosePreviewV1Execute(r ApiPosesControllerSetPosePreviewV1Request) (*http.Response, error)

	/*
	PosesControllerUpdateMetadataV1 Method for PosesControllerUpdateMetadataV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPosesControllerUpdateMetadataV1Request
	*/
	PosesControllerUpdateMetadataV1(ctx context.Context, id string) ApiPosesControllerUpdateMetadataV1Request

	// PosesControllerUpdateMetadataV1Execute executes the request
	//  @return ResourceEntity
	PosesControllerUpdateMetadataV1Execute(r ApiPosesControllerUpdateMetadataV1Request) (*ResourceEntity, *http.Response, error)
}

// PosesAPIService PosesAPI service
type PosesAPIService service

type ApiPosesControllerGetPoseV1Request struct {
	ctx context.Context
	ApiService PosesAPI
	id string
}

func (r ApiPosesControllerGetPoseV1Request) Execute() (*PoseEntity, *http.Response, error) {
	return r.ApiService.PosesControllerGetPoseV1Execute(r)
}

/*
PosesControllerGetPoseV1 Method for PosesControllerGetPoseV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiPosesControllerGetPoseV1Request
*/
func (a *PosesAPIService) PosesControllerGetPoseV1(ctx context.Context, id string) ApiPosesControllerGetPoseV1Request {
	return ApiPosesControllerGetPoseV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PoseEntity
func (a *PosesAPIService) PosesControllerGetPoseV1Execute(r ApiPosesControllerGetPoseV1Request) (*PoseEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PoseEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PosesAPIService.PosesControllerGetPoseV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/poses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPosesControllerListPosesV1Request struct {
	ctx context.Context
	ApiService PosesAPI
	orderBy *string
	limit *float32
	cursor *string
}

func (r ApiPosesControllerListPosesV1Request) OrderBy(orderBy string) ApiPosesControllerListPosesV1Request {
	r.orderBy = &orderBy
	return r
}

func (r ApiPosesControllerListPosesV1Request) Limit(limit float32) ApiPosesControllerListPosesV1Request {
	r.limit = &limit
	return r
}

func (r ApiPosesControllerListPosesV1Request) Cursor(cursor string) ApiPosesControllerListPosesV1Request {
	r.cursor = &cursor
	return r
}

func (r ApiPosesControllerListPosesV1Request) Execute() (*ListPosesDto, *http.Response, error) {
	return r.ApiService.PosesControllerListPosesV1Execute(r)
}

/*
PosesControllerListPosesV1 Method for PosesControllerListPosesV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPosesControllerListPosesV1Request
*/
func (a *PosesAPIService) PosesControllerListPosesV1(ctx context.Context) ApiPosesControllerListPosesV1Request {
	return ApiPosesControllerListPosesV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPosesDto
func (a *PosesAPIService) PosesControllerListPosesV1Execute(r ApiPosesControllerListPosesV1Request) (*ListPosesDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPosesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PosesAPIService.PosesControllerListPosesV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/poses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	} else {
		var defaultValue string = "createdAt_DESC"
		r.orderBy = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 50
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPosesControllerSetPosePreviewV1Request struct {
	ctx context.Context
	ApiService PosesAPI
	id string
	setPosePreviewControllerParamsDto *SetPosePreviewControllerParamsDto
}

func (r ApiPosesControllerSetPosePreviewV1Request) SetPosePreviewControllerParamsDto(setPosePreviewControllerParamsDto SetPosePreviewControllerParamsDto) ApiPosesControllerSetPosePreviewV1Request {
	r.setPosePreviewControllerParamsDto = &setPosePreviewControllerParamsDto
	return r
}

func (r ApiPosesControllerSetPosePreviewV1Request) Execute() (*http.Response, error) {
	return r.ApiService.PosesControllerSetPosePreviewV1Execute(r)
}

/*
PosesControllerSetPosePreviewV1 Method for PosesControllerSetPosePreviewV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiPosesControllerSetPosePreviewV1Request
*/
func (a *PosesAPIService) PosesControllerSetPosePreviewV1(ctx context.Context, id string) ApiPosesControllerSetPosePreviewV1Request {
	return ApiPosesControllerSetPosePreviewV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PosesAPIService) PosesControllerSetPosePreviewV1Execute(r ApiPosesControllerSetPosePreviewV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PosesAPIService.PosesControllerSetPosePreviewV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/poses/{id}/preview"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setPosePreviewControllerParamsDto == nil {
		return nil, reportError("setPosePreviewControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setPosePreviewControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPosesControllerUpdateMetadataV1Request struct {
	ctx context.Context
	ApiService PosesAPI
	id string
	updateMetadataDto *UpdateMetadataDto
}

func (r ApiPosesControllerUpdateMetadataV1Request) UpdateMetadataDto(updateMetadataDto UpdateMetadataDto) ApiPosesControllerUpdateMetadataV1Request {
	r.updateMetadataDto = &updateMetadataDto
	return r
}

func (r ApiPosesControllerUpdateMetadataV1Request) Execute() (*ResourceEntity, *http.Response, error) {
	return r.ApiService.PosesControllerUpdateMetadataV1Execute(r)
}

/*
PosesControllerUpdateMetadataV1 Method for PosesControllerUpdateMetadataV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiPosesControllerUpdateMetadataV1Request
*/
func (a *PosesAPIService) PosesControllerUpdateMetadataV1(ctx context.Context, id string) ApiPosesControllerUpdateMetadataV1Request {
	return ApiPosesControllerUpdateMetadataV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ResourceEntity
func (a *PosesAPIService) PosesControllerUpdateMetadataV1Execute(r ApiPosesControllerUpdateMetadataV1Request) (*ResourceEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PosesAPIService.PosesControllerUpdateMetadataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/poses/{id}/metadata"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateMetadataDto == nil {
		return localVarReturnValue, nil, reportError("updateMetadataDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateMetadataDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GiseleVtonV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GiseleVtonV1Input{}

// GiseleVtonV1Input struct for GiseleVtonV1Input
type GiseleVtonV1Input struct {
	Category string `json:"category"`
	ImageId string `json:"imageId"`
	ProductDescription string `json:"productDescription"`
	ProductImageId string `json:"productImageId"`
	Seed float32 `json:"seed"`
}

type _GiseleVtonV1Input GiseleVtonV1Input

// NewGiseleVtonV1Input instantiates a new GiseleVtonV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiseleVtonV1Input(category string, imageId string, productDescription string, productImageId string, seed float32) *GiseleVtonV1Input {
	this := GiseleVtonV1Input{}
	this.Category = category
	this.ImageId = imageId
	this.ProductDescription = productDescription
	this.ProductImageId = productImageId
	this.Seed = seed
	return &this
}

// NewGiseleVtonV1InputWithDefaults instantiates a new GiseleVtonV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiseleVtonV1InputWithDefaults() *GiseleVtonV1Input {
	this := GiseleVtonV1Input{}
	return &this
}

// GetCategory returns the Category field value
func (o *GiseleVtonV1Input) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *GiseleVtonV1Input) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *GiseleVtonV1Input) SetCategory(v string) {
	o.Category = v
}

// GetImageId returns the ImageId field value
func (o *GiseleVtonV1Input) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *GiseleVtonV1Input) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *GiseleVtonV1Input) SetImageId(v string) {
	o.ImageId = v
}

// GetProductDescription returns the ProductDescription field value
func (o *GiseleVtonV1Input) GetProductDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductDescription
}

// GetProductDescriptionOk returns a tuple with the ProductDescription field value
// and a boolean to check if the value has been set.
func (o *GiseleVtonV1Input) GetProductDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductDescription, true
}

// SetProductDescription sets field value
func (o *GiseleVtonV1Input) SetProductDescription(v string) {
	o.ProductDescription = v
}

// GetProductImageId returns the ProductImageId field value
func (o *GiseleVtonV1Input) GetProductImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductImageId
}

// GetProductImageIdOk returns a tuple with the ProductImageId field value
// and a boolean to check if the value has been set.
func (o *GiseleVtonV1Input) GetProductImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductImageId, true
}

// SetProductImageId sets field value
func (o *GiseleVtonV1Input) SetProductImageId(v string) {
	o.ProductImageId = v
}

// GetSeed returns the Seed field value
func (o *GiseleVtonV1Input) GetSeed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Seed
}

// GetSeedOk returns a tuple with the Seed field value
// and a boolean to check if the value has been set.
func (o *GiseleVtonV1Input) GetSeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seed, true
}

// SetSeed sets field value
func (o *GiseleVtonV1Input) SetSeed(v float32) {
	o.Seed = v
}

func (o GiseleVtonV1Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GiseleVtonV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["imageId"] = o.ImageId
	toSerialize["productDescription"] = o.ProductDescription
	toSerialize["productImageId"] = o.ProductImageId
	toSerialize["seed"] = o.Seed
	return toSerialize, nil
}

func (o *GiseleVtonV1Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"imageId",
		"productDescription",
		"productImageId",
		"seed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGiseleVtonV1Input := _GiseleVtonV1Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGiseleVtonV1Input)

	if err != nil {
		return err
	}

	*o = GiseleVtonV1Input(varGiseleVtonV1Input)

	return err
}

type NullableGiseleVtonV1Input struct {
	value *GiseleVtonV1Input
	isSet bool
}

func (v NullableGiseleVtonV1Input) Get() *GiseleVtonV1Input {
	return v.value
}

func (v *NullableGiseleVtonV1Input) Set(val *GiseleVtonV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableGiseleVtonV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableGiseleVtonV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiseleVtonV1Input(val *GiseleVtonV1Input) *NullableGiseleVtonV1Input {
	return &NullableGiseleVtonV1Input{value: val, isSet: true}
}

func (v NullableGiseleVtonV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiseleVtonV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



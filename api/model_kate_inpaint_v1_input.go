/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KateInpaintV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KateInpaintV1Input{}

// KateInpaintV1Input struct for KateInpaintV1Input
type KateInpaintV1Input struct {
	ImageId string `json:"imageId"`
	MaskImageId *string `json:"maskImageId,omitempty"`
	MaskSpread *float32 `json:"maskSpread,omitempty"`
	Prompt string `json:"prompt"`
	Seed float32 `json:"seed"`
	Strength float32 `json:"strength"`
	Height *float32 `json:"height,omitempty"`
	Width *float32 `json:"width,omitempty"`
	NumInferenceSteps *float32 `json:"numInferenceSteps,omitempty"`
	GuidanceScale *float32 `json:"guidanceScale,omitempty"`
	Branch *string `json:"branch,omitempty"`
}

type _KateInpaintV1Input KateInpaintV1Input

// NewKateInpaintV1Input instantiates a new KateInpaintV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKateInpaintV1Input(imageId string, prompt string, seed float32, strength float32) *KateInpaintV1Input {
	this := KateInpaintV1Input{}
	this.ImageId = imageId
	var maskSpread float32 = 0
	this.MaskSpread = &maskSpread
	this.Prompt = prompt
	this.Seed = seed
	this.Strength = strength
	var numInferenceSteps float32 = 30
	this.NumInferenceSteps = &numInferenceSteps
	var guidanceScale float32 = 7
	this.GuidanceScale = &guidanceScale
	var branch string = "stable"
	this.Branch = &branch
	return &this
}

// NewKateInpaintV1InputWithDefaults instantiates a new KateInpaintV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKateInpaintV1InputWithDefaults() *KateInpaintV1Input {
	this := KateInpaintV1Input{}
	var maskSpread float32 = 0
	this.MaskSpread = &maskSpread
	var numInferenceSteps float32 = 30
	this.NumInferenceSteps = &numInferenceSteps
	var guidanceScale float32 = 7
	this.GuidanceScale = &guidanceScale
	var branch string = "stable"
	this.Branch = &branch
	return &this
}

// GetImageId returns the ImageId field value
func (o *KateInpaintV1Input) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *KateInpaintV1Input) SetImageId(v string) {
	o.ImageId = v
}

// GetMaskImageId returns the MaskImageId field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetMaskImageId() string {
	if o == nil || IsNil(o.MaskImageId) {
		var ret string
		return ret
	}
	return *o.MaskImageId
}

// GetMaskImageIdOk returns a tuple with the MaskImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetMaskImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MaskImageId) {
		return nil, false
	}
	return o.MaskImageId, true
}

// HasMaskImageId returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasMaskImageId() bool {
	if o != nil && !IsNil(o.MaskImageId) {
		return true
	}

	return false
}

// SetMaskImageId gets a reference to the given string and assigns it to the MaskImageId field.
func (o *KateInpaintV1Input) SetMaskImageId(v string) {
	o.MaskImageId = &v
}

// GetMaskSpread returns the MaskSpread field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetMaskSpread() float32 {
	if o == nil || IsNil(o.MaskSpread) {
		var ret float32
		return ret
	}
	return *o.MaskSpread
}

// GetMaskSpreadOk returns a tuple with the MaskSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetMaskSpreadOk() (*float32, bool) {
	if o == nil || IsNil(o.MaskSpread) {
		return nil, false
	}
	return o.MaskSpread, true
}

// HasMaskSpread returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasMaskSpread() bool {
	if o != nil && !IsNil(o.MaskSpread) {
		return true
	}

	return false
}

// SetMaskSpread gets a reference to the given float32 and assigns it to the MaskSpread field.
func (o *KateInpaintV1Input) SetMaskSpread(v float32) {
	o.MaskSpread = &v
}

// GetPrompt returns the Prompt field value
func (o *KateInpaintV1Input) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *KateInpaintV1Input) SetPrompt(v string) {
	o.Prompt = v
}

// GetSeed returns the Seed field value
func (o *KateInpaintV1Input) GetSeed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Seed
}

// GetSeedOk returns a tuple with the Seed field value
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetSeedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seed, true
}

// SetSeed sets field value
func (o *KateInpaintV1Input) SetSeed(v float32) {
	o.Seed = v
}

// GetStrength returns the Strength field value
func (o *KateInpaintV1Input) GetStrength() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Strength
}

// GetStrengthOk returns a tuple with the Strength field value
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetStrengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strength, true
}

// SetStrength sets field value
func (o *KateInpaintV1Input) SetStrength(v float32) {
	o.Strength = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *KateInpaintV1Input) SetHeight(v float32) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *KateInpaintV1Input) SetWidth(v float32) {
	o.Width = &v
}

// GetNumInferenceSteps returns the NumInferenceSteps field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetNumInferenceSteps() float32 {
	if o == nil || IsNil(o.NumInferenceSteps) {
		var ret float32
		return ret
	}
	return *o.NumInferenceSteps
}

// GetNumInferenceStepsOk returns a tuple with the NumInferenceSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetNumInferenceStepsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumInferenceSteps) {
		return nil, false
	}
	return o.NumInferenceSteps, true
}

// HasNumInferenceSteps returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasNumInferenceSteps() bool {
	if o != nil && !IsNil(o.NumInferenceSteps) {
		return true
	}

	return false
}

// SetNumInferenceSteps gets a reference to the given float32 and assigns it to the NumInferenceSteps field.
func (o *KateInpaintV1Input) SetNumInferenceSteps(v float32) {
	o.NumInferenceSteps = &v
}

// GetGuidanceScale returns the GuidanceScale field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetGuidanceScale() float32 {
	if o == nil || IsNil(o.GuidanceScale) {
		var ret float32
		return ret
	}
	return *o.GuidanceScale
}

// GetGuidanceScaleOk returns a tuple with the GuidanceScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetGuidanceScaleOk() (*float32, bool) {
	if o == nil || IsNil(o.GuidanceScale) {
		return nil, false
	}
	return o.GuidanceScale, true
}

// HasGuidanceScale returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasGuidanceScale() bool {
	if o != nil && !IsNil(o.GuidanceScale) {
		return true
	}

	return false
}

// SetGuidanceScale gets a reference to the given float32 and assigns it to the GuidanceScale field.
func (o *KateInpaintV1Input) SetGuidanceScale(v float32) {
	o.GuidanceScale = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *KateInpaintV1Input) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KateInpaintV1Input) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *KateInpaintV1Input) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *KateInpaintV1Input) SetBranch(v string) {
	o.Branch = &v
}

func (o KateInpaintV1Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KateInpaintV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageId"] = o.ImageId
	if !IsNil(o.MaskImageId) {
		toSerialize["maskImageId"] = o.MaskImageId
	}
	if !IsNil(o.MaskSpread) {
		toSerialize["maskSpread"] = o.MaskSpread
	}
	toSerialize["prompt"] = o.Prompt
	toSerialize["seed"] = o.Seed
	toSerialize["strength"] = o.Strength
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.NumInferenceSteps) {
		toSerialize["numInferenceSteps"] = o.NumInferenceSteps
	}
	if !IsNil(o.GuidanceScale) {
		toSerialize["guidanceScale"] = o.GuidanceScale
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	return toSerialize, nil
}

func (o *KateInpaintV1Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageId",
		"prompt",
		"seed",
		"strength",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKateInpaintV1Input := _KateInpaintV1Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKateInpaintV1Input)

	if err != nil {
		return err
	}

	*o = KateInpaintV1Input(varKateInpaintV1Input)

	return err
}

type NullableKateInpaintV1Input struct {
	value *KateInpaintV1Input
	isSet bool
}

func (v NullableKateInpaintV1Input) Get() *KateInpaintV1Input {
	return v.value
}

func (v *NullableKateInpaintV1Input) Set(val *KateInpaintV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableKateInpaintV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableKateInpaintV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKateInpaintV1Input(val *KateInpaintV1Input) *NullableKateInpaintV1Input {
	return &NullableKateInpaintV1Input{value: val, isSet: true}
}

func (v NullableKateInpaintV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKateInpaintV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



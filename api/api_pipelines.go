/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type PipelinesAPI interface {

	/*
	PipelinesControllerCreatePipelineV1 Method for PipelinesControllerCreatePipelineV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPipelinesControllerCreatePipelineV1Request
	*/
	PipelinesControllerCreatePipelineV1(ctx context.Context) ApiPipelinesControllerCreatePipelineV1Request

	// PipelinesControllerCreatePipelineV1Execute executes the request
	//  @return PipelineEntity
	PipelinesControllerCreatePipelineV1Execute(r ApiPipelinesControllerCreatePipelineV1Request) (*PipelineEntity, *http.Response, error)

	/*
	PipelinesControllerGetPipelineV1 Method for PipelinesControllerGetPipelineV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPipelinesControllerGetPipelineV1Request
	*/
	PipelinesControllerGetPipelineV1(ctx context.Context, id string) ApiPipelinesControllerGetPipelineV1Request

	// PipelinesControllerGetPipelineV1Execute executes the request
	//  @return PipelineEntity
	PipelinesControllerGetPipelineV1Execute(r ApiPipelinesControllerGetPipelineV1Request) (*PipelineEntity, *http.Response, error)

	/*
	PipelinesControllerListPipelinesV1 Method for PipelinesControllerListPipelinesV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPipelinesControllerListPipelinesV1Request
	*/
	PipelinesControllerListPipelinesV1(ctx context.Context) ApiPipelinesControllerListPipelinesV1Request

	// PipelinesControllerListPipelinesV1Execute executes the request
	//  @return ListPipelinesDto
	PipelinesControllerListPipelinesV1Execute(r ApiPipelinesControllerListPipelinesV1Request) (*ListPipelinesDto, *http.Response, error)
}

// PipelinesAPIService PipelinesAPI service
type PipelinesAPIService service

type ApiPipelinesControllerCreatePipelineV1Request struct {
	ctx context.Context
	ApiService PipelinesAPI
	createPipelineParamsDto *CreatePipelineParamsDto
}

func (r ApiPipelinesControllerCreatePipelineV1Request) CreatePipelineParamsDto(createPipelineParamsDto CreatePipelineParamsDto) ApiPipelinesControllerCreatePipelineV1Request {
	r.createPipelineParamsDto = &createPipelineParamsDto
	return r
}

func (r ApiPipelinesControllerCreatePipelineV1Request) Execute() (*PipelineEntity, *http.Response, error) {
	return r.ApiService.PipelinesControllerCreatePipelineV1Execute(r)
}

/*
PipelinesControllerCreatePipelineV1 Method for PipelinesControllerCreatePipelineV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPipelinesControllerCreatePipelineV1Request
*/
func (a *PipelinesAPIService) PipelinesControllerCreatePipelineV1(ctx context.Context) ApiPipelinesControllerCreatePipelineV1Request {
	return ApiPipelinesControllerCreatePipelineV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PipelineEntity
func (a *PipelinesAPIService) PipelinesControllerCreatePipelineV1Execute(r ApiPipelinesControllerCreatePipelineV1Request) (*PipelineEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PipelineEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.PipelinesControllerCreatePipelineV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pipelines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createPipelineParamsDto == nil {
		return localVarReturnValue, nil, reportError("createPipelineParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createPipelineParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPipelinesControllerGetPipelineV1Request struct {
	ctx context.Context
	ApiService PipelinesAPI
	id string
}

func (r ApiPipelinesControllerGetPipelineV1Request) Execute() (*PipelineEntity, *http.Response, error) {
	return r.ApiService.PipelinesControllerGetPipelineV1Execute(r)
}

/*
PipelinesControllerGetPipelineV1 Method for PipelinesControllerGetPipelineV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiPipelinesControllerGetPipelineV1Request
*/
func (a *PipelinesAPIService) PipelinesControllerGetPipelineV1(ctx context.Context, id string) ApiPipelinesControllerGetPipelineV1Request {
	return ApiPipelinesControllerGetPipelineV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PipelineEntity
func (a *PipelinesAPIService) PipelinesControllerGetPipelineV1Execute(r ApiPipelinesControllerGetPipelineV1Request) (*PipelineEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PipelineEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.PipelinesControllerGetPipelineV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pipelines/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPipelinesControllerListPipelinesV1Request struct {
	ctx context.Context
	ApiService PipelinesAPI
	orderBy *string
	limit *float32
	cursor *string
}

func (r ApiPipelinesControllerListPipelinesV1Request) OrderBy(orderBy string) ApiPipelinesControllerListPipelinesV1Request {
	r.orderBy = &orderBy
	return r
}

func (r ApiPipelinesControllerListPipelinesV1Request) Limit(limit float32) ApiPipelinesControllerListPipelinesV1Request {
	r.limit = &limit
	return r
}

func (r ApiPipelinesControllerListPipelinesV1Request) Cursor(cursor string) ApiPipelinesControllerListPipelinesV1Request {
	r.cursor = &cursor
	return r
}

func (r ApiPipelinesControllerListPipelinesV1Request) Execute() (*ListPipelinesDto, *http.Response, error) {
	return r.ApiService.PipelinesControllerListPipelinesV1Execute(r)
}

/*
PipelinesControllerListPipelinesV1 Method for PipelinesControllerListPipelinesV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPipelinesControllerListPipelinesV1Request
*/
func (a *PipelinesAPIService) PipelinesControllerListPipelinesV1(ctx context.Context) ApiPipelinesControllerListPipelinesV1Request {
	return ApiPipelinesControllerListPipelinesV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListPipelinesDto
func (a *PipelinesAPIService) PipelinesControllerListPipelinesV1Execute(r ApiPipelinesControllerListPipelinesV1Request) (*ListPipelinesDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListPipelinesDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.PipelinesControllerListPipelinesV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/pipelines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	} else {
		var defaultValue string = "createdAt_DESC"
		r.orderBy = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 50
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AccountsAPI interface {

	/*
	AccountsControllerCreateAccountV1 Method for AccountsControllerCreateAccountV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAccountsControllerCreateAccountV1Request
	*/
	AccountsControllerCreateAccountV1(ctx context.Context) ApiAccountsControllerCreateAccountV1Request

	// AccountsControllerCreateAccountV1Execute executes the request
	//  @return AccountEntity
	AccountsControllerCreateAccountV1Execute(r ApiAccountsControllerCreateAccountV1Request) (*AccountEntity, *http.Response, error)

	/*
	AccountsControllerGetAccountByAliasV1 Method for AccountsControllerGetAccountByAliasV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccountsControllerGetAccountByAliasV1Request
	*/
	AccountsControllerGetAccountByAliasV1(ctx context.Context, id string) ApiAccountsControllerGetAccountByAliasV1Request

	// AccountsControllerGetAccountByAliasV1Execute executes the request
	//  @return AccountEntity
	AccountsControllerGetAccountByAliasV1Execute(r ApiAccountsControllerGetAccountByAliasV1Request) (*AccountEntity, *http.Response, error)

	/*
	AccountsControllerGetAccountV1 Method for AccountsControllerGetAccountV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccountsControllerGetAccountV1Request
	*/
	AccountsControllerGetAccountV1(ctx context.Context, id string) ApiAccountsControllerGetAccountV1Request

	// AccountsControllerGetAccountV1Execute executes the request
	//  @return AccountEntity
	AccountsControllerGetAccountV1Execute(r ApiAccountsControllerGetAccountV1Request) (*AccountEntity, *http.Response, error)

	/*
	AccountsControllerGetSelfV1 Method for AccountsControllerGetSelfV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAccountsControllerGetSelfV1Request
	*/
	AccountsControllerGetSelfV1(ctx context.Context) ApiAccountsControllerGetSelfV1Request

	// AccountsControllerGetSelfV1Execute executes the request
	//  @return AccountEntity
	AccountsControllerGetSelfV1Execute(r ApiAccountsControllerGetSelfV1Request) (*AccountEntity, *http.Response, error)

	/*
	AccountsControllerListAccountsV1 Method for AccountsControllerListAccountsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAccountsControllerListAccountsV1Request
	*/
	AccountsControllerListAccountsV1(ctx context.Context) ApiAccountsControllerListAccountsV1Request

	// AccountsControllerListAccountsV1Execute executes the request
	//  @return ListAccountsDto
	AccountsControllerListAccountsV1Execute(r ApiAccountsControllerListAccountsV1Request) (*ListAccountsDto, *http.Response, error)
}

// AccountsAPIService AccountsAPI service
type AccountsAPIService service

type ApiAccountsControllerCreateAccountV1Request struct {
	ctx context.Context
	ApiService AccountsAPI
	createAccountParamsDto *CreateAccountParamsDto
}

func (r ApiAccountsControllerCreateAccountV1Request) CreateAccountParamsDto(createAccountParamsDto CreateAccountParamsDto) ApiAccountsControllerCreateAccountV1Request {
	r.createAccountParamsDto = &createAccountParamsDto
	return r
}

func (r ApiAccountsControllerCreateAccountV1Request) Execute() (*AccountEntity, *http.Response, error) {
	return r.ApiService.AccountsControllerCreateAccountV1Execute(r)
}

/*
AccountsControllerCreateAccountV1 Method for AccountsControllerCreateAccountV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountsControllerCreateAccountV1Request
*/
func (a *AccountsAPIService) AccountsControllerCreateAccountV1(ctx context.Context) ApiAccountsControllerCreateAccountV1Request {
	return ApiAccountsControllerCreateAccountV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountEntity
func (a *AccountsAPIService) AccountsControllerCreateAccountV1Execute(r ApiAccountsControllerCreateAccountV1Request) (*AccountEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountsControllerCreateAccountV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createAccountParamsDto == nil {
		return localVarReturnValue, nil, reportError("createAccountParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createAccountParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountsControllerGetAccountByAliasV1Request struct {
	ctx context.Context
	ApiService AccountsAPI
	id string
}

func (r ApiAccountsControllerGetAccountByAliasV1Request) Execute() (*AccountEntity, *http.Response, error) {
	return r.ApiService.AccountsControllerGetAccountByAliasV1Execute(r)
}

/*
AccountsControllerGetAccountByAliasV1 Method for AccountsControllerGetAccountByAliasV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccountsControllerGetAccountByAliasV1Request
*/
func (a *AccountsAPIService) AccountsControllerGetAccountByAliasV1(ctx context.Context, id string) ApiAccountsControllerGetAccountByAliasV1Request {
	return ApiAccountsControllerGetAccountByAliasV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AccountEntity
func (a *AccountsAPIService) AccountsControllerGetAccountByAliasV1Execute(r ApiAccountsControllerGetAccountByAliasV1Request) (*AccountEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountsControllerGetAccountByAliasV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/alias/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountsControllerGetAccountV1Request struct {
	ctx context.Context
	ApiService AccountsAPI
	id string
}

func (r ApiAccountsControllerGetAccountV1Request) Execute() (*AccountEntity, *http.Response, error) {
	return r.ApiService.AccountsControllerGetAccountV1Execute(r)
}

/*
AccountsControllerGetAccountV1 Method for AccountsControllerGetAccountV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccountsControllerGetAccountV1Request
*/
func (a *AccountsAPIService) AccountsControllerGetAccountV1(ctx context.Context, id string) ApiAccountsControllerGetAccountV1Request {
	return ApiAccountsControllerGetAccountV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AccountEntity
func (a *AccountsAPIService) AccountsControllerGetAccountV1Execute(r ApiAccountsControllerGetAccountV1Request) (*AccountEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountsControllerGetAccountV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountsControllerGetSelfV1Request struct {
	ctx context.Context
	ApiService AccountsAPI
}

func (r ApiAccountsControllerGetSelfV1Request) Execute() (*AccountEntity, *http.Response, error) {
	return r.ApiService.AccountsControllerGetSelfV1Execute(r)
}

/*
AccountsControllerGetSelfV1 Method for AccountsControllerGetSelfV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountsControllerGetSelfV1Request
*/
func (a *AccountsAPIService) AccountsControllerGetSelfV1(ctx context.Context) ApiAccountsControllerGetSelfV1Request {
	return ApiAccountsControllerGetSelfV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountEntity
func (a *AccountsAPIService) AccountsControllerGetSelfV1Execute(r ApiAccountsControllerGetSelfV1Request) (*AccountEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountsControllerGetSelfV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts/self"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountsControllerListAccountsV1Request struct {
	ctx context.Context
	ApiService AccountsAPI
	orderBy *string
	limit *float32
	cursor *string
}

func (r ApiAccountsControllerListAccountsV1Request) OrderBy(orderBy string) ApiAccountsControllerListAccountsV1Request {
	r.orderBy = &orderBy
	return r
}

func (r ApiAccountsControllerListAccountsV1Request) Limit(limit float32) ApiAccountsControllerListAccountsV1Request {
	r.limit = &limit
	return r
}

func (r ApiAccountsControllerListAccountsV1Request) Cursor(cursor string) ApiAccountsControllerListAccountsV1Request {
	r.cursor = &cursor
	return r
}

func (r ApiAccountsControllerListAccountsV1Request) Execute() (*ListAccountsDto, *http.Response, error) {
	return r.ApiService.AccountsControllerListAccountsV1Execute(r)
}

/*
AccountsControllerListAccountsV1 Method for AccountsControllerListAccountsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountsControllerListAccountsV1Request
*/
func (a *AccountsAPIService) AccountsControllerListAccountsV1(ctx context.Context) ApiAccountsControllerListAccountsV1Request {
	return ApiAccountsControllerListAccountsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAccountsDto
func (a *AccountsAPIService) AccountsControllerListAccountsV1Execute(r ApiAccountsControllerListAccountsV1Request) (*ListAccountsDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAccountsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountsAPIService.AccountsControllerListAccountsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	} else {
		var defaultValue string = "createdAt_DESC"
		r.orderBy = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 50
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

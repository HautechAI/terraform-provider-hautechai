// Package hautechapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package hautechapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for AccountEntityType.
const (
	Root AccountEntityType = "root"
	User AccountEntityType = "user"
)

// Defines values for AddAccountToGroupControllerParamsDtoRole.
const (
	AddAccountToGroupControllerParamsDtoRoleMaintainer AddAccountToGroupControllerParamsDtoRole = "maintainer"
	AddAccountToGroupControllerParamsDtoRoleMember     AddAccountToGroupControllerParamsDtoRole = "member"
	AddAccountToGroupControllerParamsDtoRoleOwner      AddAccountToGroupControllerParamsDtoRole = "owner"
)

// Defines values for AddAccountToGroupParamsDtoRole.
const (
	AddAccountToGroupParamsDtoRoleMaintainer AddAccountToGroupParamsDtoRole = "maintainer"
	AddAccountToGroupParamsDtoRoleMember     AddAccountToGroupParamsDtoRole = "member"
	AddAccountToGroupParamsDtoRoleOwner      AddAccountToGroupParamsDtoRole = "owner"
)

// Defines values for CompositeElementFit.
const (
	Contain CompositeElementFit = "contain"
	Cover   CompositeElementFit = "cover"
	Fill    CompositeElementFit = "fill"
	Inside  CompositeElementFit = "inside"
	Outside CompositeElementFit = "outside"
)

// Defines values for GPTV1InputModel.
const (
	Gpt4o GPTV1InputModel = "gpt-4o"
)

// Defines values for GetImageRepresentationParamsDtoType.
const (
	SamV1 GetImageRepresentationParamsDtoType = "sam.v1"
)

// Defines values for GiseleVtonV1InputCategory.
const (
	Dresses   GiseleVtonV1InputCategory = "dresses"
	LowerBody GiseleVtonV1InputCategory = "lower_body"
	UpperBody GiseleVtonV1InputCategory = "upper_body"
)

// Defines values for GrantAccessControllerParamsPrincipalType.
const (
	GrantAccessControllerParamsPrincipalTypeAccount GrantAccessControllerParamsPrincipalType = "account"
	GrantAccessControllerParamsPrincipalTypeGroup   GrantAccessControllerParamsPrincipalType = "group"
)

// Defines values for ImageEntityKind.
const (
	ImageEntityKindCollection ImageEntityKind = "collection"
	ImageEntityKindForbidden  ImageEntityKind = "forbidden"
	ImageEntityKindImage      ImageEntityKind = "image"
	ImageEntityKindOperation  ImageEntityKind = "operation"
	ImageEntityKindPipeline   ImageEntityKind = "pipeline"
	ImageEntityKindPose       ImageEntityKind = "pose"
	ImageEntityKindStack      ImageEntityKind = "stack"
	ImageEntityKindStorage    ImageEntityKind = "storage"
)

// Defines values for KateImagineV1InputAspectRatio.
const (
	KateImagineV1InputAspectRatioN11   KateImagineV1InputAspectRatio = "1:1"
	KateImagineV1InputAspectRatioN1319 KateImagineV1InputAspectRatio = "13:19"
	KateImagineV1InputAspectRatioN1913 KateImagineV1InputAspectRatio = "19:13"
	KateImagineV1InputAspectRatioN47   KateImagineV1InputAspectRatio = "4:7"
	KateImagineV1InputAspectRatioN74   KateImagineV1InputAspectRatio = "7:4"
	KateImagineV1InputAspectRatioN79   KateImagineV1InputAspectRatio = "7:9"
	KateImagineV1InputAspectRatioN97   KateImagineV1InputAspectRatio = "9:7"
)

// Defines values for KateInpaintV1InputBranch.
const (
	Nightly KateInpaintV1InputBranch = "nightly"
	Stable  KateInpaintV1InputBranch = "stable"
)

// Defines values for LindaHauteV1InputAspectRatio.
const (
	LindaHauteV1InputAspectRatioN11   LindaHauteV1InputAspectRatio = "1:1"
	LindaHauteV1InputAspectRatioN125  LindaHauteV1InputAspectRatio = "12:5"
	LindaHauteV1InputAspectRatioN1319 LindaHauteV1InputAspectRatio = "13:19"
	LindaHauteV1InputAspectRatioN1913 LindaHauteV1InputAspectRatio = "19:13"
	LindaHauteV1InputAspectRatioN47   LindaHauteV1InputAspectRatio = "4:7"
	LindaHauteV1InputAspectRatioN512  LindaHauteV1InputAspectRatio = "5:12"
	LindaHauteV1InputAspectRatioN74   LindaHauteV1InputAspectRatio = "7:4"
	LindaHauteV1InputAspectRatioN79   LindaHauteV1InputAspectRatio = "7:9"
	LindaHauteV1InputAspectRatioN97   LindaHauteV1InputAspectRatio = "9:7"
)

// Defines values for ListAccessControllerGrantsDtoAccess.
const (
	ListAccessControllerGrantsDtoAccessCanAddItems          ListAccessControllerGrantsDtoAccess = "can_add_items"
	ListAccessControllerGrantsDtoAccessCanAssignMaintainers ListAccessControllerGrantsDtoAccess = "can_assign_maintainers"
	ListAccessControllerGrantsDtoAccessCanAssignMembers     ListAccessControllerGrantsDtoAccess = "can_assign_members"
	ListAccessControllerGrantsDtoAccessCanAssignOwners      ListAccessControllerGrantsDtoAccess = "can_assign_owners"
	ListAccessControllerGrantsDtoAccessCanChangeAccess      ListAccessControllerGrantsDtoAccess = "can_change_access"
	ListAccessControllerGrantsDtoAccessCanDelete            ListAccessControllerGrantsDtoAccess = "can_delete"
	ListAccessControllerGrantsDtoAccessCanEdit              ListAccessControllerGrantsDtoAccess = "can_edit"
	ListAccessControllerGrantsDtoAccessCanList              ListAccessControllerGrantsDtoAccess = "can_list"
	ListAccessControllerGrantsDtoAccessCanRemoveItems       ListAccessControllerGrantsDtoAccess = "can_remove_items"
	ListAccessControllerGrantsDtoAccessCanView              ListAccessControllerGrantsDtoAccess = "can_view"
	ListAccessControllerGrantsDtoAccessCanWrite             ListAccessControllerGrantsDtoAccess = "can_write"
	ListAccessControllerGrantsDtoAccessMaintainer           ListAccessControllerGrantsDtoAccess = "maintainer"
	ListAccessControllerGrantsDtoAccessMember               ListAccessControllerGrantsDtoAccess = "member"
	ListAccessControllerGrantsDtoAccessOwner                ListAccessControllerGrantsDtoAccess = "owner"
	ListAccessControllerGrantsDtoAccessParent               ListAccessControllerGrantsDtoAccess = "parent"
	ListAccessControllerGrantsDtoAccessReader               ListAccessControllerGrantsDtoAccess = "reader"
	ListAccessControllerGrantsDtoAccessWriter               ListAccessControllerGrantsDtoAccess = "writer"
)

// Defines values for ListAccountsParamsDtoOrderBy.
const (
	ListAccountsParamsDtoOrderByCreatedAtASC  ListAccountsParamsDtoOrderBy = "createdAt_ASC"
	ListAccountsParamsDtoOrderByCreatedAtDESC ListAccountsParamsDtoOrderBy = "createdAt_DESC"
)

// Defines values for ListCollectionItemsParamsDtoKind.
const (
	ListCollectionItemsParamsDtoKindCollection ListCollectionItemsParamsDtoKind = "collection"
	ListCollectionItemsParamsDtoKindForbidden  ListCollectionItemsParamsDtoKind = "forbidden"
	ListCollectionItemsParamsDtoKindImage      ListCollectionItemsParamsDtoKind = "image"
	ListCollectionItemsParamsDtoKindOperation  ListCollectionItemsParamsDtoKind = "operation"
	ListCollectionItemsParamsDtoKindPipeline   ListCollectionItemsParamsDtoKind = "pipeline"
	ListCollectionItemsParamsDtoKindPose       ListCollectionItemsParamsDtoKind = "pose"
	ListCollectionItemsParamsDtoKindStack      ListCollectionItemsParamsDtoKind = "stack"
	ListCollectionItemsParamsDtoKindStorage    ListCollectionItemsParamsDtoKind = "storage"
)

// Defines values for ListCollectionItemsParamsDtoOrderBy.
const (
	ListCollectionItemsParamsDtoOrderByCreatedAtASC  ListCollectionItemsParamsDtoOrderBy = "createdAt_ASC"
	ListCollectionItemsParamsDtoOrderByCreatedAtDESC ListCollectionItemsParamsDtoOrderBy = "createdAt_DESC"
	ListCollectionItemsParamsDtoOrderByUpdatedAtASC  ListCollectionItemsParamsDtoOrderBy = "updatedAt_ASC"
	ListCollectionItemsParamsDtoOrderByUpdatedAtDESC ListCollectionItemsParamsDtoOrderBy = "updatedAt_DESC"
)

// Defines values for ListCollectionsParamsDtoOrderBy.
const (
	ListCollectionsParamsDtoOrderByCreatedAtASC  ListCollectionsParamsDtoOrderBy = "createdAt_ASC"
	ListCollectionsParamsDtoOrderByCreatedAtDESC ListCollectionsParamsDtoOrderBy = "createdAt_DESC"
	ListCollectionsParamsDtoOrderByUpdatedAtASC  ListCollectionsParamsDtoOrderBy = "updatedAt_ASC"
	ListCollectionsParamsDtoOrderByUpdatedAtDESC ListCollectionsParamsDtoOrderBy = "updatedAt_DESC"
)

// Defines values for ListOperationsParamsDtoOrderBy.
const (
	ListOperationsParamsDtoOrderByCreatedAtASC  ListOperationsParamsDtoOrderBy = "createdAt_ASC"
	ListOperationsParamsDtoOrderByCreatedAtDESC ListOperationsParamsDtoOrderBy = "createdAt_DESC"
	ListOperationsParamsDtoOrderByUpdatedAtASC  ListOperationsParamsDtoOrderBy = "updatedAt_ASC"
	ListOperationsParamsDtoOrderByUpdatedAtDESC ListOperationsParamsDtoOrderBy = "updatedAt_DESC"
)

// Defines values for ListPosesParamsDtoOrderBy.
const (
	ListPosesParamsDtoOrderByCreatedAtASC  ListPosesParamsDtoOrderBy = "createdAt_ASC"
	ListPosesParamsDtoOrderByCreatedAtDESC ListPosesParamsDtoOrderBy = "createdAt_DESC"
)

// Defines values for ListStacksParamsDtoOrderBy.
const (
	ListStacksParamsDtoOrderByCreatedAtASC  ListStacksParamsDtoOrderBy = "createdAt_ASC"
	ListStacksParamsDtoOrderByCreatedAtDESC ListStacksParamsDtoOrderBy = "createdAt_DESC"
	ListStacksParamsDtoOrderByUpdatedAtASC  ListStacksParamsDtoOrderBy = "updatedAt_ASC"
	ListStacksParamsDtoOrderByUpdatedAtDESC ListStacksParamsDtoOrderBy = "updatedAt_DESC"
)

// Defines values for ModifyAccessParamsDtoPrincipalType.
const (
	ModifyAccessParamsDtoPrincipalTypeAccount ModifyAccessParamsDtoPrincipalType = "account"
	ModifyAccessParamsDtoPrincipalTypeGroup   ModifyAccessParamsDtoPrincipalType = "group"
)

// Defines values for NaomiHauteV1InputMode.
const (
	ApparelToModel NaomiHauteV1InputMode = "apparel_to_model"
	ModelToModel   NaomiHauteV1InputMode = "model_to_model"
)

// Defines values for OperationEntityKind.
const (
	OperationEntityKindOperation OperationEntityKind = "operation"
)

// Defines values for OperationEntityStatus.
const (
	OperationEntityStatusFailed   OperationEntityStatus = "failed"
	OperationEntityStatusFinished OperationEntityStatus = "finished"
	OperationEntityStatusPending  OperationEntityStatus = "pending"
)

// Defines values for OperationOutputImageMultipleKind.
const (
	Imagemultiple OperationOutputImageMultipleKind = "image/multiple"
)

// Defines values for OperationOutputImageSingleKind.
const (
	Imagesingle OperationOutputImageSingleKind = "image/single"
)

// Defines values for OperationOutputJSONKind.
const (
	Json OperationOutputJSONKind = "json"
)

// Defines values for PipelineEntityKind.
const (
	PipelineEntityKindPipeline PipelineEntityKind = "pipeline"
)

// Defines values for PipelineEntityStatus.
const (
	PipelineEntityStatusCompleted PipelineEntityStatus = "completed"
	PipelineEntityStatusFailed    PipelineEntityStatus = "failed"
	PipelineEntityStatusPending   PipelineEntityStatus = "pending"
)

// Defines values for PoseEntityKind.
const (
	Pose PoseEntityKind = "pose"
)

// Defines values for RemoveAccountFromGroupControllerParamsDtoRole.
const (
	RemoveAccountFromGroupControllerParamsDtoRoleMaintainer RemoveAccountFromGroupControllerParamsDtoRole = "maintainer"
	RemoveAccountFromGroupControllerParamsDtoRoleMember     RemoveAccountFromGroupControllerParamsDtoRole = "member"
	RemoveAccountFromGroupControllerParamsDtoRoleOwner      RemoveAccountFromGroupControllerParamsDtoRole = "owner"
)

// Defines values for RemoveAccountFromGroupParamsDtoRole.
const (
	Maintainer RemoveAccountFromGroupParamsDtoRole = "maintainer"
	Member     RemoveAccountFromGroupParamsDtoRole = "member"
	Owner      RemoveAccountFromGroupParamsDtoRole = "owner"
)

// Defines values for ResourceEntityKind.
const (
	ResourceEntityKindCollection ResourceEntityKind = "collection"
	ResourceEntityKindForbidden  ResourceEntityKind = "forbidden"
	ResourceEntityKindImage      ResourceEntityKind = "image"
	ResourceEntityKindOperation  ResourceEntityKind = "operation"
	ResourceEntityKindPipeline   ResourceEntityKind = "pipeline"
	ResourceEntityKindPose       ResourceEntityKind = "pose"
	ResourceEntityKindStack      ResourceEntityKind = "stack"
	ResourceEntityKindStorage    ResourceEntityKind = "storage"
)

// Defines values for RevokeAccessControllerParamsDtoPrincipalType.
const (
	Account RevokeAccessControllerParamsDtoPrincipalType = "account"
	Group   RevokeAccessControllerParamsDtoPrincipalType = "group"
)

// Defines values for StackEntityKind.
const (
	Stack StackEntityKind = "stack"
)

// Defines values for StorageEntityKind.
const (
	Storage StorageEntityKind = "storage"
)

// Defines values for CompositeV1ResponseKind.
const (
	CompositeV1ResponseKindOperation CompositeV1ResponseKind = "operation"
)

// Defines values for CompositeV1ResponseStatus.
const (
	CompositeV1ResponseStatusFailed   CompositeV1ResponseStatus = "failed"
	CompositeV1ResponseStatusFinished CompositeV1ResponseStatus = "finished"
	CompositeV1ResponseStatusPending  CompositeV1ResponseStatus = "pending"
)

// Defines values for CropV1ResponseKind.
const (
	CropV1ResponseKindOperation CropV1ResponseKind = "operation"
)

// Defines values for CropV1ResponseStatus.
const (
	CropV1ResponseStatusFailed   CropV1ResponseStatus = "failed"
	CropV1ResponseStatusFinished CropV1ResponseStatus = "finished"
	CropV1ResponseStatusPending  CropV1ResponseStatus = "pending"
)

// Defines values for CutV1ResponseKind.
const (
	CutV1ResponseKindOperation CutV1ResponseKind = "operation"
)

// Defines values for CutV1ResponseStatus.
const (
	CutV1ResponseStatusFailed   CutV1ResponseStatus = "failed"
	CutV1ResponseStatusFinished CutV1ResponseStatus = "finished"
	CutV1ResponseStatusPending  CutV1ResponseStatus = "pending"
)

// Defines values for GptV1ResponseKind.
const (
	GptV1ResponseKindOperation GptV1ResponseKind = "operation"
)

// Defines values for GptV1ResponseStatus.
const (
	GptV1ResponseStatusFailed   GptV1ResponseStatus = "failed"
	GptV1ResponseStatusFinished GptV1ResponseStatus = "finished"
	GptV1ResponseStatusPending  GptV1ResponseStatus = "pending"
)

// Defines values for HauteLindaV1ResponseKind.
const (
	HauteLindaV1ResponseKindOperation HauteLindaV1ResponseKind = "operation"
)

// Defines values for HauteLindaV1ResponseStatus.
const (
	HauteLindaV1ResponseStatusFailed   HauteLindaV1ResponseStatus = "failed"
	HauteLindaV1ResponseStatusFinished HauteLindaV1ResponseStatus = "finished"
	HauteLindaV1ResponseStatusPending  HauteLindaV1ResponseStatus = "pending"
)

// Defines values for HauteNaomiV1ResponseKind.
const (
	HauteNaomiV1ResponseKindOperation HauteNaomiV1ResponseKind = "operation"
)

// Defines values for HauteNaomiV1ResponseStatus.
const (
	HauteNaomiV1ResponseStatusFailed   HauteNaomiV1ResponseStatus = "failed"
	HauteNaomiV1ResponseStatusFinished HauteNaomiV1ResponseStatus = "finished"
	HauteNaomiV1ResponseStatusPending  HauteNaomiV1ResponseStatus = "pending"
)

// Defines values for ImagineKateV1ResponseKind.
const (
	ImagineKateV1ResponseKindOperation ImagineKateV1ResponseKind = "operation"
)

// Defines values for ImagineKateV1ResponseStatus.
const (
	ImagineKateV1ResponseStatusFailed   ImagineKateV1ResponseStatus = "failed"
	ImagineKateV1ResponseStatusFinished ImagineKateV1ResponseStatus = "finished"
	ImagineKateV1ResponseStatusPending  ImagineKateV1ResponseStatus = "pending"
)

// Defines values for InpaintKateV1ResponseKind.
const (
	InpaintKateV1ResponseKindOperation InpaintKateV1ResponseKind = "operation"
)

// Defines values for InpaintKateV1ResponseStatus.
const (
	InpaintKateV1ResponseStatusFailed   InpaintKateV1ResponseStatus = "failed"
	InpaintKateV1ResponseStatusFinished InpaintKateV1ResponseStatus = "finished"
	InpaintKateV1ResponseStatusPending  InpaintKateV1ResponseStatus = "pending"
)

// Defines values for NegateImageV1ResponseKind.
const (
	NegateImageV1ResponseKindOperation NegateImageV1ResponseKind = "operation"
)

// Defines values for NegateImageV1ResponseStatus.
const (
	NegateImageV1ResponseStatusFailed   NegateImageV1ResponseStatus = "failed"
	NegateImageV1ResponseStatusFinished NegateImageV1ResponseStatus = "finished"
	NegateImageV1ResponseStatusPending  NegateImageV1ResponseStatus = "pending"
)

// Defines values for NoiseV1ResponseKind.
const (
	NoiseV1ResponseKindOperation NoiseV1ResponseKind = "operation"
)

// Defines values for NoiseV1ResponseStatus.
const (
	NoiseV1ResponseStatusFailed   NoiseV1ResponseStatus = "failed"
	NoiseV1ResponseStatusFinished NoiseV1ResponseStatus = "finished"
	NoiseV1ResponseStatusPending  NoiseV1ResponseStatus = "pending"
)

// Defines values for ObjectDetectionV1ResponseKind.
const (
	ObjectDetectionV1ResponseKindOperation ObjectDetectionV1ResponseKind = "operation"
)

// Defines values for ObjectDetectionV1ResponseStatus.
const (
	ObjectDetectionV1ResponseStatusFailed   ObjectDetectionV1ResponseStatus = "failed"
	ObjectDetectionV1ResponseStatusFinished ObjectDetectionV1ResponseStatus = "finished"
	ObjectDetectionV1ResponseStatusPending  ObjectDetectionV1ResponseStatus = "pending"
)

// Defines values for PoseEstimationV1ResponseKind.
const (
	PoseEstimationV1ResponseKindOperation PoseEstimationV1ResponseKind = "operation"
)

// Defines values for PoseEstimationV1ResponseStatus.
const (
	PoseEstimationV1ResponseStatusFailed   PoseEstimationV1ResponseStatus = "failed"
	PoseEstimationV1ResponseStatusFinished PoseEstimationV1ResponseStatus = "finished"
	PoseEstimationV1ResponseStatusPending  PoseEstimationV1ResponseStatus = "pending"
)

// Defines values for SegmentAnythingEmbeddingsV1ResponseKind.
const (
	SegmentAnythingEmbeddingsV1ResponseKindOperation SegmentAnythingEmbeddingsV1ResponseKind = "operation"
)

// Defines values for SegmentAnythingEmbeddingsV1ResponseStatus.
const (
	SegmentAnythingEmbeddingsV1ResponseStatusFailed   SegmentAnythingEmbeddingsV1ResponseStatus = "failed"
	SegmentAnythingEmbeddingsV1ResponseStatusFinished SegmentAnythingEmbeddingsV1ResponseStatus = "finished"
	SegmentAnythingEmbeddingsV1ResponseStatusPending  SegmentAnythingEmbeddingsV1ResponseStatus = "pending"
)

// Defines values for SegmentAnythingMaskV1ResponseKind.
const (
	SegmentAnythingMaskV1ResponseKindOperation SegmentAnythingMaskV1ResponseKind = "operation"
)

// Defines values for SegmentAnythingMaskV1ResponseStatus.
const (
	SegmentAnythingMaskV1ResponseStatusFailed   SegmentAnythingMaskV1ResponseStatus = "failed"
	SegmentAnythingMaskV1ResponseStatusFinished SegmentAnythingMaskV1ResponseStatus = "finished"
	SegmentAnythingMaskV1ResponseStatusPending  SegmentAnythingMaskV1ResponseStatus = "pending"
)

// Defines values for UpscaleV1ResponseKind.
const (
	UpscaleV1ResponseKindOperation UpscaleV1ResponseKind = "operation"
)

// Defines values for UpscaleV1ResponseStatus.
const (
	UpscaleV1ResponseStatusFailed   UpscaleV1ResponseStatus = "failed"
	UpscaleV1ResponseStatusFinished UpscaleV1ResponseStatus = "finished"
	UpscaleV1ResponseStatusPending  UpscaleV1ResponseStatus = "pending"
)

// Defines values for VtonGiseleV1ResponseKind.
const (
	VtonGiseleV1ResponseKindOperation VtonGiseleV1ResponseKind = "operation"
)

// Defines values for VtonGiseleV1ResponseStatus.
const (
	VtonGiseleV1ResponseStatusFailed   VtonGiseleV1ResponseStatus = "failed"
	VtonGiseleV1ResponseStatusFinished VtonGiseleV1ResponseStatus = "finished"
	VtonGiseleV1ResponseStatusPending  VtonGiseleV1ResponseStatus = "pending"
)

// Defines values for AccountsControllerListAccountsV1ParamsOrderBy.
const (
	AccountsControllerListAccountsV1ParamsOrderByCreatedAtASC  AccountsControllerListAccountsV1ParamsOrderBy = "createdAt_ASC"
	AccountsControllerListAccountsV1ParamsOrderByCreatedAtDESC AccountsControllerListAccountsV1ParamsOrderBy = "createdAt_DESC"
)

// Defines values for CollectionsControllerListCollectionsV1ParamsOrderBy.
const (
	CollectionsControllerListCollectionsV1ParamsOrderByCreatedAtASC  CollectionsControllerListCollectionsV1ParamsOrderBy = "createdAt_ASC"
	CollectionsControllerListCollectionsV1ParamsOrderByCreatedAtDESC CollectionsControllerListCollectionsV1ParamsOrderBy = "createdAt_DESC"
	CollectionsControllerListCollectionsV1ParamsOrderByUpdatedAtASC  CollectionsControllerListCollectionsV1ParamsOrderBy = "updatedAt_ASC"
	CollectionsControllerListCollectionsV1ParamsOrderByUpdatedAtDESC CollectionsControllerListCollectionsV1ParamsOrderBy = "updatedAt_DESC"
)

// Defines values for CollectionsControllerListItemsV1ParamsOrderBy.
const (
	CollectionsControllerListItemsV1ParamsOrderByCreatedAtASC  CollectionsControllerListItemsV1ParamsOrderBy = "createdAt_ASC"
	CollectionsControllerListItemsV1ParamsOrderByCreatedAtDESC CollectionsControllerListItemsV1ParamsOrderBy = "createdAt_DESC"
	CollectionsControllerListItemsV1ParamsOrderByUpdatedAtASC  CollectionsControllerListItemsV1ParamsOrderBy = "updatedAt_ASC"
	CollectionsControllerListItemsV1ParamsOrderByUpdatedAtDESC CollectionsControllerListItemsV1ParamsOrderBy = "updatedAt_DESC"
)

// Defines values for CollectionsControllerListItemsV1ParamsKind.
const (
	CollectionsControllerListItemsV1ParamsKindCollection CollectionsControllerListItemsV1ParamsKind = "collection"
	CollectionsControllerListItemsV1ParamsKindForbidden  CollectionsControllerListItemsV1ParamsKind = "forbidden"
	CollectionsControllerListItemsV1ParamsKindImage      CollectionsControllerListItemsV1ParamsKind = "image"
	CollectionsControllerListItemsV1ParamsKindOperation  CollectionsControllerListItemsV1ParamsKind = "operation"
	CollectionsControllerListItemsV1ParamsKindPipeline   CollectionsControllerListItemsV1ParamsKind = "pipeline"
	CollectionsControllerListItemsV1ParamsKindPose       CollectionsControllerListItemsV1ParamsKind = "pose"
	CollectionsControllerListItemsV1ParamsKindStack      CollectionsControllerListItemsV1ParamsKind = "stack"
	CollectionsControllerListItemsV1ParamsKindStorage    CollectionsControllerListItemsV1ParamsKind = "storage"
)

// Defines values for OperationsControllerListOperationsV1ParamsOrderBy.
const (
	OperationsControllerListOperationsV1ParamsOrderByCreatedAtASC  OperationsControllerListOperationsV1ParamsOrderBy = "createdAt_ASC"
	OperationsControllerListOperationsV1ParamsOrderByCreatedAtDESC OperationsControllerListOperationsV1ParamsOrderBy = "createdAt_DESC"
	OperationsControllerListOperationsV1ParamsOrderByUpdatedAtASC  OperationsControllerListOperationsV1ParamsOrderBy = "updatedAt_ASC"
	OperationsControllerListOperationsV1ParamsOrderByUpdatedAtDESC OperationsControllerListOperationsV1ParamsOrderBy = "updatedAt_DESC"
)

// Defines values for PipelinesControllerListPipelinesV1ParamsOrderBy.
const (
	PipelinesControllerListPipelinesV1ParamsOrderByCreatedAtASC  PipelinesControllerListPipelinesV1ParamsOrderBy = "createdAt_ASC"
	PipelinesControllerListPipelinesV1ParamsOrderByCreatedAtDESC PipelinesControllerListPipelinesV1ParamsOrderBy = "createdAt_DESC"
)

// Defines values for PosesControllerListPosesV1ParamsOrderBy.
const (
	PosesControllerListPosesV1ParamsOrderByCreatedAtASC  PosesControllerListPosesV1ParamsOrderBy = "createdAt_ASC"
	PosesControllerListPosesV1ParamsOrderByCreatedAtDESC PosesControllerListPosesV1ParamsOrderBy = "createdAt_DESC"
)

// Defines values for StacksControllerListStacksV1ParamsOrderBy.
const (
	CreatedAtASC  StacksControllerListStacksV1ParamsOrderBy = "createdAt_ASC"
	CreatedAtDESC StacksControllerListStacksV1ParamsOrderBy = "createdAt_DESC"
	UpdatedAtASC  StacksControllerListStacksV1ParamsOrderBy = "updatedAt_ASC"
	UpdatedAtDESC StacksControllerListStacksV1ParamsOrderBy = "updatedAt_DESC"
)

// AccountEntity defines model for AccountEntity.
type AccountEntity struct {
	Id   string            `json:"id"`
	Type AccountEntityType `json:"type"`
}

// AccountEntityType defines model for AccountEntity.Type.
type AccountEntityType string

// AddAccountToGroupControllerParamsDto defines model for AddAccountToGroupControllerParamsDto.
type AddAccountToGroupControllerParamsDto struct {
	AccountId string                                   `json:"accountId"`
	Role      AddAccountToGroupControllerParamsDtoRole `json:"role"`
}

// AddAccountToGroupControllerParamsDtoRole defines model for AddAccountToGroupControllerParamsDto.Role.
type AddAccountToGroupControllerParamsDtoRole string

// AddAccountToGroupParamsDto defines model for AddAccountToGroupParamsDto.
type AddAccountToGroupParamsDto struct {
	AccountId string                         `json:"accountId"`
	GroupId   string                         `json:"groupId"`
	Role      AddAccountToGroupParamsDtoRole `json:"role"`
}

// AddAccountToGroupParamsDtoRole defines model for AddAccountToGroupParamsDto.Role.
type AddAccountToGroupParamsDtoRole string

// AddBalanceControllerParamsDto defines model for AddBalanceControllerParamsDto.
type AddBalanceControllerParamsDto struct {
	Amount string `json:"amount"`
}

// AddBalanceParamsDto defines model for AddBalanceParamsDto.
type AddBalanceParamsDto struct {
	AccountId string `json:"accountId"`
	Amount    string `json:"amount"`
}

// AddItemsToCollectionControllerParamsDto defines model for AddItemsToCollectionControllerParamsDto.
type AddItemsToCollectionControllerParamsDto struct {
	ItemIds []string `json:"itemIds"`
}

// AddItemsToCollectionParamsDto defines model for AddItemsToCollectionParamsDto.
type AddItemsToCollectionParamsDto struct {
	CollectionId string   `json:"collectionId"`
	ItemIds      []string `json:"itemIds"`
}

// AddItemsToStackControllerParamsDto defines model for AddItemsToStackControllerParamsDto.
type AddItemsToStackControllerParamsDto struct {
	ItemIds []string `json:"itemIds"`
}

// AddItemsToStackParamsDto defines model for AddItemsToStackParamsDto.
type AddItemsToStackParamsDto struct {
	ItemIds []string `json:"itemIds"`
	StackId string   `json:"stackId"`
}

// AttachAccessControllerParamsDto defines model for AttachAccessControllerParamsDto.
type AttachAccessControllerParamsDto struct {
	ParentResourceId string `json:"parentResourceId"`
}

// AttachAccessParamsDto defines model for AttachAccessParamsDto.
type AttachAccessParamsDto struct {
	ParentResourceId string `json:"parentResourceId"`
	ResourceId       string `json:"resourceId"`
}

// BalanceResultDto defines model for BalanceResultDto.
type BalanceResultDto struct {
	Balance string `json:"balance"`
}

// CollectionEntity defines model for CollectionEntity.
type CollectionEntity struct {
	CreatedAt time.Time              `json:"createdAt"`
	CreatorId string                 `json:"creatorId"`
	Id        string                 `json:"id"`
	Kind      float32                `json:"kind"`
	Metadata  map[string]interface{} `json:"metadata"`
	UpdatedAt time.Time              `json:"updatedAt"`
}

// CompositeElement defines model for CompositeElement.
type CompositeElement struct {
	Fit     CompositeElementFit `json:"fit"`
	Height  float32             `json:"height"`
	ImageId string              `json:"imageId"`
	Left    float32             `json:"left"`
	Top     float32             `json:"top"`
	Width   float32             `json:"width"`
}

// CompositeElementFit defines model for CompositeElement.Fit.
type CompositeElementFit string

// CompositeV1Input defines model for CompositeV1Input.
type CompositeV1Input struct {
	Background string             `json:"background"`
	Elements   []CompositeElement `json:"elements"`
	Height     float32            `json:"height"`
	Width      float32            `json:"width"`
}

// CreateAccountParamsDto defines model for CreateAccountParamsDto.
type CreateAccountParamsDto struct {
	Alias *string `json:"alias,omitempty"`
}

// CreateCollectionParamsDto defines model for CreateCollectionParamsDto.
type CreateCollectionParamsDto struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// CreateImageParamsDto defines model for CreateImageParamsDto.
type CreateImageParamsDto struct {
	FileToken *string `json:"fileToken,omitempty"`
}

// CreatePipelineParamsDto defines model for CreatePipelineParamsDto.
type CreatePipelineParamsDto struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Tasks    map[string]interface{}  `json:"tasks"`
}

// CreateStackParamsDto defines model for CreateStackParamsDto.
type CreateStackParamsDto struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// CreateStorageRecordParamsDto defines model for CreateStorageRecordParamsDto.
type CreateStorageRecordParamsDto struct {
	Key   string                 `json:"key"`
	Value map[string]interface{} `json:"value"`
}

// CropV1Input defines model for CropV1Input.
type CropV1Input struct {
	Height  float32 `json:"height"`
	ImageId string  `json:"imageId"`
	Left    float32 `json:"left"`
	Top     float32 `json:"top"`
	Width   float32 `json:"width"`
}

// CutV1Input defines model for CutV1Input.
type CutV1Input struct {
	ImageId     string `json:"imageId"`
	MaskImageId string `json:"maskImageId"`
}

// DeleteParamsDto defines model for DeleteParamsDto.
type DeleteParamsDto struct {
	Id string `json:"id"`
}

// DeleteStorageParamsDto defines model for DeleteStorageParamsDto.
type DeleteStorageParamsDto struct {
	Key string `json:"key"`
}

// DetachAccessControllerParamsDto defines model for DetachAccessControllerParamsDto.
type DetachAccessControllerParamsDto struct {
	ParentResourceId string `json:"parentResourceId"`
}

// GPTV1Input defines model for GPTV1Input.
type GPTV1Input struct {
	ImageId *string          `json:"imageId,omitempty"`
	Model   *GPTV1InputModel `json:"model,omitempty"`
	Prompt  string           `json:"prompt"`
}

// GPTV1InputModel defines model for GPTV1Input.Model.
type GPTV1InputModel string

// GetAccountParamsDto defines model for GetAccountParamsDto.
type GetAccountParamsDto struct {
	Alias *string `json:"alias,omitempty"`
	Id    *string `json:"id,omitempty"`
}

// GetBalanceParamsDto defines model for GetBalanceParamsDto.
type GetBalanceParamsDto struct {
	AccountId string `json:"accountId"`
}

// GetCollectionParamsDto defines model for GetCollectionParamsDto.
type GetCollectionParamsDto struct {
	CollectionId string `json:"collectionId"`
}

// GetGroupParamsDto defines model for GetGroupParamsDto.
type GetGroupParamsDto struct {
	Id string `json:"id"`
}

// GetImageParamsDto defines model for GetImageParamsDto.
type GetImageParamsDto struct {
	Id string `json:"id"`
}

// GetImageRepresentationParamsDto defines model for GetImageRepresentationParamsDto.
type GetImageRepresentationParamsDto struct {
	ImageId string                              `json:"imageId"`
	Type    GetImageRepresentationParamsDtoType `json:"type"`
}

// GetImageRepresentationParamsDtoType defines model for GetImageRepresentationParamsDto.Type.
type GetImageRepresentationParamsDtoType string

// GetOperationParamsDto defines model for GetOperationParamsDto.
type GetOperationParamsDto struct {
	Id string `json:"id"`
}

// GetOperationsParamsDto defines model for GetOperationsParamsDto.
type GetOperationsParamsDto struct {
	Ids []string `json:"ids"`
}

// GetPoseParamsDto defines model for GetPoseParamsDto.
type GetPoseParamsDto struct {
	Id string `json:"id"`
}

// GetStackParamsDto defines model for GetStackParamsDto.
type GetStackParamsDto struct {
	Id string `json:"id"`
}

// GetStorageRecordParamsDto defines model for GetStorageRecordParamsDto.
type GetStorageRecordParamsDto struct {
	Keys []string `json:"keys"`
}

// GetUrlsForImagesParamsDto defines model for GetUrlsForImagesParamsDto.
type GetUrlsForImagesParamsDto struct {
	Ids []string `json:"ids"`
}

// GiseleVtonV1Input defines model for GiseleVtonV1Input.
type GiseleVtonV1Input struct {
	Category           GiseleVtonV1InputCategory `json:"category"`
	ImageId            string                    `json:"imageId"`
	ProductDescription string                    `json:"productDescription"`
	ProductImageId     string                    `json:"productImageId"`
	Seed               float32                   `json:"seed"`
}

// GiseleVtonV1InputCategory defines model for GiseleVtonV1Input.Category.
type GiseleVtonV1InputCategory string

// GrantAccessControllerParams defines model for GrantAccessControllerParams.
type GrantAccessControllerParams struct {
	Access        string                                   `json:"access"`
	PrincipalId   string                                   `json:"principalId"`
	PrincipalType GrantAccessControllerParamsPrincipalType `json:"principalType"`
}

// GrantAccessControllerParamsPrincipalType defines model for GrantAccessControllerParams.PrincipalType.
type GrantAccessControllerParamsPrincipalType string

// GroupEntity defines model for GroupEntity.
type GroupEntity struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        string    `json:"id"`
}

// ImageEntity defines model for ImageEntity.
type ImageEntity struct {
	CreatedAt time.Time              `json:"createdAt"`
	CreatorId string                 `json:"creatorId"`
	Format    string                 `json:"format"`
	Height    float32                `json:"height"`
	Id        string                 `json:"id"`
	Kind      ImageEntityKind        `json:"kind"`
	Metadata  map[string]interface{} `json:"metadata"`
	UpdatedAt time.Time              `json:"updatedAt"`
	Url       string                 `json:"url"`
	Width     float32                `json:"width"`
}

// ImageEntityKind defines model for ImageEntity.Kind.
type ImageEntityKind string

// ImageRepresentationResponseDto defines model for ImageRepresentationResponseDto.
type ImageRepresentationResponseDto struct {
	ImageId string `json:"imageId"`
	Type    string `json:"type"`
	Url     string `json:"url"`
}

// ImageUrlResponseDto defines model for ImageUrlResponseDto.
type ImageUrlResponseDto struct {
	Id  string `json:"id"`
	Url string `json:"url"`
}

// InitializeImageUploadResultDto defines model for InitializeImageUploadResultDto.
type InitializeImageUploadResultDto struct {
	UploadUrl string `json:"uploadUrl"`
}

// KateImagineV1Input defines model for KateImagineV1Input.
type KateImagineV1Input struct {
	AspectRatio KateImagineV1InputAspectRatio `json:"aspectRatio"`
	Prompt      string                        `json:"prompt"`
	Seed        string                        `json:"seed"`
}

// KateImagineV1InputAspectRatio defines model for KateImagineV1Input.AspectRatio.
type KateImagineV1InputAspectRatio string

// KateInpaintV1Input defines model for KateInpaintV1Input.
type KateInpaintV1Input struct {
	Branch            *KateInpaintV1InputBranch `json:"branch,omitempty"`
	GuidanceScale     *float32                  `json:"guidanceScale,omitempty"`
	Height            *float32                  `json:"height,omitempty"`
	ImageId           string                    `json:"imageId"`
	MaskImageId       *string                   `json:"maskImageId,omitempty"`
	MaskSpread        *float32                  `json:"maskSpread,omitempty"`
	NumInferenceSteps *float32                  `json:"numInferenceSteps,omitempty"`
	Prompt            string                    `json:"prompt"`
	Seed              float32                   `json:"seed"`
	Strength          float32                   `json:"strength"`
	Width             *float32                  `json:"width,omitempty"`
}

// KateInpaintV1InputBranch defines model for KateInpaintV1Input.Branch.
type KateInpaintV1InputBranch string

// LindaHauteV1Input defines model for LindaHauteV1Input.
type LindaHauteV1Input struct {
	AspectRatio    LindaHauteV1InputAspectRatio `json:"aspectRatio"`
	GuidanceScale  *float32                     `json:"guidanceScale,omitempty"`
	ImageWeight    *float32                     `json:"imageWeight,omitempty"`
	InferenceSteps *float32                     `json:"inferenceSteps,omitempty"`
	NegativePrompt *string                      `json:"negativePrompt,omitempty"`
	ProductImageId string                       `json:"productImageId"`
	Prompt         string                       `json:"prompt"`
	Seed           float32                      `json:"seed"`
	Strength       *float32                     `json:"strength,omitempty"`
}

// LindaHauteV1InputAspectRatio defines model for LindaHauteV1Input.AspectRatio.
type LindaHauteV1InputAspectRatio string

// ListAccessControllerAttachmentsDto defines model for ListAccessControllerAttachmentsDto.
type ListAccessControllerAttachmentsDto struct {
	ParentResourceId string `json:"parentResourceId"`
}

// ListAccessControllerDto defines model for ListAccessControllerDto.
type ListAccessControllerDto struct {
	Attachments []ListAccessControllerAttachmentsDto `json:"attachments"`
	Grants      []ListAccessControllerGrantsDto      `json:"grants"`
}

// ListAccessControllerGrantsDto defines model for ListAccessControllerGrantsDto.
type ListAccessControllerGrantsDto struct {
	Access        ListAccessControllerGrantsDtoAccess `json:"access"`
	PrincipalId   string                              `json:"principalId"`
	PrincipalType string                              `json:"principalType"`
}

// ListAccessControllerGrantsDtoAccess defines model for ListAccessControllerGrantsDto.Access.
type ListAccessControllerGrantsDtoAccess string

// ListAccountsDto defines model for ListAccountsDto.
type ListAccountsDto struct {
	Data     []AccountEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListAccountsParamsDto defines model for ListAccountsParamsDto.
type ListAccountsParamsDto struct {
	Cursor  *string                       `json:"cursor,omitempty"`
	Limit   *float32                      `json:"limit,omitempty"`
	OrderBy *ListAccountsParamsDtoOrderBy `json:"orderBy,omitempty"`
}

// ListAccountsParamsDtoOrderBy defines model for ListAccountsParamsDto.OrderBy.
type ListAccountsParamsDtoOrderBy string

// ListCollectionItemsDto defines model for ListCollectionItemsDto.
type ListCollectionItemsDto struct {
	Data     []ResourceEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListCollectionItemsParamsDto defines model for ListCollectionItemsParamsDto.
type ListCollectionItemsParamsDto struct {
	CollectionId string                               `json:"collectionId"`
	Cursor       *string                              `json:"cursor,omitempty"`
	Kind         *ListCollectionItemsParamsDtoKind    `json:"kind,omitempty"`
	Limit        *float32                             `json:"limit,omitempty"`
	OrderBy      *ListCollectionItemsParamsDtoOrderBy `json:"orderBy,omitempty"`
}

// ListCollectionItemsParamsDtoKind defines model for ListCollectionItemsParamsDto.Kind.
type ListCollectionItemsParamsDtoKind string

// ListCollectionItemsParamsDtoOrderBy defines model for ListCollectionItemsParamsDto.OrderBy.
type ListCollectionItemsParamsDtoOrderBy string

// ListCollectionsDto defines model for ListCollectionsDto.
type ListCollectionsDto struct {
	Data     []CollectionEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListCollectionsParamsDto defines model for ListCollectionsParamsDto.
type ListCollectionsParamsDto struct {
	Cursor  *string                          `json:"cursor,omitempty"`
	Limit   *float32                         `json:"limit,omitempty"`
	OrderBy *ListCollectionsParamsDtoOrderBy `json:"orderBy,omitempty"`
}

// ListCollectionsParamsDtoOrderBy defines model for ListCollectionsParamsDto.OrderBy.
type ListCollectionsParamsDtoOrderBy string

// ListOperationsDto defines model for ListOperationsDto.
type ListOperationsDto struct {
	Data     []OperationEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListOperationsParamsDto defines model for ListOperationsParamsDto.
type ListOperationsParamsDto struct {
	Cursor  *string                         `json:"cursor,omitempty"`
	Limit   *float32                        `json:"limit,omitempty"`
	OrderBy *ListOperationsParamsDtoOrderBy `json:"orderBy,omitempty"`
}

// ListOperationsParamsDtoOrderBy defines model for ListOperationsParamsDto.OrderBy.
type ListOperationsParamsDtoOrderBy string

// ListPipelinesDto defines model for ListPipelinesDto.
type ListPipelinesDto struct {
	Data     []PipelineEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListPosesDto defines model for ListPosesDto.
type ListPosesDto struct {
	Data     []PoseEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListPosesParamsDto defines model for ListPosesParamsDto.
type ListPosesParamsDto struct {
	Cursor  *string                    `json:"cursor,omitempty"`
	Limit   *float32                   `json:"limit,omitempty"`
	OrderBy *ListPosesParamsDtoOrderBy `json:"orderBy,omitempty"`
}

// ListPosesParamsDtoOrderBy defines model for ListPosesParamsDto.OrderBy.
type ListPosesParamsDtoOrderBy string

// ListStacksDto defines model for ListStacksDto.
type ListStacksDto struct {
	Data     []StackEntity `json:"data"`
	PageInfo struct {
		NextCursor string `json:"nextCursor"`
	} `json:"pageInfo"`
}

// ListStacksParamsDto defines model for ListStacksParamsDto.
type ListStacksParamsDto struct {
	Cursor  *string                     `json:"cursor,omitempty"`
	Limit   *float32                    `json:"limit,omitempty"`
	OrderBy *ListStacksParamsDtoOrderBy `json:"orderBy,omitempty"`
}

// ListStacksParamsDtoOrderBy defines model for ListStacksParamsDto.OrderBy.
type ListStacksParamsDtoOrderBy string

// ModifyAccessParamsDto defines model for ModifyAccessParamsDto.
type ModifyAccessParamsDto struct {
	Access        string                             `json:"access"`
	PrincipalId   string                             `json:"principalId"`
	PrincipalType ModifyAccessParamsDtoPrincipalType `json:"principalType"`
	ResourceId    string                             `json:"resourceId"`
}

// ModifyAccessParamsDtoPrincipalType defines model for ModifyAccessParamsDto.PrincipalType.
type ModifyAccessParamsDtoPrincipalType string

// NaomiHauteV1Input defines model for NaomiHauteV1Input.
type NaomiHauteV1Input struct {
	Category           string   `json:"category"`
	GarmentImageId     string   `json:"garmentImageId"`
	Height             float32  `json:"height"`
	ImageGuidanceScale *float32 `json:"imageGuidanceScale,omitempty"`

	// LoraIds UNSTABLE
	LoraIds           *[]string              `json:"loraIds,omitempty"`
	Mode              *NaomiHauteV1InputMode `json:"mode,omitempty"`
	NumInferenceSteps *float32               `json:"numInferenceSteps,omitempty"`
	PoseId            string                 `json:"poseId"`
	Prompt            string                 `json:"prompt"`
	Seed              float32                `json:"seed"`
	TextGuidanceScale *float32               `json:"textGuidanceScale,omitempty"`
	Width             float32                `json:"width"`
}

// NaomiHauteV1InputMode defines model for NaomiHauteV1Input.Mode.
type NaomiHauteV1InputMode string

// NegateImageV1Input defines model for NegateImageV1Input.
type NegateImageV1Input struct {
	ImageId string `json:"imageId"`
}

// NoiseV1Input defines model for NoiseV1Input.
type NoiseV1Input struct {
	ImageId string   `json:"imageId"`
	Mean    *float32 `json:"mean,omitempty"`
	Sigma   *float32 `json:"sigma,omitempty"`
}

// ObjectDetectionV1Input defines model for ObjectDetectionV1Input.
type ObjectDetectionV1Input struct {
	ImageId string   `json:"imageId"`
	Labels  []string `json:"labels"`
}

// OperationEntity defines model for OperationEntity.
type OperationEntity struct {
	CreatedAt time.Time               `json:"createdAt"`
	CreatorId string                  `json:"creatorId"`
	Id        string                  `json:"id"`
	Input     map[string]interface{}  `json:"input"`
	Kind      OperationEntityKind     `json:"kind"`
	Metadata  map[string]interface{}  `json:"metadata"`
	Output    *map[string]interface{} `json:"output"`
	Status    OperationEntityStatus   `json:"status"`
	Type      string                  `json:"type"`
	UpdatedAt time.Time               `json:"updatedAt"`
}

// OperationEntityKind defines model for OperationEntity.Kind.
type OperationEntityKind string

// OperationEntityStatus defines model for OperationEntity.Status.
type OperationEntityStatus string

// OperationOutputImageMultiple defines model for OperationOutputImageMultiple.
type OperationOutputImageMultiple struct {
	ImageIds []string                         `json:"imageIds"`
	Kind     OperationOutputImageMultipleKind `json:"kind"`
}

// OperationOutputImageMultipleKind defines model for OperationOutputImageMultiple.Kind.
type OperationOutputImageMultipleKind string

// OperationOutputImageSingle defines model for OperationOutputImageSingle.
type OperationOutputImageSingle struct {
	ImageId string                         `json:"imageId"`
	Kind    OperationOutputImageSingleKind `json:"kind"`
}

// OperationOutputImageSingleKind defines model for OperationOutputImageSingle.Kind.
type OperationOutputImageSingleKind string

// OperationOutputJSON defines model for OperationOutputJSON.
type OperationOutputJSON struct {
	Data map[string]interface{}  `json:"data"`
	Kind OperationOutputJSONKind `json:"kind"`
}

// OperationOutputJSONKind defines model for OperationOutputJSON.Kind.
type OperationOutputJSONKind string

// PipelineEntity defines model for PipelineEntity.
type PipelineEntity struct {
	CreatedAt   time.Time              `json:"createdAt"`
	CreatorId   string                 `json:"creatorId"`
	Id          string                 `json:"id"`
	Kind        PipelineEntityKind     `json:"kind"`
	Metadata    map[string]interface{} `json:"metadata"`
	Permissions map[string]interface{} `json:"permissions"`
	Status      PipelineEntityStatus   `json:"status"`
	UpdatedAt   time.Time              `json:"updatedAt"`
}

// PipelineEntityKind defines model for PipelineEntity.Kind.
type PipelineEntityKind string

// PipelineEntityStatus defines model for PipelineEntity.Status.
type PipelineEntityStatus string

// PoseEntity defines model for PoseEntity.
type PoseEntity struct {
	CreatedAt      time.Time              `json:"createdAt"`
	CreatorId      string                 `json:"creatorId"`
	Id             string                 `json:"id"`
	Kind           PoseEntityKind         `json:"kind"`
	Metadata       map[string]interface{} `json:"metadata"`
	PreviewImage   *ImageEntity           `json:"previewImage,omitempty"`
	PreviewImageId *string                `json:"previewImageId,omitempty"`
	SourceImage    ImageEntity            `json:"sourceImage"`
	UpdatedAt      time.Time              `json:"updatedAt"`
}

// PoseEntityKind defines model for PoseEntity.Kind.
type PoseEntityKind string

// PoseEstimationV1Input defines model for PoseEstimationV1Input.
type PoseEstimationV1Input struct {
	ImageId string `json:"imageId"`
}

// RemoveAccountFromGroupControllerParamsDto defines model for RemoveAccountFromGroupControllerParamsDto.
type RemoveAccountFromGroupControllerParamsDto struct {
	AccountId string                                        `json:"accountId"`
	Role      RemoveAccountFromGroupControllerParamsDtoRole `json:"role"`
}

// RemoveAccountFromGroupControllerParamsDtoRole defines model for RemoveAccountFromGroupControllerParamsDto.Role.
type RemoveAccountFromGroupControllerParamsDtoRole string

// RemoveAccountFromGroupParamsDto defines model for RemoveAccountFromGroupParamsDto.
type RemoveAccountFromGroupParamsDto struct {
	AccountId string                              `json:"accountId"`
	GroupId   string                              `json:"groupId"`
	Role      RemoveAccountFromGroupParamsDtoRole `json:"role"`
}

// RemoveAccountFromGroupParamsDtoRole defines model for RemoveAccountFromGroupParamsDto.Role.
type RemoveAccountFromGroupParamsDtoRole string

// RemoveItemsFromCollectionControllerParamsDto defines model for RemoveItemsFromCollectionControllerParamsDto.
type RemoveItemsFromCollectionControllerParamsDto struct {
	ItemIds []string `json:"itemIds"`
}

// RemoveItemsFromCollectionParamsDto defines model for RemoveItemsFromCollectionParamsDto.
type RemoveItemsFromCollectionParamsDto struct {
	CollectionId string   `json:"collectionId"`
	ItemIds      []string `json:"itemIds"`
}

// RemoveItemsFromStackParamsDto defines model for RemoveItemsFromStackParamsDto.
type RemoveItemsFromStackParamsDto struct {
	ItemIds []string `json:"itemIds"`
	StackId string   `json:"stackId"`
}

// ResourceEntity defines model for ResourceEntity.
type ResourceEntity struct {
	CreatedAt time.Time              `json:"createdAt"`
	CreatorId string                 `json:"creatorId"`
	Id        string                 `json:"id"`
	Kind      ResourceEntityKind     `json:"kind"`
	Metadata  map[string]interface{} `json:"metadata"`
	UpdatedAt time.Time              `json:"updatedAt"`
}

// ResourceEntityKind defines model for ResourceEntity.Kind.
type ResourceEntityKind string

// RevokeAccessControllerParamsDto defines model for RevokeAccessControllerParamsDto.
type RevokeAccessControllerParamsDto struct {
	Access        string                                       `json:"access"`
	PrincipalId   string                                       `json:"principalId"`
	PrincipalType RevokeAccessControllerParamsDtoPrincipalType `json:"principalType"`
}

// RevokeAccessControllerParamsDtoPrincipalType defines model for RevokeAccessControllerParamsDto.PrincipalType.
type RevokeAccessControllerParamsDtoPrincipalType string

// SegmentAnythingEmbeddingsV1Input defines model for SegmentAnythingEmbeddingsV1Input.
type SegmentAnythingEmbeddingsV1Input struct {
	ImageId string `json:"imageId"`
}

// SegmentAnythingMaskV1Input defines model for SegmentAnythingMaskV1Input.
type SegmentAnythingMaskV1Input struct {
	Box           []float32 `json:"box"`
	ImageId       string    `json:"imageId"`
	MaskThreshold *float32  `json:"maskThreshold,omitempty"`
	Smoothness    *float32  `json:"smoothness,omitempty"`
}

// SetPosePreviewControllerParamsDto defines model for SetPosePreviewControllerParamsDto.
type SetPosePreviewControllerParamsDto struct {
	PreviewImageId string `json:"previewImageId"`
}

// SetPosePreviewDto defines model for SetPosePreviewDto.
type SetPosePreviewDto struct {
	PoseId         string `json:"poseId"`
	PreviewImageId string `json:"previewImageId"`
}

// StackEntity defines model for StackEntity.
type StackEntity struct {
	CreatedAt time.Time                `json:"createdAt"`
	CreatorId string                   `json:"creatorId"`
	Id        string                   `json:"id"`
	Items     []StackEntity_Items_Item `json:"items"`
	Kind      StackEntityKind          `json:"kind"`
	Metadata  map[string]interface{}   `json:"metadata"`
	UpdatedAt time.Time                `json:"updatedAt"`
}

// StackEntity_Items_Item defines model for StackEntity.items.Item.
type StackEntity_Items_Item struct {
	union json.RawMessage
}

// StackEntityKind defines model for StackEntity.Kind.
type StackEntityKind string

// StorageEntity defines model for StorageEntity.
type StorageEntity struct {
	CreatedAt time.Time              `json:"createdAt"`
	CreatorId string                 `json:"creatorId"`
	Id        string                 `json:"id"`
	Key       string                 `json:"key"`
	Kind      StorageEntityKind      `json:"kind"`
	Metadata  map[string]interface{} `json:"metadata"`
	UpdatedAt time.Time              `json:"updatedAt"`
	Value     map[string]interface{} `json:"value"`
}

// StorageEntityKind defines model for StorageEntity.Kind.
type StorageEntityKind string

// StorageRecordsResultDto defines model for StorageRecordsResultDto.
type StorageRecordsResultDto struct {
	Key   string                 `json:"key"`
	Value map[string]interface{} `json:"value"`
}

// UpdateMetadataDto defines model for UpdateMetadataDto.
type UpdateMetadataDto struct {
	Overwrite map[string]interface{} `json:"overwrite"`
}

// UpdateResourceMetadataDto defines model for UpdateResourceMetadataDto.
type UpdateResourceMetadataDto struct {
	Id     string            `json:"id"`
	Update UpdateMetadataDto `json:"update"`
}

// UpdateStorageRecordParamsDto defines model for UpdateStorageRecordParamsDto.
type UpdateStorageRecordParamsDto struct {
	Key   string                 `json:"key"`
	Value map[string]interface{} `json:"value"`
}

// UpscaleV1Input defines model for UpscaleV1Input.
type UpscaleV1Input struct {
	ImageId string `json:"imageId"`
}

// WaitOperationParamsDto defines model for WaitOperationParamsDto.
type WaitOperationParamsDto struct {
	Id string `json:"id"`
}

// CompositeV1Request defines model for composite.v1.request.
type CompositeV1Request struct {
	Input    CompositeV1Input        `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// CompositeV1Response defines model for composite.v1.response.
type CompositeV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      CompositeV1ResponseKind     `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    CompositeV1ResponseStatus   `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// CompositeV1ResponseKind defines model for CompositeV1Response.Kind.
type CompositeV1ResponseKind string

// CompositeV1ResponseStatus defines model for CompositeV1Response.Status.
type CompositeV1ResponseStatus string

// CropV1Request defines model for crop.v1.request.
type CropV1Request struct {
	Input    CropV1Input             `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// CropV1Response defines model for crop.v1.response.
type CropV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      CropV1ResponseKind          `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    CropV1ResponseStatus        `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// CropV1ResponseKind defines model for CropV1Response.Kind.
type CropV1ResponseKind string

// CropV1ResponseStatus defines model for CropV1Response.Status.
type CropV1ResponseStatus string

// CutV1Request defines model for cut.v1.request.
type CutV1Request struct {
	Input    CutV1Input              `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// CutV1Response defines model for cut.v1.response.
type CutV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      CutV1ResponseKind           `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    CutV1ResponseStatus         `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// CutV1ResponseKind defines model for CutV1Response.Kind.
type CutV1ResponseKind string

// CutV1ResponseStatus defines model for CutV1Response.Status.
type CutV1ResponseStatus string

// GptV1Request defines model for gpt.v1.request.
type GptV1Request struct {
	Input    GPTV1Input              `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// GptV1Response defines model for gpt.v1.response.
type GptV1Response struct {
	CreatedAt time.Time              `json:"createdAt"`
	CreatorId string                 `json:"creatorId"`
	Id        string                 `json:"id"`
	Input     map[string]interface{} `json:"input"`
	Kind      GptV1ResponseKind      `json:"kind"`
	Metadata  map[string]interface{} `json:"metadata"`
	Output    *OperationOutputJSON   `json:"output"`
	Status    GptV1ResponseStatus    `json:"status"`
	Type      string                 `json:"type"`
	UpdatedAt time.Time              `json:"updatedAt"`
}

// GptV1ResponseKind defines model for GptV1Response.Kind.
type GptV1ResponseKind string

// GptV1ResponseStatus defines model for GptV1Response.Status.
type GptV1ResponseStatus string

// HauteLindaV1Request defines model for haute.linda.v1.request.
type HauteLindaV1Request struct {
	Input    LindaHauteV1Input       `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// HauteLindaV1Response defines model for haute.linda.v1.response.
type HauteLindaV1Response struct {
	CreatedAt time.Time                     `json:"createdAt"`
	CreatorId string                        `json:"creatorId"`
	Id        string                        `json:"id"`
	Input     map[string]interface{}        `json:"input"`
	Kind      HauteLindaV1ResponseKind      `json:"kind"`
	Metadata  map[string]interface{}        `json:"metadata"`
	Output    *OperationOutputImageMultiple `json:"output"`
	Status    HauteLindaV1ResponseStatus    `json:"status"`
	Type      string                        `json:"type"`
	UpdatedAt time.Time                     `json:"updatedAt"`
}

// HauteLindaV1ResponseKind defines model for HauteLindaV1Response.Kind.
type HauteLindaV1ResponseKind string

// HauteLindaV1ResponseStatus defines model for HauteLindaV1Response.Status.
type HauteLindaV1ResponseStatus string

// HauteNaomiV1Request defines model for haute.naomi.v1.request.
type HauteNaomiV1Request struct {
	Input    NaomiHauteV1Input       `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// HauteNaomiV1Response defines model for haute.naomi.v1.response.
type HauteNaomiV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      HauteNaomiV1ResponseKind    `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    HauteNaomiV1ResponseStatus  `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// HauteNaomiV1ResponseKind defines model for HauteNaomiV1Response.Kind.
type HauteNaomiV1ResponseKind string

// HauteNaomiV1ResponseStatus defines model for HauteNaomiV1Response.Status.
type HauteNaomiV1ResponseStatus string

// ImagineKateV1Request defines model for imagine.kate.v1.request.
type ImagineKateV1Request struct {
	Input    KateImagineV1Input      `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// ImagineKateV1Response defines model for imagine.kate.v1.response.
type ImagineKateV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      ImagineKateV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    ImagineKateV1ResponseStatus `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// ImagineKateV1ResponseKind defines model for ImagineKateV1Response.Kind.
type ImagineKateV1ResponseKind string

// ImagineKateV1ResponseStatus defines model for ImagineKateV1Response.Status.
type ImagineKateV1ResponseStatus string

// InpaintKateV1Request defines model for inpaint.kate.v1.request.
type InpaintKateV1Request struct {
	Input    KateInpaintV1Input      `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// InpaintKateV1Response defines model for inpaint.kate.v1.response.
type InpaintKateV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      InpaintKateV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    InpaintKateV1ResponseStatus `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// InpaintKateV1ResponseKind defines model for InpaintKateV1Response.Kind.
type InpaintKateV1ResponseKind string

// InpaintKateV1ResponseStatus defines model for InpaintKateV1Response.Status.
type InpaintKateV1ResponseStatus string

// NegateImageV1Request defines model for negateImage.v1.request.
type NegateImageV1Request struct {
	Input    NegateImageV1Input      `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// NegateImageV1Response defines model for negateImage.v1.response.
type NegateImageV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      NegateImageV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    NegateImageV1ResponseStatus `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// NegateImageV1ResponseKind defines model for NegateImageV1Response.Kind.
type NegateImageV1ResponseKind string

// NegateImageV1ResponseStatus defines model for NegateImageV1Response.Status.
type NegateImageV1ResponseStatus string

// NoiseV1Request defines model for noise.v1.request.
type NoiseV1Request struct {
	Input    NoiseV1Input            `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// NoiseV1Response defines model for noise.v1.response.
type NoiseV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      NoiseV1ResponseKind         `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    NoiseV1ResponseStatus       `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// NoiseV1ResponseKind defines model for NoiseV1Response.Kind.
type NoiseV1ResponseKind string

// NoiseV1ResponseStatus defines model for NoiseV1Response.Status.
type NoiseV1ResponseStatus string

// ObjectDetectionV1Request defines model for objectDetection.v1.request.
type ObjectDetectionV1Request struct {
	Input    ObjectDetectionV1Input  `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// ObjectDetectionV1Response defines model for objectDetection.v1.response.
type ObjectDetectionV1Response struct {
	CreatedAt time.Time                       `json:"createdAt"`
	CreatorId string                          `json:"creatorId"`
	Id        string                          `json:"id"`
	Input     map[string]interface{}          `json:"input"`
	Kind      ObjectDetectionV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}          `json:"metadata"`
	Output    *OperationOutputJSON            `json:"output"`
	Status    ObjectDetectionV1ResponseStatus `json:"status"`
	Type      string                          `json:"type"`
	UpdatedAt time.Time                       `json:"updatedAt"`
}

// ObjectDetectionV1ResponseKind defines model for ObjectDetectionV1Response.Kind.
type ObjectDetectionV1ResponseKind string

// ObjectDetectionV1ResponseStatus defines model for ObjectDetectionV1Response.Status.
type ObjectDetectionV1ResponseStatus string

// PoseEstimationV1Request defines model for poseEstimation.v1.request.
type PoseEstimationV1Request struct {
	Input    PoseEstimationV1Input   `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// PoseEstimationV1Response defines model for poseEstimation.v1.response.
type PoseEstimationV1Response struct {
	CreatedAt time.Time                      `json:"createdAt"`
	CreatorId string                         `json:"creatorId"`
	Id        string                         `json:"id"`
	Input     map[string]interface{}         `json:"input"`
	Kind      PoseEstimationV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}         `json:"metadata"`
	Output    *OperationOutputJSON           `json:"output"`
	Status    PoseEstimationV1ResponseStatus `json:"status"`
	Type      string                         `json:"type"`
	UpdatedAt time.Time                      `json:"updatedAt"`
}

// PoseEstimationV1ResponseKind defines model for PoseEstimationV1Response.Kind.
type PoseEstimationV1ResponseKind string

// PoseEstimationV1ResponseStatus defines model for PoseEstimationV1Response.Status.
type PoseEstimationV1ResponseStatus string

// SegmentAnythingEmbeddingsV1Request defines model for segmentAnything.embeddings.v1.request.
type SegmentAnythingEmbeddingsV1Request struct {
	Input    SegmentAnythingEmbeddingsV1Input `json:"input"`
	Metadata *map[string]interface{}          `json:"metadata,omitempty"`
}

// SegmentAnythingEmbeddingsV1Response defines model for segmentAnything.embeddings.v1.response.
type SegmentAnythingEmbeddingsV1Response struct {
	CreatedAt time.Time                                 `json:"createdAt"`
	CreatorId string                                    `json:"creatorId"`
	Id        string                                    `json:"id"`
	Input     map[string]interface{}                    `json:"input"`
	Kind      SegmentAnythingEmbeddingsV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}                    `json:"metadata"`
	Output    *OperationOutputJSON                      `json:"output"`
	Status    SegmentAnythingEmbeddingsV1ResponseStatus `json:"status"`
	Type      string                                    `json:"type"`
	UpdatedAt time.Time                                 `json:"updatedAt"`
}

// SegmentAnythingEmbeddingsV1ResponseKind defines model for SegmentAnythingEmbeddingsV1Response.Kind.
type SegmentAnythingEmbeddingsV1ResponseKind string

// SegmentAnythingEmbeddingsV1ResponseStatus defines model for SegmentAnythingEmbeddingsV1Response.Status.
type SegmentAnythingEmbeddingsV1ResponseStatus string

// SegmentAnythingMaskV1Request defines model for segmentAnything.mask.v1.request.
type SegmentAnythingMaskV1Request struct {
	Input    SegmentAnythingMaskV1Input `json:"input"`
	Metadata *map[string]interface{}    `json:"metadata,omitempty"`
}

// SegmentAnythingMaskV1Response defines model for segmentAnything.mask.v1.response.
type SegmentAnythingMaskV1Response struct {
	CreatedAt time.Time                           `json:"createdAt"`
	CreatorId string                              `json:"creatorId"`
	Id        string                              `json:"id"`
	Input     map[string]interface{}              `json:"input"`
	Kind      SegmentAnythingMaskV1ResponseKind   `json:"kind"`
	Metadata  map[string]interface{}              `json:"metadata"`
	Output    *OperationOutputImageSingle         `json:"output"`
	Status    SegmentAnythingMaskV1ResponseStatus `json:"status"`
	Type      string                              `json:"type"`
	UpdatedAt time.Time                           `json:"updatedAt"`
}

// SegmentAnythingMaskV1ResponseKind defines model for SegmentAnythingMaskV1Response.Kind.
type SegmentAnythingMaskV1ResponseKind string

// SegmentAnythingMaskV1ResponseStatus defines model for SegmentAnythingMaskV1Response.Status.
type SegmentAnythingMaskV1ResponseStatus string

// UpscaleV1Request defines model for upscale.v1.request.
type UpscaleV1Request struct {
	Input    UpscaleV1Input          `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// UpscaleV1Response defines model for upscale.v1.response.
type UpscaleV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      UpscaleV1ResponseKind       `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    UpscaleV1ResponseStatus     `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// UpscaleV1ResponseKind defines model for UpscaleV1Response.Kind.
type UpscaleV1ResponseKind string

// UpscaleV1ResponseStatus defines model for UpscaleV1Response.Status.
type UpscaleV1ResponseStatus string

// VtonGiseleV1Request defines model for vton.gisele.v1.request.
type VtonGiseleV1Request struct {
	Input    GiseleVtonV1Input       `json:"input"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// VtonGiseleV1Response defines model for vton.gisele.v1.response.
type VtonGiseleV1Response struct {
	CreatedAt time.Time                   `json:"createdAt"`
	CreatorId string                      `json:"creatorId"`
	Id        string                      `json:"id"`
	Input     map[string]interface{}      `json:"input"`
	Kind      VtonGiseleV1ResponseKind    `json:"kind"`
	Metadata  map[string]interface{}      `json:"metadata"`
	Output    *OperationOutputImageSingle `json:"output"`
	Status    VtonGiseleV1ResponseStatus  `json:"status"`
	Type      string                      `json:"type"`
	UpdatedAt time.Time                   `json:"updatedAt"`
}

// VtonGiseleV1ResponseKind defines model for VtonGiseleV1Response.Kind.
type VtonGiseleV1ResponseKind string

// VtonGiseleV1ResponseStatus defines model for VtonGiseleV1Response.Status.
type VtonGiseleV1ResponseStatus string

// AccountsControllerListAccountsV1Params defines parameters for AccountsControllerListAccountsV1.
type AccountsControllerListAccountsV1Params struct {
	OrderBy *AccountsControllerListAccountsV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                       `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *string                                        `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// AccountsControllerListAccountsV1ParamsOrderBy defines parameters for AccountsControllerListAccountsV1.
type AccountsControllerListAccountsV1ParamsOrderBy string

// CallControllerCallAccountsBalanceSelfV1JSONBody defines parameters for CallControllerCallAccountsBalanceSelfV1.
type CallControllerCallAccountsBalanceSelfV1JSONBody = string

// CallControllerCallAccountsSelfV1JSONBody defines parameters for CallControllerCallAccountsSelfV1.
type CallControllerCallAccountsSelfV1JSONBody = string

// CallControllerCallGroupsCreateV1JSONBody defines parameters for CallControllerCallGroupsCreateV1.
type CallControllerCallGroupsCreateV1JSONBody = string

// CollectionsControllerListCollectionsV1Params defines parameters for CollectionsControllerListCollectionsV1.
type CollectionsControllerListCollectionsV1Params struct {
	OrderBy *CollectionsControllerListCollectionsV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                             `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *string                                              `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CollectionsControllerListCollectionsV1ParamsOrderBy defines parameters for CollectionsControllerListCollectionsV1.
type CollectionsControllerListCollectionsV1ParamsOrderBy string

// CollectionsControllerListItemsV1Params defines parameters for CollectionsControllerListItemsV1.
type CollectionsControllerListItemsV1Params struct {
	Cursor  *string                                        `form:"cursor,omitempty" json:"cursor,omitempty"`
	OrderBy *CollectionsControllerListItemsV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                       `form:"limit,omitempty" json:"limit,omitempty"`
	Kind    *CollectionsControllerListItemsV1ParamsKind    `form:"kind,omitempty" json:"kind,omitempty"`
}

// CollectionsControllerListItemsV1ParamsOrderBy defines parameters for CollectionsControllerListItemsV1.
type CollectionsControllerListItemsV1ParamsOrderBy string

// CollectionsControllerListItemsV1ParamsKind defines parameters for CollectionsControllerListItemsV1.
type CollectionsControllerListItemsV1ParamsKind string

// OperationsControllerListOperationsV1Params defines parameters for OperationsControllerListOperationsV1.
type OperationsControllerListOperationsV1Params struct {
	OrderBy *OperationsControllerListOperationsV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                           `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *string                                            `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// OperationsControllerListOperationsV1ParamsOrderBy defines parameters for OperationsControllerListOperationsV1.
type OperationsControllerListOperationsV1ParamsOrderBy string

// PipelinesControllerListPipelinesV1Params defines parameters for PipelinesControllerListPipelinesV1.
type PipelinesControllerListPipelinesV1Params struct {
	OrderBy *PipelinesControllerListPipelinesV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                         `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *string                                          `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PipelinesControllerListPipelinesV1ParamsOrderBy defines parameters for PipelinesControllerListPipelinesV1.
type PipelinesControllerListPipelinesV1ParamsOrderBy string

// PosesControllerListPosesV1Params defines parameters for PosesControllerListPosesV1.
type PosesControllerListPosesV1Params struct {
	OrderBy *PosesControllerListPosesV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                 `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *string                                  `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PosesControllerListPosesV1ParamsOrderBy defines parameters for PosesControllerListPosesV1.
type PosesControllerListPosesV1ParamsOrderBy string

// StacksControllerListStacksV1Params defines parameters for StacksControllerListStacksV1.
type StacksControllerListStacksV1Params struct {
	OrderBy *StacksControllerListStacksV1ParamsOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Limit   *float32                                   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *string                                    `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// StacksControllerListStacksV1ParamsOrderBy defines parameters for StacksControllerListStacksV1.
type StacksControllerListStacksV1ParamsOrderBy string

// AccountsControllerCreateAccountV1JSONRequestBody defines body for AccountsControllerCreateAccountV1 for application/json ContentType.
type AccountsControllerCreateAccountV1JSONRequestBody = CreateAccountParamsDto

// BalancesControllerAddBalanceV1JSONRequestBody defines body for BalancesControllerAddBalanceV1 for application/json ContentType.
type BalancesControllerAddBalanceV1JSONRequestBody = AddBalanceControllerParamsDto

// CallControllerCallAccessAttachV1JSONRequestBody defines body for CallControllerCallAccessAttachV1 for application/json ContentType.
type CallControllerCallAccessAttachV1JSONRequestBody = AttachAccessParamsDto

// CallControllerCallAccessGrantV1JSONRequestBody defines body for CallControllerCallAccessGrantV1 for application/json ContentType.
type CallControllerCallAccessGrantV1JSONRequestBody = ModifyAccessParamsDto

// CallControllerCallAccountsBalanceAddV1JSONRequestBody defines body for CallControllerCallAccountsBalanceAddV1 for application/json ContentType.
type CallControllerCallAccountsBalanceAddV1JSONRequestBody = AddBalanceParamsDto

// CallControllerCallAccountsBalanceGetV1JSONRequestBody defines body for CallControllerCallAccountsBalanceGetV1 for application/json ContentType.
type CallControllerCallAccountsBalanceGetV1JSONRequestBody = GetBalanceParamsDto

// CallControllerCallAccountsBalanceSelfV1JSONRequestBody defines body for CallControllerCallAccountsBalanceSelfV1 for application/json ContentType.
type CallControllerCallAccountsBalanceSelfV1JSONRequestBody = CallControllerCallAccountsBalanceSelfV1JSONBody

// CallControllerCallAccountsCreateV1JSONRequestBody defines body for CallControllerCallAccountsCreateV1 for application/json ContentType.
type CallControllerCallAccountsCreateV1JSONRequestBody = CreateAccountParamsDto

// CallControllerCallAccountsGetV1JSONRequestBody defines body for CallControllerCallAccountsGetV1 for application/json ContentType.
type CallControllerCallAccountsGetV1JSONRequestBody = GetAccountParamsDto

// CallControllerCallAccountsListV1JSONRequestBody defines body for CallControllerCallAccountsListV1 for application/json ContentType.
type CallControllerCallAccountsListV1JSONRequestBody = ListAccountsParamsDto

// CallControllerCallAccountsSelfV1JSONRequestBody defines body for CallControllerCallAccountsSelfV1 for application/json ContentType.
type CallControllerCallAccountsSelfV1JSONRequestBody = CallControllerCallAccountsSelfV1JSONBody

// CallControllerCallCollectionsCreateV1JSONRequestBody defines body for CallControllerCallCollectionsCreateV1 for application/json ContentType.
type CallControllerCallCollectionsCreateV1JSONRequestBody = CreateCollectionParamsDto

// CallControllerCallCollectionsGetV1JSONRequestBody defines body for CallControllerCallCollectionsGetV1 for application/json ContentType.
type CallControllerCallCollectionsGetV1JSONRequestBody = GetCollectionParamsDto

// CallControllerCallCollectionsItemsAddV1JSONRequestBody defines body for CallControllerCallCollectionsItemsAddV1 for application/json ContentType.
type CallControllerCallCollectionsItemsAddV1JSONRequestBody = AddItemsToCollectionParamsDto

// CallControllerCallCollectionsItemsListV1JSONRequestBody defines body for CallControllerCallCollectionsItemsListV1 for application/json ContentType.
type CallControllerCallCollectionsItemsListV1JSONRequestBody = ListCollectionItemsParamsDto

// CallControllerCallCollectionsItemsRemoveV1JSONRequestBody defines body for CallControllerCallCollectionsItemsRemoveV1 for application/json ContentType.
type CallControllerCallCollectionsItemsRemoveV1JSONRequestBody = RemoveItemsFromCollectionParamsDto

// CallControllerCallCollectionsListV1JSONRequestBody defines body for CallControllerCallCollectionsListV1 for application/json ContentType.
type CallControllerCallCollectionsListV1JSONRequestBody = ListCollectionsParamsDto

// CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody defines body for CallControllerCallCollectionsMetadataUpdateV1 for application/json ContentType.
type CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody = UpdateResourceMetadataDto

// CallControllerCallGroupsAccountsAddV1JSONRequestBody defines body for CallControllerCallGroupsAccountsAddV1 for application/json ContentType.
type CallControllerCallGroupsAccountsAddV1JSONRequestBody = AddAccountToGroupParamsDto

// CallControllerCallGroupsAccountsRemoveV1JSONRequestBody defines body for CallControllerCallGroupsAccountsRemoveV1 for application/json ContentType.
type CallControllerCallGroupsAccountsRemoveV1JSONRequestBody = RemoveAccountFromGroupParamsDto

// CallControllerCallGroupsCreateV1JSONRequestBody defines body for CallControllerCallGroupsCreateV1 for application/json ContentType.
type CallControllerCallGroupsCreateV1JSONRequestBody = CallControllerCallGroupsCreateV1JSONBody

// CallControllerCallGroupsDeleteV1JSONRequestBody defines body for CallControllerCallGroupsDeleteV1 for application/json ContentType.
type CallControllerCallGroupsDeleteV1JSONRequestBody = DeleteParamsDto

// CallControllerCallGroupsGetV1JSONRequestBody defines body for CallControllerCallGroupsGetV1 for application/json ContentType.
type CallControllerCallGroupsGetV1JSONRequestBody = GetGroupParamsDto

// CallControllerCallImagesGetV1JSONRequestBody defines body for CallControllerCallImagesGetV1 for application/json ContentType.
type CallControllerCallImagesGetV1JSONRequestBody = GetImageParamsDto

// CallControllerCallImagesGetManyV1JSONRequestBody defines body for CallControllerCallImagesGetManyV1 for application/json ContentType.
type CallControllerCallImagesGetManyV1JSONRequestBody = GetUrlsForImagesParamsDto

// CallControllerCallImagesRepresentationsGetV1JSONRequestBody defines body for CallControllerCallImagesRepresentationsGetV1 for application/json ContentType.
type CallControllerCallImagesRepresentationsGetV1JSONRequestBody = GetImageRepresentationParamsDto

// CallControllerCallOperationsGetV1JSONRequestBody defines body for CallControllerCallOperationsGetV1 for application/json ContentType.
type CallControllerCallOperationsGetV1JSONRequestBody = GetOperationParamsDto

// CallControllerCallOperationsGetManyV1JSONRequestBody defines body for CallControllerCallOperationsGetManyV1 for application/json ContentType.
type CallControllerCallOperationsGetManyV1JSONRequestBody = GetOperationsParamsDto

// CallControllerCallOperationsListV1JSONRequestBody defines body for CallControllerCallOperationsListV1 for application/json ContentType.
type CallControllerCallOperationsListV1JSONRequestBody = ListOperationsParamsDto

// CallControllerCallOperationsMetadataUpdateV1JSONRequestBody defines body for CallControllerCallOperationsMetadataUpdateV1 for application/json ContentType.
type CallControllerCallOperationsMetadataUpdateV1JSONRequestBody = UpdateResourceMetadataDto

// CallControllerCallOperationsRunCompositeV1V1JSONRequestBody defines body for CallControllerCallOperationsRunCompositeV1V1 for application/json ContentType.
type CallControllerCallOperationsRunCompositeV1V1JSONRequestBody = CompositeV1Request

// CallControllerCallOperationsRunCropV1V1JSONRequestBody defines body for CallControllerCallOperationsRunCropV1V1 for application/json ContentType.
type CallControllerCallOperationsRunCropV1V1JSONRequestBody = CropV1Request

// CallControllerCallOperationsRunCutV1V1JSONRequestBody defines body for CallControllerCallOperationsRunCutV1V1 for application/json ContentType.
type CallControllerCallOperationsRunCutV1V1JSONRequestBody = CutV1Request

// CallControllerCallOperationsRunGptV1V1JSONRequestBody defines body for CallControllerCallOperationsRunGptV1V1 for application/json ContentType.
type CallControllerCallOperationsRunGptV1V1JSONRequestBody = GptV1Request

// CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody defines body for CallControllerCallOperationsRunHauteLindaV1V1 for application/json ContentType.
type CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody = HauteLindaV1Request

// CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody defines body for CallControllerCallOperationsRunHauteNaomiV1V1 for application/json ContentType.
type CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody = HauteNaomiV1Request

// CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody defines body for CallControllerCallOperationsRunImagineKateV1V1 for application/json ContentType.
type CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody = ImagineKateV1Request

// CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody defines body for CallControllerCallOperationsRunInpaintKateV1V1 for application/json ContentType.
type CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody = InpaintKateV1Request

// CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody defines body for CallControllerCallOperationsRunNegateImageV1V1 for application/json ContentType.
type CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody = NegateImageV1Request

// CallControllerCallOperationsRunNoiseV1V1JSONRequestBody defines body for CallControllerCallOperationsRunNoiseV1V1 for application/json ContentType.
type CallControllerCallOperationsRunNoiseV1V1JSONRequestBody = NoiseV1Request

// CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody defines body for CallControllerCallOperationsRunObjectDetectionV1V1 for application/json ContentType.
type CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody = ObjectDetectionV1Request

// CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody defines body for CallControllerCallOperationsRunPoseEstimationV1V1 for application/json ContentType.
type CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody = PoseEstimationV1Request

// CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody defines body for CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1 for application/json ContentType.
type CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody = SegmentAnythingEmbeddingsV1Request

// CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody defines body for CallControllerCallOperationsRunSegmentAnythingMaskV1V1 for application/json ContentType.
type CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody = SegmentAnythingMaskV1Request

// CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody defines body for CallControllerCallOperationsRunUpscaleV1V1 for application/json ContentType.
type CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody = UpscaleV1Request

// CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody defines body for CallControllerCallOperationsRunVtonGiseleV1V1 for application/json ContentType.
type CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody = VtonGiseleV1Request

// CallControllerCallOperationsWaitV1JSONRequestBody defines body for CallControllerCallOperationsWaitV1 for application/json ContentType.
type CallControllerCallOperationsWaitV1JSONRequestBody = WaitOperationParamsDto

// CallControllerCallPosesGetV1JSONRequestBody defines body for CallControllerCallPosesGetV1 for application/json ContentType.
type CallControllerCallPosesGetV1JSONRequestBody = GetPoseParamsDto

// CallControllerCallPosesListV1JSONRequestBody defines body for CallControllerCallPosesListV1 for application/json ContentType.
type CallControllerCallPosesListV1JSONRequestBody = ListPosesParamsDto

// CallControllerCallPosesPreviewSetV1JSONRequestBody defines body for CallControllerCallPosesPreviewSetV1 for application/json ContentType.
type CallControllerCallPosesPreviewSetV1JSONRequestBody = SetPosePreviewDto

// CallControllerCallStacksCreateV1JSONRequestBody defines body for CallControllerCallStacksCreateV1 for application/json ContentType.
type CallControllerCallStacksCreateV1JSONRequestBody = CreateStackParamsDto

// CallControllerCallStacksGetV1JSONRequestBody defines body for CallControllerCallStacksGetV1 for application/json ContentType.
type CallControllerCallStacksGetV1JSONRequestBody = GetStackParamsDto

// CallControllerCallStacksItemsAddV1JSONRequestBody defines body for CallControllerCallStacksItemsAddV1 for application/json ContentType.
type CallControllerCallStacksItemsAddV1JSONRequestBody = AddItemsToStackParamsDto

// CallControllerCallStacksItemsRemoveV1JSONRequestBody defines body for CallControllerCallStacksItemsRemoveV1 for application/json ContentType.
type CallControllerCallStacksItemsRemoveV1JSONRequestBody = RemoveItemsFromStackParamsDto

// CallControllerCallStacksListV1JSONRequestBody defines body for CallControllerCallStacksListV1 for application/json ContentType.
type CallControllerCallStacksListV1JSONRequestBody = ListStacksParamsDto

// CallControllerCallStacksMetadataUpdateV1JSONRequestBody defines body for CallControllerCallStacksMetadataUpdateV1 for application/json ContentType.
type CallControllerCallStacksMetadataUpdateV1JSONRequestBody = UpdateResourceMetadataDto

// CallControllerCallStorageCreateV1JSONRequestBody defines body for CallControllerCallStorageCreateV1 for application/json ContentType.
type CallControllerCallStorageCreateV1JSONRequestBody = CreateStorageRecordParamsDto

// CallControllerCallStorageDeleteV1JSONRequestBody defines body for CallControllerCallStorageDeleteV1 for application/json ContentType.
type CallControllerCallStorageDeleteV1JSONRequestBody = DeleteStorageParamsDto

// CallControllerCallStorageGetManyV1JSONRequestBody defines body for CallControllerCallStorageGetManyV1 for application/json ContentType.
type CallControllerCallStorageGetManyV1JSONRequestBody = GetStorageRecordParamsDto

// CallControllerCallStorageUpdateV1JSONRequestBody defines body for CallControllerCallStorageUpdateV1 for application/json ContentType.
type CallControllerCallStorageUpdateV1JSONRequestBody = UpdateStorageRecordParamsDto

// CollectionsControllerCreateCollectionV1JSONRequestBody defines body for CollectionsControllerCreateCollectionV1 for application/json ContentType.
type CollectionsControllerCreateCollectionV1JSONRequestBody = CreateCollectionParamsDto

// CollectionsControllerAddItemsV1JSONRequestBody defines body for CollectionsControllerAddItemsV1 for application/json ContentType.
type CollectionsControllerAddItemsV1JSONRequestBody = AddItemsToCollectionControllerParamsDto

// CollectionsControllerRemoveItemsV1JSONRequestBody defines body for CollectionsControllerRemoveItemsV1 for application/json ContentType.
type CollectionsControllerRemoveItemsV1JSONRequestBody = RemoveItemsFromCollectionControllerParamsDto

// CollectionsControllerUpdateMetadataV1JSONRequestBody defines body for CollectionsControllerUpdateMetadataV1 for application/json ContentType.
type CollectionsControllerUpdateMetadataV1JSONRequestBody = UpdateMetadataDto

// GroupsControllerAddAccountV1JSONRequestBody defines body for GroupsControllerAddAccountV1 for application/json ContentType.
type GroupsControllerAddAccountV1JSONRequestBody = AddAccountToGroupControllerParamsDto

// GroupsControllerRemoveAccountV1JSONRequestBody defines body for GroupsControllerRemoveAccountV1 for application/json ContentType.
type GroupsControllerRemoveAccountV1JSONRequestBody = RemoveAccountFromGroupControllerParamsDto

// ImagesControllerGetUrlsV1JSONRequestBody defines body for ImagesControllerGetUrlsV1 for application/json ContentType.
type ImagesControllerGetUrlsV1JSONRequestBody = GetUrlsForImagesParamsDto

// ImagesControllerFinalizeUploadV1JSONRequestBody defines body for ImagesControllerFinalizeUploadV1 for application/json ContentType.
type ImagesControllerFinalizeUploadV1JSONRequestBody = CreateImageParamsDto

// OperationsControllerGetOperationsV1JSONRequestBody defines body for OperationsControllerGetOperationsV1 for application/json ContentType.
type OperationsControllerGetOperationsV1JSONRequestBody = GetOperationsParamsDto

// OperationsControllerRunCompositeV1V1JSONRequestBody defines body for OperationsControllerRunCompositeV1V1 for application/json ContentType.
type OperationsControllerRunCompositeV1V1JSONRequestBody = CompositeV1Request

// OperationsControllerRunCropV1V1JSONRequestBody defines body for OperationsControllerRunCropV1V1 for application/json ContentType.
type OperationsControllerRunCropV1V1JSONRequestBody = CropV1Request

// OperationsControllerRunCutV1V1JSONRequestBody defines body for OperationsControllerRunCutV1V1 for application/json ContentType.
type OperationsControllerRunCutV1V1JSONRequestBody = CutV1Request

// OperationsControllerRunGptV1V1JSONRequestBody defines body for OperationsControllerRunGptV1V1 for application/json ContentType.
type OperationsControllerRunGptV1V1JSONRequestBody = GptV1Request

// OperationsControllerRunHauteLindaV1V1JSONRequestBody defines body for OperationsControllerRunHauteLindaV1V1 for application/json ContentType.
type OperationsControllerRunHauteLindaV1V1JSONRequestBody = HauteLindaV1Request

// OperationsControllerRunHauteNaomiV1V1JSONRequestBody defines body for OperationsControllerRunHauteNaomiV1V1 for application/json ContentType.
type OperationsControllerRunHauteNaomiV1V1JSONRequestBody = HauteNaomiV1Request

// OperationsControllerRunImagineKateV1V1JSONRequestBody defines body for OperationsControllerRunImagineKateV1V1 for application/json ContentType.
type OperationsControllerRunImagineKateV1V1JSONRequestBody = ImagineKateV1Request

// OperationsControllerRunInpaintKateV1V1JSONRequestBody defines body for OperationsControllerRunInpaintKateV1V1 for application/json ContentType.
type OperationsControllerRunInpaintKateV1V1JSONRequestBody = InpaintKateV1Request

// OperationsControllerRunNegateImageV1V1JSONRequestBody defines body for OperationsControllerRunNegateImageV1V1 for application/json ContentType.
type OperationsControllerRunNegateImageV1V1JSONRequestBody = NegateImageV1Request

// OperationsControllerRunNoiseV1V1JSONRequestBody defines body for OperationsControllerRunNoiseV1V1 for application/json ContentType.
type OperationsControllerRunNoiseV1V1JSONRequestBody = NoiseV1Request

// OperationsControllerRunObjectDetectionV1V1JSONRequestBody defines body for OperationsControllerRunObjectDetectionV1V1 for application/json ContentType.
type OperationsControllerRunObjectDetectionV1V1JSONRequestBody = ObjectDetectionV1Request

// OperationsControllerRunPoseEstimationV1V1JSONRequestBody defines body for OperationsControllerRunPoseEstimationV1V1 for application/json ContentType.
type OperationsControllerRunPoseEstimationV1V1JSONRequestBody = PoseEstimationV1Request

// OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody defines body for OperationsControllerRunSegmentAnythingEmbeddingsV1V1 for application/json ContentType.
type OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody = SegmentAnythingEmbeddingsV1Request

// OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody defines body for OperationsControllerRunSegmentAnythingMaskV1V1 for application/json ContentType.
type OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody = SegmentAnythingMaskV1Request

// OperationsControllerRunUpscaleV1V1JSONRequestBody defines body for OperationsControllerRunUpscaleV1V1 for application/json ContentType.
type OperationsControllerRunUpscaleV1V1JSONRequestBody = UpscaleV1Request

// OperationsControllerRunVtonGiseleV1V1JSONRequestBody defines body for OperationsControllerRunVtonGiseleV1V1 for application/json ContentType.
type OperationsControllerRunVtonGiseleV1V1JSONRequestBody = VtonGiseleV1Request

// OperationsControllerUpdateMetadataV1JSONRequestBody defines body for OperationsControllerUpdateMetadataV1 for application/json ContentType.
type OperationsControllerUpdateMetadataV1JSONRequestBody = UpdateMetadataDto

// PipelinesControllerCreatePipelineV1JSONRequestBody defines body for PipelinesControllerCreatePipelineV1 for application/json ContentType.
type PipelinesControllerCreatePipelineV1JSONRequestBody = CreatePipelineParamsDto

// PosesControllerUpdateMetadataV1JSONRequestBody defines body for PosesControllerUpdateMetadataV1 for application/json ContentType.
type PosesControllerUpdateMetadataV1JSONRequestBody = UpdateMetadataDto

// PosesControllerSetPosePreviewV1JSONRequestBody defines body for PosesControllerSetPosePreviewV1 for application/json ContentType.
type PosesControllerSetPosePreviewV1JSONRequestBody = SetPosePreviewControllerParamsDto

// AccessControllerAttachAccessV1JSONRequestBody defines body for AccessControllerAttachAccessV1 for application/json ContentType.
type AccessControllerAttachAccessV1JSONRequestBody = AttachAccessControllerParamsDto

// AccessControllerDetachAccessV1JSONRequestBody defines body for AccessControllerDetachAccessV1 for application/json ContentType.
type AccessControllerDetachAccessV1JSONRequestBody = DetachAccessControllerParamsDto

// AccessControllerGrantAccessV1JSONRequestBody defines body for AccessControllerGrantAccessV1 for application/json ContentType.
type AccessControllerGrantAccessV1JSONRequestBody = GrantAccessControllerParams

// AccessControllerRevokeAccessV1JSONRequestBody defines body for AccessControllerRevokeAccessV1 for application/json ContentType.
type AccessControllerRevokeAccessV1JSONRequestBody = RevokeAccessControllerParamsDto

// StacksControllerCreateStackV1JSONRequestBody defines body for StacksControllerCreateStackV1 for application/json ContentType.
type StacksControllerCreateStackV1JSONRequestBody = CreateStackParamsDto

// StacksControllerAddItemsV1JSONRequestBody defines body for StacksControllerAddItemsV1 for application/json ContentType.
type StacksControllerAddItemsV1JSONRequestBody = AddItemsToStackControllerParamsDto

// StacksControllerRemoveItemsV1JSONRequestBody defines body for StacksControllerRemoveItemsV1 for application/json ContentType.
type StacksControllerRemoveItemsV1JSONRequestBody = RemoveItemsFromCollectionControllerParamsDto

// StacksControllerUpdateMetadataV1JSONRequestBody defines body for StacksControllerUpdateMetadataV1 for application/json ContentType.
type StacksControllerUpdateMetadataV1JSONRequestBody = UpdateMetadataDto

// StorageControllerCreateRecordV1JSONRequestBody defines body for StorageControllerCreateRecordV1 for application/json ContentType.
type StorageControllerCreateRecordV1JSONRequestBody = CreateStorageRecordParamsDto

// StorageControllerDeleteRecordV1JSONRequestBody defines body for StorageControllerDeleteRecordV1 for application/json ContentType.
type StorageControllerDeleteRecordV1JSONRequestBody = DeleteStorageParamsDto

// StorageControllerGetRecordsV1JSONRequestBody defines body for StorageControllerGetRecordsV1 for application/json ContentType.
type StorageControllerGetRecordsV1JSONRequestBody = GetStorageRecordParamsDto

// StorageControllerUpdateRecordV1JSONRequestBody defines body for StorageControllerUpdateRecordV1 for application/json ContentType.
type StorageControllerUpdateRecordV1JSONRequestBody = UpdateStorageRecordParamsDto

// AsOperationEntity returns the union data inside the StackEntity_Items_Item as a OperationEntity
func (t StackEntity_Items_Item) AsOperationEntity() (OperationEntity, error) {
	var body OperationEntity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOperationEntity overwrites any union data inside the StackEntity_Items_Item as the provided OperationEntity
func (t *StackEntity_Items_Item) FromOperationEntity(v OperationEntity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOperationEntity performs a merge with any union data inside the StackEntity_Items_Item, using the provided OperationEntity
func (t *StackEntity_Items_Item) MergeOperationEntity(v OperationEntity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsImageEntity returns the union data inside the StackEntity_Items_Item as a ImageEntity
func (t StackEntity_Items_Item) AsImageEntity() (ImageEntity, error) {
	var body ImageEntity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImageEntity overwrites any union data inside the StackEntity_Items_Item as the provided ImageEntity
func (t *StackEntity_Items_Item) FromImageEntity(v ImageEntity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImageEntity performs a merge with any union data inside the StackEntity_Items_Item, using the provided ImageEntity
func (t *StackEntity_Items_Item) MergeImageEntity(v ImageEntity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StackEntity_Items_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StackEntity_Items_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccountsControllerListAccountsV1 request
	AccountsControllerListAccountsV1(ctx context.Context, params *AccountsControllerListAccountsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsControllerCreateAccountV1WithBody request with any body
	AccountsControllerCreateAccountV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsControllerCreateAccountV1(ctx context.Context, body AccountsControllerCreateAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsControllerGetAccountByAliasV1 request
	AccountsControllerGetAccountByAliasV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsControllerGetSelfV1 request
	AccountsControllerGetSelfV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalancesControllerGetBalanceForSelfV1 request
	BalancesControllerGetBalanceForSelfV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsControllerGetAccountV1 request
	AccountsControllerGetAccountV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalancesControllerGetBalanceV1 request
	BalancesControllerGetBalanceV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BalancesControllerAddBalanceV1WithBody request with any body
	BalancesControllerAddBalanceV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BalancesControllerAddBalanceV1(ctx context.Context, id string, body BalancesControllerAddBalanceV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccessAttachV1WithBody request with any body
	CallControllerCallAccessAttachV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccessAttachV1(ctx context.Context, body CallControllerCallAccessAttachV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccessGrantV1WithBody request with any body
	CallControllerCallAccessGrantV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccessGrantV1(ctx context.Context, body CallControllerCallAccessGrantV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsBalanceAddV1WithBody request with any body
	CallControllerCallAccountsBalanceAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsBalanceAddV1(ctx context.Context, body CallControllerCallAccountsBalanceAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsBalanceGetV1WithBody request with any body
	CallControllerCallAccountsBalanceGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsBalanceGetV1(ctx context.Context, body CallControllerCallAccountsBalanceGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsBalanceSelfV1WithBody request with any body
	CallControllerCallAccountsBalanceSelfV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsBalanceSelfV1(ctx context.Context, body CallControllerCallAccountsBalanceSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsCreateV1WithBody request with any body
	CallControllerCallAccountsCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsCreateV1(ctx context.Context, body CallControllerCallAccountsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsGetV1WithBody request with any body
	CallControllerCallAccountsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsGetV1(ctx context.Context, body CallControllerCallAccountsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsListV1WithBody request with any body
	CallControllerCallAccountsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsListV1(ctx context.Context, body CallControllerCallAccountsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallAccountsSelfV1WithBody request with any body
	CallControllerCallAccountsSelfV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallAccountsSelfV1(ctx context.Context, body CallControllerCallAccountsSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsCreateV1WithBody request with any body
	CallControllerCallCollectionsCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsCreateV1(ctx context.Context, body CallControllerCallCollectionsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsGetV1WithBody request with any body
	CallControllerCallCollectionsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsGetV1(ctx context.Context, body CallControllerCallCollectionsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsItemsAddV1WithBody request with any body
	CallControllerCallCollectionsItemsAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsItemsAddV1(ctx context.Context, body CallControllerCallCollectionsItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsItemsListV1WithBody request with any body
	CallControllerCallCollectionsItemsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsItemsListV1(ctx context.Context, body CallControllerCallCollectionsItemsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsItemsRemoveV1WithBody request with any body
	CallControllerCallCollectionsItemsRemoveV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsItemsRemoveV1(ctx context.Context, body CallControllerCallCollectionsItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsListV1WithBody request with any body
	CallControllerCallCollectionsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsListV1(ctx context.Context, body CallControllerCallCollectionsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallCollectionsMetadataUpdateV1WithBody request with any body
	CallControllerCallCollectionsMetadataUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallCollectionsMetadataUpdateV1(ctx context.Context, body CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallGroupsAccountsAddV1WithBody request with any body
	CallControllerCallGroupsAccountsAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallGroupsAccountsAddV1(ctx context.Context, body CallControllerCallGroupsAccountsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallGroupsAccountsRemoveV1WithBody request with any body
	CallControllerCallGroupsAccountsRemoveV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallGroupsAccountsRemoveV1(ctx context.Context, body CallControllerCallGroupsAccountsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallGroupsCreateV1WithBody request with any body
	CallControllerCallGroupsCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallGroupsCreateV1(ctx context.Context, body CallControllerCallGroupsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallGroupsDeleteV1WithBody request with any body
	CallControllerCallGroupsDeleteV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallGroupsDeleteV1(ctx context.Context, body CallControllerCallGroupsDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallGroupsGetV1WithBody request with any body
	CallControllerCallGroupsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallGroupsGetV1(ctx context.Context, body CallControllerCallGroupsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallImagesGetV1WithBody request with any body
	CallControllerCallImagesGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallImagesGetV1(ctx context.Context, body CallControllerCallImagesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallImagesGetManyV1WithBody request with any body
	CallControllerCallImagesGetManyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallImagesGetManyV1(ctx context.Context, body CallControllerCallImagesGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallImagesRepresentationsGetV1WithBody request with any body
	CallControllerCallImagesRepresentationsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallImagesRepresentationsGetV1(ctx context.Context, body CallControllerCallImagesRepresentationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsGetV1WithBody request with any body
	CallControllerCallOperationsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsGetV1(ctx context.Context, body CallControllerCallOperationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsGetManyV1WithBody request with any body
	CallControllerCallOperationsGetManyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsGetManyV1(ctx context.Context, body CallControllerCallOperationsGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsListV1WithBody request with any body
	CallControllerCallOperationsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsListV1(ctx context.Context, body CallControllerCallOperationsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsMetadataUpdateV1WithBody request with any body
	CallControllerCallOperationsMetadataUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsMetadataUpdateV1(ctx context.Context, body CallControllerCallOperationsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunCompositeV1V1WithBody request with any body
	CallControllerCallOperationsRunCompositeV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunCompositeV1V1(ctx context.Context, body CallControllerCallOperationsRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunCropV1V1WithBody request with any body
	CallControllerCallOperationsRunCropV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunCropV1V1(ctx context.Context, body CallControllerCallOperationsRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunCutV1V1WithBody request with any body
	CallControllerCallOperationsRunCutV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunCutV1V1(ctx context.Context, body CallControllerCallOperationsRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunGptV1V1WithBody request with any body
	CallControllerCallOperationsRunGptV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunGptV1V1(ctx context.Context, body CallControllerCallOperationsRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunHauteLindaV1V1WithBody request with any body
	CallControllerCallOperationsRunHauteLindaV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunHauteLindaV1V1(ctx context.Context, body CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunHauteNaomiV1V1WithBody request with any body
	CallControllerCallOperationsRunHauteNaomiV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunHauteNaomiV1V1(ctx context.Context, body CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunImagineKateV1V1WithBody request with any body
	CallControllerCallOperationsRunImagineKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunImagineKateV1V1(ctx context.Context, body CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunInpaintKateV1V1WithBody request with any body
	CallControllerCallOperationsRunInpaintKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunInpaintKateV1V1(ctx context.Context, body CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunNegateImageV1V1WithBody request with any body
	CallControllerCallOperationsRunNegateImageV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunNegateImageV1V1(ctx context.Context, body CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunNoiseV1V1WithBody request with any body
	CallControllerCallOperationsRunNoiseV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunNoiseV1V1(ctx context.Context, body CallControllerCallOperationsRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunObjectDetectionV1V1WithBody request with any body
	CallControllerCallOperationsRunObjectDetectionV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunObjectDetectionV1V1(ctx context.Context, body CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunPoseEstimationV1V1WithBody request with any body
	CallControllerCallOperationsRunPoseEstimationV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunPoseEstimationV1V1(ctx context.Context, body CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBody request with any body
	CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBody request with any body
	CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunSegmentAnythingMaskV1V1(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunUpscaleV1V1WithBody request with any body
	CallControllerCallOperationsRunUpscaleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunUpscaleV1V1(ctx context.Context, body CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsRunVtonGiseleV1V1WithBody request with any body
	CallControllerCallOperationsRunVtonGiseleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsRunVtonGiseleV1V1(ctx context.Context, body CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallOperationsWaitV1WithBody request with any body
	CallControllerCallOperationsWaitV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallOperationsWaitV1(ctx context.Context, body CallControllerCallOperationsWaitV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallPosesGetV1WithBody request with any body
	CallControllerCallPosesGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallPosesGetV1(ctx context.Context, body CallControllerCallPosesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallPosesListV1WithBody request with any body
	CallControllerCallPosesListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallPosesListV1(ctx context.Context, body CallControllerCallPosesListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallPosesPreviewSetV1WithBody request with any body
	CallControllerCallPosesPreviewSetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallPosesPreviewSetV1(ctx context.Context, body CallControllerCallPosesPreviewSetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStacksCreateV1WithBody request with any body
	CallControllerCallStacksCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStacksCreateV1(ctx context.Context, body CallControllerCallStacksCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStacksGetV1WithBody request with any body
	CallControllerCallStacksGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStacksGetV1(ctx context.Context, body CallControllerCallStacksGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStacksItemsAddV1WithBody request with any body
	CallControllerCallStacksItemsAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStacksItemsAddV1(ctx context.Context, body CallControllerCallStacksItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStacksItemsRemoveV1WithBody request with any body
	CallControllerCallStacksItemsRemoveV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStacksItemsRemoveV1(ctx context.Context, body CallControllerCallStacksItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStacksListV1WithBody request with any body
	CallControllerCallStacksListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStacksListV1(ctx context.Context, body CallControllerCallStacksListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStacksMetadataUpdateV1WithBody request with any body
	CallControllerCallStacksMetadataUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStacksMetadataUpdateV1(ctx context.Context, body CallControllerCallStacksMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStorageCreateV1WithBody request with any body
	CallControllerCallStorageCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStorageCreateV1(ctx context.Context, body CallControllerCallStorageCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStorageDeleteV1WithBody request with any body
	CallControllerCallStorageDeleteV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStorageDeleteV1(ctx context.Context, body CallControllerCallStorageDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStorageGetManyV1WithBody request with any body
	CallControllerCallStorageGetManyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStorageGetManyV1(ctx context.Context, body CallControllerCallStorageGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallControllerCallStorageUpdateV1WithBody request with any body
	CallControllerCallStorageUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallControllerCallStorageUpdateV1(ctx context.Context, body CallControllerCallStorageUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerListCollectionsV1 request
	CollectionsControllerListCollectionsV1(ctx context.Context, params *CollectionsControllerListCollectionsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerCreateCollectionV1WithBody request with any body
	CollectionsControllerCreateCollectionV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsControllerCreateCollectionV1(ctx context.Context, body CollectionsControllerCreateCollectionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerGetCollectionV1 request
	CollectionsControllerGetCollectionV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerListItemsV1 request
	CollectionsControllerListItemsV1(ctx context.Context, id string, params *CollectionsControllerListItemsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerAddItemsV1WithBody request with any body
	CollectionsControllerAddItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsControllerAddItemsV1(ctx context.Context, id string, body CollectionsControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerRemoveItemsV1WithBody request with any body
	CollectionsControllerRemoveItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsControllerRemoveItemsV1(ctx context.Context, id string, body CollectionsControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CollectionsControllerUpdateMetadataV1WithBody request with any body
	CollectionsControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CollectionsControllerUpdateMetadataV1(ctx context.Context, id string, body CollectionsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerCreateGroupV1 request
	GroupsControllerCreateGroupV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerDeleteGroupV1 request
	GroupsControllerDeleteGroupV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerGetGroupV1 request
	GroupsControllerGetGroupV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerAddAccountV1WithBody request with any body
	GroupsControllerAddAccountV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsControllerAddAccountV1(ctx context.Context, id string, body GroupsControllerAddAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GroupsControllerRemoveAccountV1WithBody request with any body
	GroupsControllerRemoveAccountV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GroupsControllerRemoveAccountV1(ctx context.Context, id string, body GroupsControllerRemoveAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImagesControllerGetUrlsV1WithBody request with any body
	ImagesControllerGetUrlsV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImagesControllerGetUrlsV1(ctx context.Context, body ImagesControllerGetUrlsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImagesControllerFinalizeUploadV1WithBody request with any body
	ImagesControllerFinalizeUploadV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImagesControllerFinalizeUploadV1(ctx context.Context, body ImagesControllerFinalizeUploadV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImagesControllerStartUploadV1 request
	ImagesControllerStartUploadV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImagesControllerGetImageV1 request
	ImagesControllerGetImageV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImagesControllerGetRepresentationV1 request
	ImagesControllerGetRepresentationV1(ctx context.Context, id string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerListOperationsV1 request
	OperationsControllerListOperationsV1(ctx context.Context, params *OperationsControllerListOperationsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerGetOperationsV1WithBody request with any body
	OperationsControllerGetOperationsV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerGetOperationsV1(ctx context.Context, body OperationsControllerGetOperationsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunCompositeV1V1WithBody request with any body
	OperationsControllerRunCompositeV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunCompositeV1V1(ctx context.Context, body OperationsControllerRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunCropV1V1WithBody request with any body
	OperationsControllerRunCropV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunCropV1V1(ctx context.Context, body OperationsControllerRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunCutV1V1WithBody request with any body
	OperationsControllerRunCutV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunCutV1V1(ctx context.Context, body OperationsControllerRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunGptV1V1WithBody request with any body
	OperationsControllerRunGptV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunGptV1V1(ctx context.Context, body OperationsControllerRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunHauteLindaV1V1WithBody request with any body
	OperationsControllerRunHauteLindaV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunHauteLindaV1V1(ctx context.Context, body OperationsControllerRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunHauteNaomiV1V1WithBody request with any body
	OperationsControllerRunHauteNaomiV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunHauteNaomiV1V1(ctx context.Context, body OperationsControllerRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunImagineKateV1V1WithBody request with any body
	OperationsControllerRunImagineKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunImagineKateV1V1(ctx context.Context, body OperationsControllerRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunInpaintKateV1V1WithBody request with any body
	OperationsControllerRunInpaintKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunInpaintKateV1V1(ctx context.Context, body OperationsControllerRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunNegateImageV1V1WithBody request with any body
	OperationsControllerRunNegateImageV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunNegateImageV1V1(ctx context.Context, body OperationsControllerRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunNoiseV1V1WithBody request with any body
	OperationsControllerRunNoiseV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunNoiseV1V1(ctx context.Context, body OperationsControllerRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunObjectDetectionV1V1WithBody request with any body
	OperationsControllerRunObjectDetectionV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunObjectDetectionV1V1(ctx context.Context, body OperationsControllerRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunPoseEstimationV1V1WithBody request with any body
	OperationsControllerRunPoseEstimationV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunPoseEstimationV1V1(ctx context.Context, body OperationsControllerRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBody request with any body
	OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunSegmentAnythingEmbeddingsV1V1(ctx context.Context, body OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunSegmentAnythingMaskV1V1WithBody request with any body
	OperationsControllerRunSegmentAnythingMaskV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunSegmentAnythingMaskV1V1(ctx context.Context, body OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunUpscaleV1V1WithBody request with any body
	OperationsControllerRunUpscaleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunUpscaleV1V1(ctx context.Context, body OperationsControllerRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerRunVtonGiseleV1V1WithBody request with any body
	OperationsControllerRunVtonGiseleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerRunVtonGiseleV1V1(ctx context.Context, body OperationsControllerRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerGetOperationV1 request
	OperationsControllerGetOperationV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsControllerUpdateMetadataV1WithBody request with any body
	OperationsControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OperationsControllerUpdateMetadataV1(ctx context.Context, id string, body OperationsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PermissionsControllerListAvailablePermissionsV1 request
	PermissionsControllerListAvailablePermissionsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PipelinesControllerListPipelinesV1 request
	PipelinesControllerListPipelinesV1(ctx context.Context, params *PipelinesControllerListPipelinesV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PipelinesControllerCreatePipelineV1WithBody request with any body
	PipelinesControllerCreatePipelineV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PipelinesControllerCreatePipelineV1(ctx context.Context, body PipelinesControllerCreatePipelineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PipelinesControllerGetPipelineV1 request
	PipelinesControllerGetPipelineV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PosesControllerListPosesV1 request
	PosesControllerListPosesV1(ctx context.Context, params *PosesControllerListPosesV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PosesControllerGetPoseV1 request
	PosesControllerGetPoseV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PosesControllerUpdateMetadataV1WithBody request with any body
	PosesControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PosesControllerUpdateMetadataV1(ctx context.Context, id string, body PosesControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PosesControllerSetPosePreviewV1WithBody request with any body
	PosesControllerSetPosePreviewV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PosesControllerSetPosePreviewV1(ctx context.Context, id string, body PosesControllerSetPosePreviewV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControllerAccessV1 request
	AccessControllerAccessV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControllerAttachAccessV1WithBody request with any body
	AccessControllerAttachAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessControllerAttachAccessV1(ctx context.Context, id string, body AccessControllerAttachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControllerDetachAccessV1WithBody request with any body
	AccessControllerDetachAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessControllerDetachAccessV1(ctx context.Context, id string, body AccessControllerDetachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControllerGrantAccessV1WithBody request with any body
	AccessControllerGrantAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessControllerGrantAccessV1(ctx context.Context, id string, body AccessControllerGrantAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccessControllerRevokeAccessV1WithBody request with any body
	AccessControllerRevokeAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccessControllerRevokeAccessV1(ctx context.Context, id string, body AccessControllerRevokeAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StacksControllerListStacksV1 request
	StacksControllerListStacksV1(ctx context.Context, params *StacksControllerListStacksV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StacksControllerCreateStackV1WithBody request with any body
	StacksControllerCreateStackV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StacksControllerCreateStackV1(ctx context.Context, body StacksControllerCreateStackV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StacksControllerGetStackV1 request
	StacksControllerGetStackV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StacksControllerAddItemsV1WithBody request with any body
	StacksControllerAddItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StacksControllerAddItemsV1(ctx context.Context, id string, body StacksControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StacksControllerRemoveItemsV1WithBody request with any body
	StacksControllerRemoveItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StacksControllerRemoveItemsV1(ctx context.Context, id string, body StacksControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StacksControllerUpdateMetadataV1WithBody request with any body
	StacksControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StacksControllerUpdateMetadataV1(ctx context.Context, id string, body StacksControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StorageControllerCreateRecordV1WithBody request with any body
	StorageControllerCreateRecordV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StorageControllerCreateRecordV1(ctx context.Context, body StorageControllerCreateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StorageControllerDeleteRecordV1WithBody request with any body
	StorageControllerDeleteRecordV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StorageControllerDeleteRecordV1(ctx context.Context, body StorageControllerDeleteRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StorageControllerGetRecordsV1WithBody request with any body
	StorageControllerGetRecordsV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StorageControllerGetRecordsV1(ctx context.Context, body StorageControllerGetRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StorageControllerUpdateRecordV1WithBody request with any body
	StorageControllerUpdateRecordV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StorageControllerUpdateRecordV1(ctx context.Context, body StorageControllerUpdateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketControllerRegisterWebsocketV1 request
	WebsocketControllerRegisterWebsocketV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebsocketControllerGetSettingsV1 request
	WebsocketControllerGetSettingsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccountsControllerListAccountsV1(ctx context.Context, params *AccountsControllerListAccountsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsControllerListAccountsV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsControllerCreateAccountV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsControllerCreateAccountV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsControllerCreateAccountV1(ctx context.Context, body AccountsControllerCreateAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsControllerCreateAccountV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsControllerGetAccountByAliasV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsControllerGetAccountByAliasV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsControllerGetSelfV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsControllerGetSelfV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalancesControllerGetBalanceForSelfV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalancesControllerGetBalanceForSelfV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsControllerGetAccountV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsControllerGetAccountV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalancesControllerGetBalanceV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalancesControllerGetBalanceV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalancesControllerAddBalanceV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalancesControllerAddBalanceV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BalancesControllerAddBalanceV1(ctx context.Context, id string, body BalancesControllerAddBalanceV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBalancesControllerAddBalanceV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccessAttachV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccessAttachV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccessAttachV1(ctx context.Context, body CallControllerCallAccessAttachV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccessAttachV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccessGrantV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccessGrantV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccessGrantV1(ctx context.Context, body CallControllerCallAccessGrantV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccessGrantV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsBalanceAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsBalanceAddV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsBalanceAddV1(ctx context.Context, body CallControllerCallAccountsBalanceAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsBalanceAddV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsBalanceGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsBalanceGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsBalanceGetV1(ctx context.Context, body CallControllerCallAccountsBalanceGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsBalanceGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsBalanceSelfV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsBalanceSelfV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsBalanceSelfV1(ctx context.Context, body CallControllerCallAccountsBalanceSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsBalanceSelfV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsCreateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsCreateV1(ctx context.Context, body CallControllerCallAccountsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsCreateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsGetV1(ctx context.Context, body CallControllerCallAccountsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsListV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsListV1(ctx context.Context, body CallControllerCallAccountsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsListV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsSelfV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsSelfV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallAccountsSelfV1(ctx context.Context, body CallControllerCallAccountsSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallAccountsSelfV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsCreateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsCreateV1(ctx context.Context, body CallControllerCallCollectionsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsCreateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsGetV1(ctx context.Context, body CallControllerCallCollectionsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsItemsAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsItemsAddV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsItemsAddV1(ctx context.Context, body CallControllerCallCollectionsItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsItemsAddV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsItemsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsItemsListV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsItemsListV1(ctx context.Context, body CallControllerCallCollectionsItemsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsItemsListV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsItemsRemoveV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsItemsRemoveV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsItemsRemoveV1(ctx context.Context, body CallControllerCallCollectionsItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsItemsRemoveV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsListV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsListV1(ctx context.Context, body CallControllerCallCollectionsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsListV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsMetadataUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsMetadataUpdateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallCollectionsMetadataUpdateV1(ctx context.Context, body CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallCollectionsMetadataUpdateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsAccountsAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsAccountsAddV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsAccountsAddV1(ctx context.Context, body CallControllerCallGroupsAccountsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsAccountsAddV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsAccountsRemoveV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsAccountsRemoveV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsAccountsRemoveV1(ctx context.Context, body CallControllerCallGroupsAccountsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsAccountsRemoveV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsCreateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsCreateV1(ctx context.Context, body CallControllerCallGroupsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsCreateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsDeleteV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsDeleteV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsDeleteV1(ctx context.Context, body CallControllerCallGroupsDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsDeleteV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallGroupsGetV1(ctx context.Context, body CallControllerCallGroupsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallGroupsGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallImagesGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallImagesGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallImagesGetV1(ctx context.Context, body CallControllerCallImagesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallImagesGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallImagesGetManyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallImagesGetManyV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallImagesGetManyV1(ctx context.Context, body CallControllerCallImagesGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallImagesGetManyV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallImagesRepresentationsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallImagesRepresentationsGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallImagesRepresentationsGetV1(ctx context.Context, body CallControllerCallImagesRepresentationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallImagesRepresentationsGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsGetV1(ctx context.Context, body CallControllerCallOperationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsGetManyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsGetManyV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsGetManyV1(ctx context.Context, body CallControllerCallOperationsGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsGetManyV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsListV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsListV1(ctx context.Context, body CallControllerCallOperationsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsListV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsMetadataUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsMetadataUpdateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsMetadataUpdateV1(ctx context.Context, body CallControllerCallOperationsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsMetadataUpdateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunCompositeV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunCompositeV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunCompositeV1V1(ctx context.Context, body CallControllerCallOperationsRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunCompositeV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunCropV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunCropV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunCropV1V1(ctx context.Context, body CallControllerCallOperationsRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunCropV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunCutV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunCutV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunCutV1V1(ctx context.Context, body CallControllerCallOperationsRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunCutV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunGptV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunGptV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunGptV1V1(ctx context.Context, body CallControllerCallOperationsRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunGptV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunHauteLindaV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunHauteLindaV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunHauteLindaV1V1(ctx context.Context, body CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunHauteLindaV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunHauteNaomiV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunHauteNaomiV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunHauteNaomiV1V1(ctx context.Context, body CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunHauteNaomiV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunImagineKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunImagineKateV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunImagineKateV1V1(ctx context.Context, body CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunImagineKateV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunInpaintKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunInpaintKateV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunInpaintKateV1V1(ctx context.Context, body CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunInpaintKateV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunNegateImageV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunNegateImageV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunNegateImageV1V1(ctx context.Context, body CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunNegateImageV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunNoiseV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunNoiseV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunNoiseV1V1(ctx context.Context, body CallControllerCallOperationsRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunNoiseV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunObjectDetectionV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunObjectDetectionV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunObjectDetectionV1V1(ctx context.Context, body CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunObjectDetectionV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunPoseEstimationV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunPoseEstimationV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunPoseEstimationV1V1(ctx context.Context, body CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunPoseEstimationV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunSegmentAnythingMaskV1V1(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunUpscaleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunUpscaleV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunUpscaleV1V1(ctx context.Context, body CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunUpscaleV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunVtonGiseleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunVtonGiseleV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsRunVtonGiseleV1V1(ctx context.Context, body CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsRunVtonGiseleV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsWaitV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsWaitV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallOperationsWaitV1(ctx context.Context, body CallControllerCallOperationsWaitV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallOperationsWaitV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallPosesGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallPosesGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallPosesGetV1(ctx context.Context, body CallControllerCallPosesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallPosesGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallPosesListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallPosesListV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallPosesListV1(ctx context.Context, body CallControllerCallPosesListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallPosesListV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallPosesPreviewSetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallPosesPreviewSetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallPosesPreviewSetV1(ctx context.Context, body CallControllerCallPosesPreviewSetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallPosesPreviewSetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksCreateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksCreateV1(ctx context.Context, body CallControllerCallStacksCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksCreateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksGetV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksGetV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksGetV1(ctx context.Context, body CallControllerCallStacksGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksGetV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksItemsAddV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksItemsAddV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksItemsAddV1(ctx context.Context, body CallControllerCallStacksItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksItemsAddV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksItemsRemoveV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksItemsRemoveV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksItemsRemoveV1(ctx context.Context, body CallControllerCallStacksItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksItemsRemoveV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksListV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksListV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksListV1(ctx context.Context, body CallControllerCallStacksListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksListV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksMetadataUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksMetadataUpdateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStacksMetadataUpdateV1(ctx context.Context, body CallControllerCallStacksMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStacksMetadataUpdateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageCreateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageCreateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageCreateV1(ctx context.Context, body CallControllerCallStorageCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageCreateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageDeleteV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageDeleteV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageDeleteV1(ctx context.Context, body CallControllerCallStorageDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageDeleteV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageGetManyV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageGetManyV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageGetManyV1(ctx context.Context, body CallControllerCallStorageGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageGetManyV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageUpdateV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageUpdateV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallControllerCallStorageUpdateV1(ctx context.Context, body CallControllerCallStorageUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallControllerCallStorageUpdateV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerListCollectionsV1(ctx context.Context, params *CollectionsControllerListCollectionsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerListCollectionsV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerCreateCollectionV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerCreateCollectionV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerCreateCollectionV1(ctx context.Context, body CollectionsControllerCreateCollectionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerCreateCollectionV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerGetCollectionV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerGetCollectionV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerListItemsV1(ctx context.Context, id string, params *CollectionsControllerListItemsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerListItemsV1Request(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerAddItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerAddItemsV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerAddItemsV1(ctx context.Context, id string, body CollectionsControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerAddItemsV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerRemoveItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerRemoveItemsV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerRemoveItemsV1(ctx context.Context, id string, body CollectionsControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerRemoveItemsV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerUpdateMetadataV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CollectionsControllerUpdateMetadataV1(ctx context.Context, id string, body CollectionsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCollectionsControllerUpdateMetadataV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerCreateGroupV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerCreateGroupV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerDeleteGroupV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerDeleteGroupV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerGetGroupV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerGetGroupV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerAddAccountV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerAddAccountV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerAddAccountV1(ctx context.Context, id string, body GroupsControllerAddAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerAddAccountV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerRemoveAccountV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerRemoveAccountV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GroupsControllerRemoveAccountV1(ctx context.Context, id string, body GroupsControllerRemoveAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGroupsControllerRemoveAccountV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerGetUrlsV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerGetUrlsV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerGetUrlsV1(ctx context.Context, body ImagesControllerGetUrlsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerGetUrlsV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerFinalizeUploadV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerFinalizeUploadV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerFinalizeUploadV1(ctx context.Context, body ImagesControllerFinalizeUploadV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerFinalizeUploadV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerStartUploadV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerStartUploadV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerGetImageV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerGetImageV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImagesControllerGetRepresentationV1(ctx context.Context, id string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImagesControllerGetRepresentationV1Request(c.Server, id, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerListOperationsV1(ctx context.Context, params *OperationsControllerListOperationsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerListOperationsV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerGetOperationsV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerGetOperationsV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerGetOperationsV1(ctx context.Context, body OperationsControllerGetOperationsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerGetOperationsV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunCompositeV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunCompositeV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunCompositeV1V1(ctx context.Context, body OperationsControllerRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunCompositeV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunCropV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunCropV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunCropV1V1(ctx context.Context, body OperationsControllerRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunCropV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunCutV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunCutV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunCutV1V1(ctx context.Context, body OperationsControllerRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunCutV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunGptV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunGptV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunGptV1V1(ctx context.Context, body OperationsControllerRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunGptV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunHauteLindaV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunHauteLindaV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunHauteLindaV1V1(ctx context.Context, body OperationsControllerRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunHauteLindaV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunHauteNaomiV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunHauteNaomiV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunHauteNaomiV1V1(ctx context.Context, body OperationsControllerRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunHauteNaomiV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunImagineKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunImagineKateV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunImagineKateV1V1(ctx context.Context, body OperationsControllerRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunImagineKateV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunInpaintKateV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunInpaintKateV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunInpaintKateV1V1(ctx context.Context, body OperationsControllerRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunInpaintKateV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunNegateImageV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunNegateImageV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunNegateImageV1V1(ctx context.Context, body OperationsControllerRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunNegateImageV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunNoiseV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunNoiseV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunNoiseV1V1(ctx context.Context, body OperationsControllerRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunNoiseV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunObjectDetectionV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunObjectDetectionV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunObjectDetectionV1V1(ctx context.Context, body OperationsControllerRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunObjectDetectionV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunPoseEstimationV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunPoseEstimationV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunPoseEstimationV1V1(ctx context.Context, body OperationsControllerRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunPoseEstimationV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunSegmentAnythingEmbeddingsV1V1(ctx context.Context, body OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunSegmentAnythingMaskV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunSegmentAnythingMaskV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunSegmentAnythingMaskV1V1(ctx context.Context, body OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunSegmentAnythingMaskV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunUpscaleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunUpscaleV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunUpscaleV1V1(ctx context.Context, body OperationsControllerRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunUpscaleV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunVtonGiseleV1V1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunVtonGiseleV1V1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerRunVtonGiseleV1V1(ctx context.Context, body OperationsControllerRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerRunVtonGiseleV1V1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerGetOperationV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerGetOperationV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerUpdateMetadataV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsControllerUpdateMetadataV1(ctx context.Context, id string, body OperationsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsControllerUpdateMetadataV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PermissionsControllerListAvailablePermissionsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsControllerListAvailablePermissionsV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelinesControllerListPipelinesV1(ctx context.Context, params *PipelinesControllerListPipelinesV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelinesControllerListPipelinesV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelinesControllerCreatePipelineV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelinesControllerCreatePipelineV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelinesControllerCreatePipelineV1(ctx context.Context, body PipelinesControllerCreatePipelineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelinesControllerCreatePipelineV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PipelinesControllerGetPipelineV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPipelinesControllerGetPipelineV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PosesControllerListPosesV1(ctx context.Context, params *PosesControllerListPosesV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPosesControllerListPosesV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PosesControllerGetPoseV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPosesControllerGetPoseV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PosesControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPosesControllerUpdateMetadataV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PosesControllerUpdateMetadataV1(ctx context.Context, id string, body PosesControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPosesControllerUpdateMetadataV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PosesControllerSetPosePreviewV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPosesControllerSetPosePreviewV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PosesControllerSetPosePreviewV1(ctx context.Context, id string, body PosesControllerSetPosePreviewV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPosesControllerSetPosePreviewV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerAccessV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerAccessV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerAttachAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerAttachAccessV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerAttachAccessV1(ctx context.Context, id string, body AccessControllerAttachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerAttachAccessV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerDetachAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerDetachAccessV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerDetachAccessV1(ctx context.Context, id string, body AccessControllerDetachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerDetachAccessV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerGrantAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerGrantAccessV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerGrantAccessV1(ctx context.Context, id string, body AccessControllerGrantAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerGrantAccessV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerRevokeAccessV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerRevokeAccessV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccessControllerRevokeAccessV1(ctx context.Context, id string, body AccessControllerRevokeAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccessControllerRevokeAccessV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerListStacksV1(ctx context.Context, params *StacksControllerListStacksV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerListStacksV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerCreateStackV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerCreateStackV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerCreateStackV1(ctx context.Context, body StacksControllerCreateStackV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerCreateStackV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerGetStackV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerGetStackV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerAddItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerAddItemsV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerAddItemsV1(ctx context.Context, id string, body StacksControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerAddItemsV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerRemoveItemsV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerRemoveItemsV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerRemoveItemsV1(ctx context.Context, id string, body StacksControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerRemoveItemsV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerUpdateMetadataV1WithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerUpdateMetadataV1RequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StacksControllerUpdateMetadataV1(ctx context.Context, id string, body StacksControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStacksControllerUpdateMetadataV1Request(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerCreateRecordV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerCreateRecordV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerCreateRecordV1(ctx context.Context, body StorageControllerCreateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerCreateRecordV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerDeleteRecordV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerDeleteRecordV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerDeleteRecordV1(ctx context.Context, body StorageControllerDeleteRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerDeleteRecordV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerGetRecordsV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerGetRecordsV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerGetRecordsV1(ctx context.Context, body StorageControllerGetRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerGetRecordsV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerUpdateRecordV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerUpdateRecordV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StorageControllerUpdateRecordV1(ctx context.Context, body StorageControllerUpdateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStorageControllerUpdateRecordV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketControllerRegisterWebsocketV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketControllerRegisterWebsocketV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebsocketControllerGetSettingsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebsocketControllerGetSettingsV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccountsControllerListAccountsV1Request generates requests for AccountsControllerListAccountsV1
func NewAccountsControllerListAccountsV1Request(server string, params *AccountsControllerListAccountsV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsControllerCreateAccountV1Request calls the generic AccountsControllerCreateAccountV1 builder with application/json body
func NewAccountsControllerCreateAccountV1Request(server string, body AccountsControllerCreateAccountV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsControllerCreateAccountV1RequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsControllerCreateAccountV1RequestWithBody generates requests for AccountsControllerCreateAccountV1 with any type of body
func NewAccountsControllerCreateAccountV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsControllerGetAccountByAliasV1Request generates requests for AccountsControllerGetAccountByAliasV1
func NewAccountsControllerGetAccountByAliasV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/alias/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsControllerGetSelfV1Request generates requests for AccountsControllerGetSelfV1
func NewAccountsControllerGetSelfV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalancesControllerGetBalanceForSelfV1Request generates requests for BalancesControllerGetBalanceForSelfV1
func NewBalancesControllerGetBalanceForSelfV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/self/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsControllerGetAccountV1Request generates requests for AccountsControllerGetAccountV1
func NewAccountsControllerGetAccountV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalancesControllerGetBalanceV1Request generates requests for BalancesControllerGetBalanceV1
func NewBalancesControllerGetBalanceV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBalancesControllerAddBalanceV1Request calls the generic BalancesControllerAddBalanceV1 builder with application/json body
func NewBalancesControllerAddBalanceV1Request(server string, id string, body BalancesControllerAddBalanceV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBalancesControllerAddBalanceV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewBalancesControllerAddBalanceV1RequestWithBody generates requests for BalancesControllerAddBalanceV1 with any type of body
func NewBalancesControllerAddBalanceV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccessAttachV1Request calls the generic CallControllerCallAccessAttachV1 builder with application/json body
func NewCallControllerCallAccessAttachV1Request(server string, body CallControllerCallAccessAttachV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccessAttachV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccessAttachV1RequestWithBody generates requests for CallControllerCallAccessAttachV1 with any type of body
func NewCallControllerCallAccessAttachV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/access.attach")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccessGrantV1Request calls the generic CallControllerCallAccessGrantV1 builder with application/json body
func NewCallControllerCallAccessGrantV1Request(server string, body CallControllerCallAccessGrantV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccessGrantV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccessGrantV1RequestWithBody generates requests for CallControllerCallAccessGrantV1 with any type of body
func NewCallControllerCallAccessGrantV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/access.grant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsBalanceAddV1Request calls the generic CallControllerCallAccountsBalanceAddV1 builder with application/json body
func NewCallControllerCallAccountsBalanceAddV1Request(server string, body CallControllerCallAccountsBalanceAddV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsBalanceAddV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsBalanceAddV1RequestWithBody generates requests for CallControllerCallAccountsBalanceAddV1 with any type of body
func NewCallControllerCallAccountsBalanceAddV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.balance.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsBalanceGetV1Request calls the generic CallControllerCallAccountsBalanceGetV1 builder with application/json body
func NewCallControllerCallAccountsBalanceGetV1Request(server string, body CallControllerCallAccountsBalanceGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsBalanceGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsBalanceGetV1RequestWithBody generates requests for CallControllerCallAccountsBalanceGetV1 with any type of body
func NewCallControllerCallAccountsBalanceGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.balance.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsBalanceSelfV1Request calls the generic CallControllerCallAccountsBalanceSelfV1 builder with application/json body
func NewCallControllerCallAccountsBalanceSelfV1Request(server string, body CallControllerCallAccountsBalanceSelfV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsBalanceSelfV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsBalanceSelfV1RequestWithBody generates requests for CallControllerCallAccountsBalanceSelfV1 with any type of body
func NewCallControllerCallAccountsBalanceSelfV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.balance.self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsCreateV1Request calls the generic CallControllerCallAccountsCreateV1 builder with application/json body
func NewCallControllerCallAccountsCreateV1Request(server string, body CallControllerCallAccountsCreateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsCreateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsCreateV1RequestWithBody generates requests for CallControllerCallAccountsCreateV1 with any type of body
func NewCallControllerCallAccountsCreateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsGetV1Request calls the generic CallControllerCallAccountsGetV1 builder with application/json body
func NewCallControllerCallAccountsGetV1Request(server string, body CallControllerCallAccountsGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsGetV1RequestWithBody generates requests for CallControllerCallAccountsGetV1 with any type of body
func NewCallControllerCallAccountsGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsListV1Request calls the generic CallControllerCallAccountsListV1 builder with application/json body
func NewCallControllerCallAccountsListV1Request(server string, body CallControllerCallAccountsListV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsListV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsListV1RequestWithBody generates requests for CallControllerCallAccountsListV1 with any type of body
func NewCallControllerCallAccountsListV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallAccountsSelfV1Request calls the generic CallControllerCallAccountsSelfV1 builder with application/json body
func NewCallControllerCallAccountsSelfV1Request(server string, body CallControllerCallAccountsSelfV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallAccountsSelfV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallAccountsSelfV1RequestWithBody generates requests for CallControllerCallAccountsSelfV1 with any type of body
func NewCallControllerCallAccountsSelfV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/accounts.self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsCreateV1Request calls the generic CallControllerCallCollectionsCreateV1 builder with application/json body
func NewCallControllerCallCollectionsCreateV1Request(server string, body CallControllerCallCollectionsCreateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsCreateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsCreateV1RequestWithBody generates requests for CallControllerCallCollectionsCreateV1 with any type of body
func NewCallControllerCallCollectionsCreateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsGetV1Request calls the generic CallControllerCallCollectionsGetV1 builder with application/json body
func NewCallControllerCallCollectionsGetV1Request(server string, body CallControllerCallCollectionsGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsGetV1RequestWithBody generates requests for CallControllerCallCollectionsGetV1 with any type of body
func NewCallControllerCallCollectionsGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsItemsAddV1Request calls the generic CallControllerCallCollectionsItemsAddV1 builder with application/json body
func NewCallControllerCallCollectionsItemsAddV1Request(server string, body CallControllerCallCollectionsItemsAddV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsItemsAddV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsItemsAddV1RequestWithBody generates requests for CallControllerCallCollectionsItemsAddV1 with any type of body
func NewCallControllerCallCollectionsItemsAddV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.items.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsItemsListV1Request calls the generic CallControllerCallCollectionsItemsListV1 builder with application/json body
func NewCallControllerCallCollectionsItemsListV1Request(server string, body CallControllerCallCollectionsItemsListV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsItemsListV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsItemsListV1RequestWithBody generates requests for CallControllerCallCollectionsItemsListV1 with any type of body
func NewCallControllerCallCollectionsItemsListV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.items.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsItemsRemoveV1Request calls the generic CallControllerCallCollectionsItemsRemoveV1 builder with application/json body
func NewCallControllerCallCollectionsItemsRemoveV1Request(server string, body CallControllerCallCollectionsItemsRemoveV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsItemsRemoveV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsItemsRemoveV1RequestWithBody generates requests for CallControllerCallCollectionsItemsRemoveV1 with any type of body
func NewCallControllerCallCollectionsItemsRemoveV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.items.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsListV1Request calls the generic CallControllerCallCollectionsListV1 builder with application/json body
func NewCallControllerCallCollectionsListV1Request(server string, body CallControllerCallCollectionsListV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsListV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsListV1RequestWithBody generates requests for CallControllerCallCollectionsListV1 with any type of body
func NewCallControllerCallCollectionsListV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallCollectionsMetadataUpdateV1Request calls the generic CallControllerCallCollectionsMetadataUpdateV1 builder with application/json body
func NewCallControllerCallCollectionsMetadataUpdateV1Request(server string, body CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallCollectionsMetadataUpdateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallCollectionsMetadataUpdateV1RequestWithBody generates requests for CallControllerCallCollectionsMetadataUpdateV1 with any type of body
func NewCallControllerCallCollectionsMetadataUpdateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/collections.metadata.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallGroupsAccountsAddV1Request calls the generic CallControllerCallGroupsAccountsAddV1 builder with application/json body
func NewCallControllerCallGroupsAccountsAddV1Request(server string, body CallControllerCallGroupsAccountsAddV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallGroupsAccountsAddV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallGroupsAccountsAddV1RequestWithBody generates requests for CallControllerCallGroupsAccountsAddV1 with any type of body
func NewCallControllerCallGroupsAccountsAddV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/groups.accounts.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallGroupsAccountsRemoveV1Request calls the generic CallControllerCallGroupsAccountsRemoveV1 builder with application/json body
func NewCallControllerCallGroupsAccountsRemoveV1Request(server string, body CallControllerCallGroupsAccountsRemoveV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallGroupsAccountsRemoveV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallGroupsAccountsRemoveV1RequestWithBody generates requests for CallControllerCallGroupsAccountsRemoveV1 with any type of body
func NewCallControllerCallGroupsAccountsRemoveV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/groups.accounts.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallGroupsCreateV1Request calls the generic CallControllerCallGroupsCreateV1 builder with application/json body
func NewCallControllerCallGroupsCreateV1Request(server string, body CallControllerCallGroupsCreateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallGroupsCreateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallGroupsCreateV1RequestWithBody generates requests for CallControllerCallGroupsCreateV1 with any type of body
func NewCallControllerCallGroupsCreateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/groups.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallGroupsDeleteV1Request calls the generic CallControllerCallGroupsDeleteV1 builder with application/json body
func NewCallControllerCallGroupsDeleteV1Request(server string, body CallControllerCallGroupsDeleteV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallGroupsDeleteV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallGroupsDeleteV1RequestWithBody generates requests for CallControllerCallGroupsDeleteV1 with any type of body
func NewCallControllerCallGroupsDeleteV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/groups.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallGroupsGetV1Request calls the generic CallControllerCallGroupsGetV1 builder with application/json body
func NewCallControllerCallGroupsGetV1Request(server string, body CallControllerCallGroupsGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallGroupsGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallGroupsGetV1RequestWithBody generates requests for CallControllerCallGroupsGetV1 with any type of body
func NewCallControllerCallGroupsGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/groups.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallImagesGetV1Request calls the generic CallControllerCallImagesGetV1 builder with application/json body
func NewCallControllerCallImagesGetV1Request(server string, body CallControllerCallImagesGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallImagesGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallImagesGetV1RequestWithBody generates requests for CallControllerCallImagesGetV1 with any type of body
func NewCallControllerCallImagesGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/images.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallImagesGetManyV1Request calls the generic CallControllerCallImagesGetManyV1 builder with application/json body
func NewCallControllerCallImagesGetManyV1Request(server string, body CallControllerCallImagesGetManyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallImagesGetManyV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallImagesGetManyV1RequestWithBody generates requests for CallControllerCallImagesGetManyV1 with any type of body
func NewCallControllerCallImagesGetManyV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/images.getMany")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallImagesRepresentationsGetV1Request calls the generic CallControllerCallImagesRepresentationsGetV1 builder with application/json body
func NewCallControllerCallImagesRepresentationsGetV1Request(server string, body CallControllerCallImagesRepresentationsGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallImagesRepresentationsGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallImagesRepresentationsGetV1RequestWithBody generates requests for CallControllerCallImagesRepresentationsGetV1 with any type of body
func NewCallControllerCallImagesRepresentationsGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/images.representations.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsGetV1Request calls the generic CallControllerCallOperationsGetV1 builder with application/json body
func NewCallControllerCallOperationsGetV1Request(server string, body CallControllerCallOperationsGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsGetV1RequestWithBody generates requests for CallControllerCallOperationsGetV1 with any type of body
func NewCallControllerCallOperationsGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsGetManyV1Request calls the generic CallControllerCallOperationsGetManyV1 builder with application/json body
func NewCallControllerCallOperationsGetManyV1Request(server string, body CallControllerCallOperationsGetManyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsGetManyV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsGetManyV1RequestWithBody generates requests for CallControllerCallOperationsGetManyV1 with any type of body
func NewCallControllerCallOperationsGetManyV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.getMany")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsListV1Request calls the generic CallControllerCallOperationsListV1 builder with application/json body
func NewCallControllerCallOperationsListV1Request(server string, body CallControllerCallOperationsListV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsListV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsListV1RequestWithBody generates requests for CallControllerCallOperationsListV1 with any type of body
func NewCallControllerCallOperationsListV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsMetadataUpdateV1Request calls the generic CallControllerCallOperationsMetadataUpdateV1 builder with application/json body
func NewCallControllerCallOperationsMetadataUpdateV1Request(server string, body CallControllerCallOperationsMetadataUpdateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsMetadataUpdateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsMetadataUpdateV1RequestWithBody generates requests for CallControllerCallOperationsMetadataUpdateV1 with any type of body
func NewCallControllerCallOperationsMetadataUpdateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.metadata.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunCompositeV1V1Request calls the generic CallControllerCallOperationsRunCompositeV1V1 builder with application/json body
func NewCallControllerCallOperationsRunCompositeV1V1Request(server string, body CallControllerCallOperationsRunCompositeV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunCompositeV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunCompositeV1V1RequestWithBody generates requests for CallControllerCallOperationsRunCompositeV1V1 with any type of body
func NewCallControllerCallOperationsRunCompositeV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.composite.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunCropV1V1Request calls the generic CallControllerCallOperationsRunCropV1V1 builder with application/json body
func NewCallControllerCallOperationsRunCropV1V1Request(server string, body CallControllerCallOperationsRunCropV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunCropV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunCropV1V1RequestWithBody generates requests for CallControllerCallOperationsRunCropV1V1 with any type of body
func NewCallControllerCallOperationsRunCropV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.crop.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunCutV1V1Request calls the generic CallControllerCallOperationsRunCutV1V1 builder with application/json body
func NewCallControllerCallOperationsRunCutV1V1Request(server string, body CallControllerCallOperationsRunCutV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunCutV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunCutV1V1RequestWithBody generates requests for CallControllerCallOperationsRunCutV1V1 with any type of body
func NewCallControllerCallOperationsRunCutV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.cut.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunGptV1V1Request calls the generic CallControllerCallOperationsRunGptV1V1 builder with application/json body
func NewCallControllerCallOperationsRunGptV1V1Request(server string, body CallControllerCallOperationsRunGptV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunGptV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunGptV1V1RequestWithBody generates requests for CallControllerCallOperationsRunGptV1V1 with any type of body
func NewCallControllerCallOperationsRunGptV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.gpt.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunHauteLindaV1V1Request calls the generic CallControllerCallOperationsRunHauteLindaV1V1 builder with application/json body
func NewCallControllerCallOperationsRunHauteLindaV1V1Request(server string, body CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunHauteLindaV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunHauteLindaV1V1RequestWithBody generates requests for CallControllerCallOperationsRunHauteLindaV1V1 with any type of body
func NewCallControllerCallOperationsRunHauteLindaV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.haute.linda.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunHauteNaomiV1V1Request calls the generic CallControllerCallOperationsRunHauteNaomiV1V1 builder with application/json body
func NewCallControllerCallOperationsRunHauteNaomiV1V1Request(server string, body CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunHauteNaomiV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunHauteNaomiV1V1RequestWithBody generates requests for CallControllerCallOperationsRunHauteNaomiV1V1 with any type of body
func NewCallControllerCallOperationsRunHauteNaomiV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.haute.naomi.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunImagineKateV1V1Request calls the generic CallControllerCallOperationsRunImagineKateV1V1 builder with application/json body
func NewCallControllerCallOperationsRunImagineKateV1V1Request(server string, body CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunImagineKateV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunImagineKateV1V1RequestWithBody generates requests for CallControllerCallOperationsRunImagineKateV1V1 with any type of body
func NewCallControllerCallOperationsRunImagineKateV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.imagine.kate.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunInpaintKateV1V1Request calls the generic CallControllerCallOperationsRunInpaintKateV1V1 builder with application/json body
func NewCallControllerCallOperationsRunInpaintKateV1V1Request(server string, body CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunInpaintKateV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunInpaintKateV1V1RequestWithBody generates requests for CallControllerCallOperationsRunInpaintKateV1V1 with any type of body
func NewCallControllerCallOperationsRunInpaintKateV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.inpaint.kate.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunNegateImageV1V1Request calls the generic CallControllerCallOperationsRunNegateImageV1V1 builder with application/json body
func NewCallControllerCallOperationsRunNegateImageV1V1Request(server string, body CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunNegateImageV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunNegateImageV1V1RequestWithBody generates requests for CallControllerCallOperationsRunNegateImageV1V1 with any type of body
func NewCallControllerCallOperationsRunNegateImageV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.negateImage.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunNoiseV1V1Request calls the generic CallControllerCallOperationsRunNoiseV1V1 builder with application/json body
func NewCallControllerCallOperationsRunNoiseV1V1Request(server string, body CallControllerCallOperationsRunNoiseV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunNoiseV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunNoiseV1V1RequestWithBody generates requests for CallControllerCallOperationsRunNoiseV1V1 with any type of body
func NewCallControllerCallOperationsRunNoiseV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.noise.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunObjectDetectionV1V1Request calls the generic CallControllerCallOperationsRunObjectDetectionV1V1 builder with application/json body
func NewCallControllerCallOperationsRunObjectDetectionV1V1Request(server string, body CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunObjectDetectionV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunObjectDetectionV1V1RequestWithBody generates requests for CallControllerCallOperationsRunObjectDetectionV1V1 with any type of body
func NewCallControllerCallOperationsRunObjectDetectionV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.objectDetection.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunPoseEstimationV1V1Request calls the generic CallControllerCallOperationsRunPoseEstimationV1V1 builder with application/json body
func NewCallControllerCallOperationsRunPoseEstimationV1V1Request(server string, body CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunPoseEstimationV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunPoseEstimationV1V1RequestWithBody generates requests for CallControllerCallOperationsRunPoseEstimationV1V1 with any type of body
func NewCallControllerCallOperationsRunPoseEstimationV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.poseEstimation.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Request calls the generic CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1 builder with application/json body
func NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Request(server string, body CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1RequestWithBody generates requests for CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1 with any type of body
func NewCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.segmentAnything.embeddings.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1Request calls the generic CallControllerCallOperationsRunSegmentAnythingMaskV1V1 builder with application/json body
func NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1Request(server string, body CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1RequestWithBody generates requests for CallControllerCallOperationsRunSegmentAnythingMaskV1V1 with any type of body
func NewCallControllerCallOperationsRunSegmentAnythingMaskV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.segmentAnything.mask.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunUpscaleV1V1Request calls the generic CallControllerCallOperationsRunUpscaleV1V1 builder with application/json body
func NewCallControllerCallOperationsRunUpscaleV1V1Request(server string, body CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunUpscaleV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunUpscaleV1V1RequestWithBody generates requests for CallControllerCallOperationsRunUpscaleV1V1 with any type of body
func NewCallControllerCallOperationsRunUpscaleV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.upscale.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsRunVtonGiseleV1V1Request calls the generic CallControllerCallOperationsRunVtonGiseleV1V1 builder with application/json body
func NewCallControllerCallOperationsRunVtonGiseleV1V1Request(server string, body CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsRunVtonGiseleV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsRunVtonGiseleV1V1RequestWithBody generates requests for CallControllerCallOperationsRunVtonGiseleV1V1 with any type of body
func NewCallControllerCallOperationsRunVtonGiseleV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.run.vton.gisele.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallOperationsWaitV1Request calls the generic CallControllerCallOperationsWaitV1 builder with application/json body
func NewCallControllerCallOperationsWaitV1Request(server string, body CallControllerCallOperationsWaitV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallOperationsWaitV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallOperationsWaitV1RequestWithBody generates requests for CallControllerCallOperationsWaitV1 with any type of body
func NewCallControllerCallOperationsWaitV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/operations.wait")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallPosesGetV1Request calls the generic CallControllerCallPosesGetV1 builder with application/json body
func NewCallControllerCallPosesGetV1Request(server string, body CallControllerCallPosesGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallPosesGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallPosesGetV1RequestWithBody generates requests for CallControllerCallPosesGetV1 with any type of body
func NewCallControllerCallPosesGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/poses.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallPosesListV1Request calls the generic CallControllerCallPosesListV1 builder with application/json body
func NewCallControllerCallPosesListV1Request(server string, body CallControllerCallPosesListV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallPosesListV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallPosesListV1RequestWithBody generates requests for CallControllerCallPosesListV1 with any type of body
func NewCallControllerCallPosesListV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/poses.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallPosesPreviewSetV1Request calls the generic CallControllerCallPosesPreviewSetV1 builder with application/json body
func NewCallControllerCallPosesPreviewSetV1Request(server string, body CallControllerCallPosesPreviewSetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallPosesPreviewSetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallPosesPreviewSetV1RequestWithBody generates requests for CallControllerCallPosesPreviewSetV1 with any type of body
func NewCallControllerCallPosesPreviewSetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/poses.preview.set")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStacksCreateV1Request calls the generic CallControllerCallStacksCreateV1 builder with application/json body
func NewCallControllerCallStacksCreateV1Request(server string, body CallControllerCallStacksCreateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStacksCreateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStacksCreateV1RequestWithBody generates requests for CallControllerCallStacksCreateV1 with any type of body
func NewCallControllerCallStacksCreateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/stacks.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStacksGetV1Request calls the generic CallControllerCallStacksGetV1 builder with application/json body
func NewCallControllerCallStacksGetV1Request(server string, body CallControllerCallStacksGetV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStacksGetV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStacksGetV1RequestWithBody generates requests for CallControllerCallStacksGetV1 with any type of body
func NewCallControllerCallStacksGetV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/stacks.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStacksItemsAddV1Request calls the generic CallControllerCallStacksItemsAddV1 builder with application/json body
func NewCallControllerCallStacksItemsAddV1Request(server string, body CallControllerCallStacksItemsAddV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStacksItemsAddV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStacksItemsAddV1RequestWithBody generates requests for CallControllerCallStacksItemsAddV1 with any type of body
func NewCallControllerCallStacksItemsAddV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/stacks.items.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStacksItemsRemoveV1Request calls the generic CallControllerCallStacksItemsRemoveV1 builder with application/json body
func NewCallControllerCallStacksItemsRemoveV1Request(server string, body CallControllerCallStacksItemsRemoveV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStacksItemsRemoveV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStacksItemsRemoveV1RequestWithBody generates requests for CallControllerCallStacksItemsRemoveV1 with any type of body
func NewCallControllerCallStacksItemsRemoveV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/stacks.items.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStacksListV1Request calls the generic CallControllerCallStacksListV1 builder with application/json body
func NewCallControllerCallStacksListV1Request(server string, body CallControllerCallStacksListV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStacksListV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStacksListV1RequestWithBody generates requests for CallControllerCallStacksListV1 with any type of body
func NewCallControllerCallStacksListV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/stacks.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStacksMetadataUpdateV1Request calls the generic CallControllerCallStacksMetadataUpdateV1 builder with application/json body
func NewCallControllerCallStacksMetadataUpdateV1Request(server string, body CallControllerCallStacksMetadataUpdateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStacksMetadataUpdateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStacksMetadataUpdateV1RequestWithBody generates requests for CallControllerCallStacksMetadataUpdateV1 with any type of body
func NewCallControllerCallStacksMetadataUpdateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/stacks.metadata.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStorageCreateV1Request calls the generic CallControllerCallStorageCreateV1 builder with application/json body
func NewCallControllerCallStorageCreateV1Request(server string, body CallControllerCallStorageCreateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStorageCreateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStorageCreateV1RequestWithBody generates requests for CallControllerCallStorageCreateV1 with any type of body
func NewCallControllerCallStorageCreateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/storage.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStorageDeleteV1Request calls the generic CallControllerCallStorageDeleteV1 builder with application/json body
func NewCallControllerCallStorageDeleteV1Request(server string, body CallControllerCallStorageDeleteV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStorageDeleteV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStorageDeleteV1RequestWithBody generates requests for CallControllerCallStorageDeleteV1 with any type of body
func NewCallControllerCallStorageDeleteV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/storage.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStorageGetManyV1Request calls the generic CallControllerCallStorageGetManyV1 builder with application/json body
func NewCallControllerCallStorageGetManyV1Request(server string, body CallControllerCallStorageGetManyV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStorageGetManyV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStorageGetManyV1RequestWithBody generates requests for CallControllerCallStorageGetManyV1 with any type of body
func NewCallControllerCallStorageGetManyV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/storage.getMany")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCallControllerCallStorageUpdateV1Request calls the generic CallControllerCallStorageUpdateV1 builder with application/json body
func NewCallControllerCallStorageUpdateV1Request(server string, body CallControllerCallStorageUpdateV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallControllerCallStorageUpdateV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCallControllerCallStorageUpdateV1RequestWithBody generates requests for CallControllerCallStorageUpdateV1 with any type of body
func NewCallControllerCallStorageUpdateV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/call/storage.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionsControllerListCollectionsV1Request generates requests for CollectionsControllerListCollectionsV1
func NewCollectionsControllerListCollectionsV1Request(server string, params *CollectionsControllerListCollectionsV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionsControllerCreateCollectionV1Request calls the generic CollectionsControllerCreateCollectionV1 builder with application/json body
func NewCollectionsControllerCreateCollectionV1Request(server string, body CollectionsControllerCreateCollectionV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsControllerCreateCollectionV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCollectionsControllerCreateCollectionV1RequestWithBody generates requests for CollectionsControllerCreateCollectionV1 with any type of body
func NewCollectionsControllerCreateCollectionV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionsControllerGetCollectionV1Request generates requests for CollectionsControllerGetCollectionV1
func NewCollectionsControllerGetCollectionV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionsControllerListItemsV1Request generates requests for CollectionsControllerListItemsV1
func NewCollectionsControllerListItemsV1Request(server string, id string, params *CollectionsControllerListItemsV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Kind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCollectionsControllerAddItemsV1Request calls the generic CollectionsControllerAddItemsV1 builder with application/json body
func NewCollectionsControllerAddItemsV1Request(server string, id string, body CollectionsControllerAddItemsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsControllerAddItemsV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewCollectionsControllerAddItemsV1RequestWithBody generates requests for CollectionsControllerAddItemsV1 with any type of body
func NewCollectionsControllerAddItemsV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/items/add", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionsControllerRemoveItemsV1Request calls the generic CollectionsControllerRemoveItemsV1 builder with application/json body
func NewCollectionsControllerRemoveItemsV1Request(server string, id string, body CollectionsControllerRemoveItemsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsControllerRemoveItemsV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewCollectionsControllerRemoveItemsV1RequestWithBody generates requests for CollectionsControllerRemoveItemsV1 with any type of body
func NewCollectionsControllerRemoveItemsV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/items/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCollectionsControllerUpdateMetadataV1Request calls the generic CollectionsControllerUpdateMetadataV1 builder with application/json body
func NewCollectionsControllerUpdateMetadataV1Request(server string, id string, body CollectionsControllerUpdateMetadataV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCollectionsControllerUpdateMetadataV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewCollectionsControllerUpdateMetadataV1RequestWithBody generates requests for CollectionsControllerUpdateMetadataV1 with any type of body
func NewCollectionsControllerUpdateMetadataV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/collections/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsControllerCreateGroupV1Request generates requests for GroupsControllerCreateGroupV1
func NewGroupsControllerCreateGroupV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsControllerDeleteGroupV1Request generates requests for GroupsControllerDeleteGroupV1
func NewGroupsControllerDeleteGroupV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsControllerGetGroupV1Request generates requests for GroupsControllerGetGroupV1
func NewGroupsControllerGetGroupV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGroupsControllerAddAccountV1Request calls the generic GroupsControllerAddAccountV1 builder with application/json body
func NewGroupsControllerAddAccountV1Request(server string, id string, body GroupsControllerAddAccountV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsControllerAddAccountV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewGroupsControllerAddAccountV1RequestWithBody generates requests for GroupsControllerAddAccountV1 with any type of body
func NewGroupsControllerAddAccountV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s/accounts/add", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGroupsControllerRemoveAccountV1Request calls the generic GroupsControllerRemoveAccountV1 builder with application/json body
func NewGroupsControllerRemoveAccountV1Request(server string, id string, body GroupsControllerRemoveAccountV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGroupsControllerRemoveAccountV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewGroupsControllerRemoveAccountV1RequestWithBody generates requests for GroupsControllerRemoveAccountV1 with any type of body
func NewGroupsControllerRemoveAccountV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/groups/%s/accounts/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImagesControllerGetUrlsV1Request calls the generic ImagesControllerGetUrlsV1 builder with application/json body
func NewImagesControllerGetUrlsV1Request(server string, body ImagesControllerGetUrlsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImagesControllerGetUrlsV1RequestWithBody(server, "application/json", bodyReader)
}

// NewImagesControllerGetUrlsV1RequestWithBody generates requests for ImagesControllerGetUrlsV1 with any type of body
func NewImagesControllerGetUrlsV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/images/many")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImagesControllerFinalizeUploadV1Request calls the generic ImagesControllerFinalizeUploadV1 builder with application/json body
func NewImagesControllerFinalizeUploadV1Request(server string, body ImagesControllerFinalizeUploadV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImagesControllerFinalizeUploadV1RequestWithBody(server, "application/json", bodyReader)
}

// NewImagesControllerFinalizeUploadV1RequestWithBody generates requests for ImagesControllerFinalizeUploadV1 with any type of body
func NewImagesControllerFinalizeUploadV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/images/upload/finalize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImagesControllerStartUploadV1Request generates requests for ImagesControllerStartUploadV1
func NewImagesControllerStartUploadV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/images/upload/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImagesControllerGetImageV1Request generates requests for ImagesControllerGetImageV1
func NewImagesControllerGetImageV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/images/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImagesControllerGetRepresentationV1Request generates requests for ImagesControllerGetRepresentationV1
func NewImagesControllerGetRepresentationV1Request(server string, id string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/images/%s/representation/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperationsControllerListOperationsV1Request generates requests for OperationsControllerListOperationsV1
func NewOperationsControllerListOperationsV1Request(server string, params *OperationsControllerListOperationsV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperationsControllerGetOperationsV1Request calls the generic OperationsControllerGetOperationsV1 builder with application/json body
func NewOperationsControllerGetOperationsV1Request(server string, body OperationsControllerGetOperationsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerGetOperationsV1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerGetOperationsV1RequestWithBody generates requests for OperationsControllerGetOperationsV1 with any type of body
func NewOperationsControllerGetOperationsV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/many")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunCompositeV1V1Request calls the generic OperationsControllerRunCompositeV1V1 builder with application/json body
func NewOperationsControllerRunCompositeV1V1Request(server string, body OperationsControllerRunCompositeV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunCompositeV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunCompositeV1V1RequestWithBody generates requests for OperationsControllerRunCompositeV1V1 with any type of body
func NewOperationsControllerRunCompositeV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/composite.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunCropV1V1Request calls the generic OperationsControllerRunCropV1V1 builder with application/json body
func NewOperationsControllerRunCropV1V1Request(server string, body OperationsControllerRunCropV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunCropV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunCropV1V1RequestWithBody generates requests for OperationsControllerRunCropV1V1 with any type of body
func NewOperationsControllerRunCropV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/crop.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunCutV1V1Request calls the generic OperationsControllerRunCutV1V1 builder with application/json body
func NewOperationsControllerRunCutV1V1Request(server string, body OperationsControllerRunCutV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunCutV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunCutV1V1RequestWithBody generates requests for OperationsControllerRunCutV1V1 with any type of body
func NewOperationsControllerRunCutV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/cut.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunGptV1V1Request calls the generic OperationsControllerRunGptV1V1 builder with application/json body
func NewOperationsControllerRunGptV1V1Request(server string, body OperationsControllerRunGptV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunGptV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunGptV1V1RequestWithBody generates requests for OperationsControllerRunGptV1V1 with any type of body
func NewOperationsControllerRunGptV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/gpt.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunHauteLindaV1V1Request calls the generic OperationsControllerRunHauteLindaV1V1 builder with application/json body
func NewOperationsControllerRunHauteLindaV1V1Request(server string, body OperationsControllerRunHauteLindaV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunHauteLindaV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunHauteLindaV1V1RequestWithBody generates requests for OperationsControllerRunHauteLindaV1V1 with any type of body
func NewOperationsControllerRunHauteLindaV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/haute.linda.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunHauteNaomiV1V1Request calls the generic OperationsControllerRunHauteNaomiV1V1 builder with application/json body
func NewOperationsControllerRunHauteNaomiV1V1Request(server string, body OperationsControllerRunHauteNaomiV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunHauteNaomiV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunHauteNaomiV1V1RequestWithBody generates requests for OperationsControllerRunHauteNaomiV1V1 with any type of body
func NewOperationsControllerRunHauteNaomiV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/haute.naomi.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunImagineKateV1V1Request calls the generic OperationsControllerRunImagineKateV1V1 builder with application/json body
func NewOperationsControllerRunImagineKateV1V1Request(server string, body OperationsControllerRunImagineKateV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunImagineKateV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunImagineKateV1V1RequestWithBody generates requests for OperationsControllerRunImagineKateV1V1 with any type of body
func NewOperationsControllerRunImagineKateV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/imagine.kate.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunInpaintKateV1V1Request calls the generic OperationsControllerRunInpaintKateV1V1 builder with application/json body
func NewOperationsControllerRunInpaintKateV1V1Request(server string, body OperationsControllerRunInpaintKateV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunInpaintKateV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunInpaintKateV1V1RequestWithBody generates requests for OperationsControllerRunInpaintKateV1V1 with any type of body
func NewOperationsControllerRunInpaintKateV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/inpaint.kate.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunNegateImageV1V1Request calls the generic OperationsControllerRunNegateImageV1V1 builder with application/json body
func NewOperationsControllerRunNegateImageV1V1Request(server string, body OperationsControllerRunNegateImageV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunNegateImageV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunNegateImageV1V1RequestWithBody generates requests for OperationsControllerRunNegateImageV1V1 with any type of body
func NewOperationsControllerRunNegateImageV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/negateImage.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunNoiseV1V1Request calls the generic OperationsControllerRunNoiseV1V1 builder with application/json body
func NewOperationsControllerRunNoiseV1V1Request(server string, body OperationsControllerRunNoiseV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunNoiseV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunNoiseV1V1RequestWithBody generates requests for OperationsControllerRunNoiseV1V1 with any type of body
func NewOperationsControllerRunNoiseV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/noise.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunObjectDetectionV1V1Request calls the generic OperationsControllerRunObjectDetectionV1V1 builder with application/json body
func NewOperationsControllerRunObjectDetectionV1V1Request(server string, body OperationsControllerRunObjectDetectionV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunObjectDetectionV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunObjectDetectionV1V1RequestWithBody generates requests for OperationsControllerRunObjectDetectionV1V1 with any type of body
func NewOperationsControllerRunObjectDetectionV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/objectDetection.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunPoseEstimationV1V1Request calls the generic OperationsControllerRunPoseEstimationV1V1 builder with application/json body
func NewOperationsControllerRunPoseEstimationV1V1Request(server string, body OperationsControllerRunPoseEstimationV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunPoseEstimationV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunPoseEstimationV1V1RequestWithBody generates requests for OperationsControllerRunPoseEstimationV1V1 with any type of body
func NewOperationsControllerRunPoseEstimationV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/poseEstimation.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request calls the generic OperationsControllerRunSegmentAnythingEmbeddingsV1V1 builder with application/json body
func NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request(server string, body OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1RequestWithBody generates requests for OperationsControllerRunSegmentAnythingEmbeddingsV1V1 with any type of body
func NewOperationsControllerRunSegmentAnythingEmbeddingsV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/segmentAnything.embeddings.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunSegmentAnythingMaskV1V1Request calls the generic OperationsControllerRunSegmentAnythingMaskV1V1 builder with application/json body
func NewOperationsControllerRunSegmentAnythingMaskV1V1Request(server string, body OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunSegmentAnythingMaskV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunSegmentAnythingMaskV1V1RequestWithBody generates requests for OperationsControllerRunSegmentAnythingMaskV1V1 with any type of body
func NewOperationsControllerRunSegmentAnythingMaskV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/segmentAnything.mask.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunUpscaleV1V1Request calls the generic OperationsControllerRunUpscaleV1V1 builder with application/json body
func NewOperationsControllerRunUpscaleV1V1Request(server string, body OperationsControllerRunUpscaleV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunUpscaleV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunUpscaleV1V1RequestWithBody generates requests for OperationsControllerRunUpscaleV1V1 with any type of body
func NewOperationsControllerRunUpscaleV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/upscale.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerRunVtonGiseleV1V1Request calls the generic OperationsControllerRunVtonGiseleV1V1 builder with application/json body
func NewOperationsControllerRunVtonGiseleV1V1Request(server string, body OperationsControllerRunVtonGiseleV1V1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerRunVtonGiseleV1V1RequestWithBody(server, "application/json", bodyReader)
}

// NewOperationsControllerRunVtonGiseleV1V1RequestWithBody generates requests for OperationsControllerRunVtonGiseleV1V1 with any type of body
func NewOperationsControllerRunVtonGiseleV1V1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/run/vton.gisele.v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOperationsControllerGetOperationV1Request generates requests for OperationsControllerGetOperationV1
func NewOperationsControllerGetOperationV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperationsControllerUpdateMetadataV1Request calls the generic OperationsControllerUpdateMetadataV1 builder with application/json body
func NewOperationsControllerUpdateMetadataV1Request(server string, id string, body OperationsControllerUpdateMetadataV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOperationsControllerUpdateMetadataV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewOperationsControllerUpdateMetadataV1RequestWithBody generates requests for OperationsControllerUpdateMetadataV1 with any type of body
func NewOperationsControllerUpdateMetadataV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsControllerListAvailablePermissionsV1Request generates requests for PermissionsControllerListAvailablePermissionsV1
func NewPermissionsControllerListAvailablePermissionsV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/permissions/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPipelinesControllerListPipelinesV1Request generates requests for PipelinesControllerListPipelinesV1
func NewPipelinesControllerListPipelinesV1Request(server string, params *PipelinesControllerListPipelinesV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPipelinesControllerCreatePipelineV1Request calls the generic PipelinesControllerCreatePipelineV1 builder with application/json body
func NewPipelinesControllerCreatePipelineV1Request(server string, body PipelinesControllerCreatePipelineV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPipelinesControllerCreatePipelineV1RequestWithBody(server, "application/json", bodyReader)
}

// NewPipelinesControllerCreatePipelineV1RequestWithBody generates requests for PipelinesControllerCreatePipelineV1 with any type of body
func NewPipelinesControllerCreatePipelineV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pipelines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPipelinesControllerGetPipelineV1Request generates requests for PipelinesControllerGetPipelineV1
func NewPipelinesControllerGetPipelineV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPosesControllerListPosesV1Request generates requests for PosesControllerListPosesV1
func NewPosesControllerListPosesV1Request(server string, params *PosesControllerListPosesV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/poses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPosesControllerGetPoseV1Request generates requests for PosesControllerGetPoseV1
func NewPosesControllerGetPoseV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/poses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPosesControllerUpdateMetadataV1Request calls the generic PosesControllerUpdateMetadataV1 builder with application/json body
func NewPosesControllerUpdateMetadataV1Request(server string, id string, body PosesControllerUpdateMetadataV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPosesControllerUpdateMetadataV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewPosesControllerUpdateMetadataV1RequestWithBody generates requests for PosesControllerUpdateMetadataV1 with any type of body
func NewPosesControllerUpdateMetadataV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/poses/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPosesControllerSetPosePreviewV1Request calls the generic PosesControllerSetPosePreviewV1 builder with application/json body
func NewPosesControllerSetPosePreviewV1Request(server string, id string, body PosesControllerSetPosePreviewV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPosesControllerSetPosePreviewV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewPosesControllerSetPosePreviewV1RequestWithBody generates requests for PosesControllerSetPosePreviewV1 with any type of body
func NewPosesControllerSetPosePreviewV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/poses/%s/preview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessControllerAccessV1Request generates requests for AccessControllerAccessV1
func NewAccessControllerAccessV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s/access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccessControllerAttachAccessV1Request calls the generic AccessControllerAttachAccessV1 builder with application/json body
func NewAccessControllerAttachAccessV1Request(server string, id string, body AccessControllerAttachAccessV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessControllerAttachAccessV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessControllerAttachAccessV1RequestWithBody generates requests for AccessControllerAttachAccessV1 with any type of body
func NewAccessControllerAttachAccessV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s/access/attach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessControllerDetachAccessV1Request calls the generic AccessControllerDetachAccessV1 builder with application/json body
func NewAccessControllerDetachAccessV1Request(server string, id string, body AccessControllerDetachAccessV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessControllerDetachAccessV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessControllerDetachAccessV1RequestWithBody generates requests for AccessControllerDetachAccessV1 with any type of body
func NewAccessControllerDetachAccessV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s/access/detach", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessControllerGrantAccessV1Request calls the generic AccessControllerGrantAccessV1 builder with application/json body
func NewAccessControllerGrantAccessV1Request(server string, id string, body AccessControllerGrantAccessV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessControllerGrantAccessV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessControllerGrantAccessV1RequestWithBody generates requests for AccessControllerGrantAccessV1 with any type of body
func NewAccessControllerGrantAccessV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s/access/grant", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccessControllerRevokeAccessV1Request calls the generic AccessControllerRevokeAccessV1 builder with application/json body
func NewAccessControllerRevokeAccessV1Request(server string, id string, body AccessControllerRevokeAccessV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccessControllerRevokeAccessV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewAccessControllerRevokeAccessV1RequestWithBody generates requests for AccessControllerRevokeAccessV1 with any type of body
func NewAccessControllerRevokeAccessV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/resources/%s/access/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStacksControllerListStacksV1Request generates requests for StacksControllerListStacksV1
func NewStacksControllerListStacksV1Request(server string, params *StacksControllerListStacksV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStacksControllerCreateStackV1Request calls the generic StacksControllerCreateStackV1 builder with application/json body
func NewStacksControllerCreateStackV1Request(server string, body StacksControllerCreateStackV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStacksControllerCreateStackV1RequestWithBody(server, "application/json", bodyReader)
}

// NewStacksControllerCreateStackV1RequestWithBody generates requests for StacksControllerCreateStackV1 with any type of body
func NewStacksControllerCreateStackV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStacksControllerGetStackV1Request generates requests for StacksControllerGetStackV1
func NewStacksControllerGetStackV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStacksControllerAddItemsV1Request calls the generic StacksControllerAddItemsV1 builder with application/json body
func NewStacksControllerAddItemsV1Request(server string, id string, body StacksControllerAddItemsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStacksControllerAddItemsV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewStacksControllerAddItemsV1RequestWithBody generates requests for StacksControllerAddItemsV1 with any type of body
func NewStacksControllerAddItemsV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stacks/%s/items/add", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStacksControllerRemoveItemsV1Request calls the generic StacksControllerRemoveItemsV1 builder with application/json body
func NewStacksControllerRemoveItemsV1Request(server string, id string, body StacksControllerRemoveItemsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStacksControllerRemoveItemsV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewStacksControllerRemoveItemsV1RequestWithBody generates requests for StacksControllerRemoveItemsV1 with any type of body
func NewStacksControllerRemoveItemsV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stacks/%s/items/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStacksControllerUpdateMetadataV1Request calls the generic StacksControllerUpdateMetadataV1 builder with application/json body
func NewStacksControllerUpdateMetadataV1Request(server string, id string, body StacksControllerUpdateMetadataV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStacksControllerUpdateMetadataV1RequestWithBody(server, id, "application/json", bodyReader)
}

// NewStacksControllerUpdateMetadataV1RequestWithBody generates requests for StacksControllerUpdateMetadataV1 with any type of body
func NewStacksControllerUpdateMetadataV1RequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stacks/%s/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStorageControllerCreateRecordV1Request calls the generic StorageControllerCreateRecordV1 builder with application/json body
func NewStorageControllerCreateRecordV1Request(server string, body StorageControllerCreateRecordV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStorageControllerCreateRecordV1RequestWithBody(server, "application/json", bodyReader)
}

// NewStorageControllerCreateRecordV1RequestWithBody generates requests for StorageControllerCreateRecordV1 with any type of body
func NewStorageControllerCreateRecordV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStorageControllerDeleteRecordV1Request calls the generic StorageControllerDeleteRecordV1 builder with application/json body
func NewStorageControllerDeleteRecordV1Request(server string, body StorageControllerDeleteRecordV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStorageControllerDeleteRecordV1RequestWithBody(server, "application/json", bodyReader)
}

// NewStorageControllerDeleteRecordV1RequestWithBody generates requests for StorageControllerDeleteRecordV1 with any type of body
func NewStorageControllerDeleteRecordV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/storage/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStorageControllerGetRecordsV1Request calls the generic StorageControllerGetRecordsV1 builder with application/json body
func NewStorageControllerGetRecordsV1Request(server string, body StorageControllerGetRecordsV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStorageControllerGetRecordsV1RequestWithBody(server, "application/json", bodyReader)
}

// NewStorageControllerGetRecordsV1RequestWithBody generates requests for StorageControllerGetRecordsV1 with any type of body
func NewStorageControllerGetRecordsV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/storage/many")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStorageControllerUpdateRecordV1Request calls the generic StorageControllerUpdateRecordV1 builder with application/json body
func NewStorageControllerUpdateRecordV1Request(server string, body StorageControllerUpdateRecordV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStorageControllerUpdateRecordV1RequestWithBody(server, "application/json", bodyReader)
}

// NewStorageControllerUpdateRecordV1RequestWithBody generates requests for StorageControllerUpdateRecordV1 with any type of body
func NewStorageControllerUpdateRecordV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/storage/write")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebsocketControllerRegisterWebsocketV1Request generates requests for WebsocketControllerRegisterWebsocketV1
func NewWebsocketControllerRegisterWebsocketV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/websocket/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebsocketControllerGetSettingsV1Request generates requests for WebsocketControllerGetSettingsV1
func NewWebsocketControllerGetSettingsV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/websocket/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccountsControllerListAccountsV1WithResponse request
	AccountsControllerListAccountsV1WithResponse(ctx context.Context, params *AccountsControllerListAccountsV1Params, reqEditors ...RequestEditorFn) (*AccountsControllerListAccountsV1Response, error)

	// AccountsControllerCreateAccountV1WithBodyWithResponse request with any body
	AccountsControllerCreateAccountV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsControllerCreateAccountV1Response, error)

	AccountsControllerCreateAccountV1WithResponse(ctx context.Context, body AccountsControllerCreateAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsControllerCreateAccountV1Response, error)

	// AccountsControllerGetAccountByAliasV1WithResponse request
	AccountsControllerGetAccountByAliasV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccountsControllerGetAccountByAliasV1Response, error)

	// AccountsControllerGetSelfV1WithResponse request
	AccountsControllerGetSelfV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsControllerGetSelfV1Response, error)

	// BalancesControllerGetBalanceForSelfV1WithResponse request
	BalancesControllerGetBalanceForSelfV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BalancesControllerGetBalanceForSelfV1Response, error)

	// AccountsControllerGetAccountV1WithResponse request
	AccountsControllerGetAccountV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccountsControllerGetAccountV1Response, error)

	// BalancesControllerGetBalanceV1WithResponse request
	BalancesControllerGetBalanceV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BalancesControllerGetBalanceV1Response, error)

	// BalancesControllerAddBalanceV1WithBodyWithResponse request with any body
	BalancesControllerAddBalanceV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BalancesControllerAddBalanceV1Response, error)

	BalancesControllerAddBalanceV1WithResponse(ctx context.Context, id string, body BalancesControllerAddBalanceV1JSONRequestBody, reqEditors ...RequestEditorFn) (*BalancesControllerAddBalanceV1Response, error)

	// CallControllerCallAccessAttachV1WithBodyWithResponse request with any body
	CallControllerCallAccessAttachV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccessAttachV1Response, error)

	CallControllerCallAccessAttachV1WithResponse(ctx context.Context, body CallControllerCallAccessAttachV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccessAttachV1Response, error)

	// CallControllerCallAccessGrantV1WithBodyWithResponse request with any body
	CallControllerCallAccessGrantV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccessGrantV1Response, error)

	CallControllerCallAccessGrantV1WithResponse(ctx context.Context, body CallControllerCallAccessGrantV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccessGrantV1Response, error)

	// CallControllerCallAccountsBalanceAddV1WithBodyWithResponse request with any body
	CallControllerCallAccountsBalanceAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceAddV1Response, error)

	CallControllerCallAccountsBalanceAddV1WithResponse(ctx context.Context, body CallControllerCallAccountsBalanceAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceAddV1Response, error)

	// CallControllerCallAccountsBalanceGetV1WithBodyWithResponse request with any body
	CallControllerCallAccountsBalanceGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceGetV1Response, error)

	CallControllerCallAccountsBalanceGetV1WithResponse(ctx context.Context, body CallControllerCallAccountsBalanceGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceGetV1Response, error)

	// CallControllerCallAccountsBalanceSelfV1WithBodyWithResponse request with any body
	CallControllerCallAccountsBalanceSelfV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceSelfV1Response, error)

	CallControllerCallAccountsBalanceSelfV1WithResponse(ctx context.Context, body CallControllerCallAccountsBalanceSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceSelfV1Response, error)

	// CallControllerCallAccountsCreateV1WithBodyWithResponse request with any body
	CallControllerCallAccountsCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsCreateV1Response, error)

	CallControllerCallAccountsCreateV1WithResponse(ctx context.Context, body CallControllerCallAccountsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsCreateV1Response, error)

	// CallControllerCallAccountsGetV1WithBodyWithResponse request with any body
	CallControllerCallAccountsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsGetV1Response, error)

	CallControllerCallAccountsGetV1WithResponse(ctx context.Context, body CallControllerCallAccountsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsGetV1Response, error)

	// CallControllerCallAccountsListV1WithBodyWithResponse request with any body
	CallControllerCallAccountsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsListV1Response, error)

	CallControllerCallAccountsListV1WithResponse(ctx context.Context, body CallControllerCallAccountsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsListV1Response, error)

	// CallControllerCallAccountsSelfV1WithBodyWithResponse request with any body
	CallControllerCallAccountsSelfV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsSelfV1Response, error)

	CallControllerCallAccountsSelfV1WithResponse(ctx context.Context, body CallControllerCallAccountsSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsSelfV1Response, error)

	// CallControllerCallCollectionsCreateV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsCreateV1Response, error)

	CallControllerCallCollectionsCreateV1WithResponse(ctx context.Context, body CallControllerCallCollectionsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsCreateV1Response, error)

	// CallControllerCallCollectionsGetV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsGetV1Response, error)

	CallControllerCallCollectionsGetV1WithResponse(ctx context.Context, body CallControllerCallCollectionsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsGetV1Response, error)

	// CallControllerCallCollectionsItemsAddV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsItemsAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsAddV1Response, error)

	CallControllerCallCollectionsItemsAddV1WithResponse(ctx context.Context, body CallControllerCallCollectionsItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsAddV1Response, error)

	// CallControllerCallCollectionsItemsListV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsItemsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsListV1Response, error)

	CallControllerCallCollectionsItemsListV1WithResponse(ctx context.Context, body CallControllerCallCollectionsItemsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsListV1Response, error)

	// CallControllerCallCollectionsItemsRemoveV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsItemsRemoveV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsRemoveV1Response, error)

	CallControllerCallCollectionsItemsRemoveV1WithResponse(ctx context.Context, body CallControllerCallCollectionsItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsRemoveV1Response, error)

	// CallControllerCallCollectionsListV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsListV1Response, error)

	CallControllerCallCollectionsListV1WithResponse(ctx context.Context, body CallControllerCallCollectionsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsListV1Response, error)

	// CallControllerCallCollectionsMetadataUpdateV1WithBodyWithResponse request with any body
	CallControllerCallCollectionsMetadataUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsMetadataUpdateV1Response, error)

	CallControllerCallCollectionsMetadataUpdateV1WithResponse(ctx context.Context, body CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsMetadataUpdateV1Response, error)

	// CallControllerCallGroupsAccountsAddV1WithBodyWithResponse request with any body
	CallControllerCallGroupsAccountsAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsAddV1Response, error)

	CallControllerCallGroupsAccountsAddV1WithResponse(ctx context.Context, body CallControllerCallGroupsAccountsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsAddV1Response, error)

	// CallControllerCallGroupsAccountsRemoveV1WithBodyWithResponse request with any body
	CallControllerCallGroupsAccountsRemoveV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsRemoveV1Response, error)

	CallControllerCallGroupsAccountsRemoveV1WithResponse(ctx context.Context, body CallControllerCallGroupsAccountsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsRemoveV1Response, error)

	// CallControllerCallGroupsCreateV1WithBodyWithResponse request with any body
	CallControllerCallGroupsCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsCreateV1Response, error)

	CallControllerCallGroupsCreateV1WithResponse(ctx context.Context, body CallControllerCallGroupsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsCreateV1Response, error)

	// CallControllerCallGroupsDeleteV1WithBodyWithResponse request with any body
	CallControllerCallGroupsDeleteV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsDeleteV1Response, error)

	CallControllerCallGroupsDeleteV1WithResponse(ctx context.Context, body CallControllerCallGroupsDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsDeleteV1Response, error)

	// CallControllerCallGroupsGetV1WithBodyWithResponse request with any body
	CallControllerCallGroupsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsGetV1Response, error)

	CallControllerCallGroupsGetV1WithResponse(ctx context.Context, body CallControllerCallGroupsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsGetV1Response, error)

	// CallControllerCallImagesGetV1WithBodyWithResponse request with any body
	CallControllerCallImagesGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetV1Response, error)

	CallControllerCallImagesGetV1WithResponse(ctx context.Context, body CallControllerCallImagesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetV1Response, error)

	// CallControllerCallImagesGetManyV1WithBodyWithResponse request with any body
	CallControllerCallImagesGetManyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetManyV1Response, error)

	CallControllerCallImagesGetManyV1WithResponse(ctx context.Context, body CallControllerCallImagesGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetManyV1Response, error)

	// CallControllerCallImagesRepresentationsGetV1WithBodyWithResponse request with any body
	CallControllerCallImagesRepresentationsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallImagesRepresentationsGetV1Response, error)

	CallControllerCallImagesRepresentationsGetV1WithResponse(ctx context.Context, body CallControllerCallImagesRepresentationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallImagesRepresentationsGetV1Response, error)

	// CallControllerCallOperationsGetV1WithBodyWithResponse request with any body
	CallControllerCallOperationsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetV1Response, error)

	CallControllerCallOperationsGetV1WithResponse(ctx context.Context, body CallControllerCallOperationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetV1Response, error)

	// CallControllerCallOperationsGetManyV1WithBodyWithResponse request with any body
	CallControllerCallOperationsGetManyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetManyV1Response, error)

	CallControllerCallOperationsGetManyV1WithResponse(ctx context.Context, body CallControllerCallOperationsGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetManyV1Response, error)

	// CallControllerCallOperationsListV1WithBodyWithResponse request with any body
	CallControllerCallOperationsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsListV1Response, error)

	CallControllerCallOperationsListV1WithResponse(ctx context.Context, body CallControllerCallOperationsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsListV1Response, error)

	// CallControllerCallOperationsMetadataUpdateV1WithBodyWithResponse request with any body
	CallControllerCallOperationsMetadataUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsMetadataUpdateV1Response, error)

	CallControllerCallOperationsMetadataUpdateV1WithResponse(ctx context.Context, body CallControllerCallOperationsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsMetadataUpdateV1Response, error)

	// CallControllerCallOperationsRunCompositeV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunCompositeV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCompositeV1V1Response, error)

	CallControllerCallOperationsRunCompositeV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCompositeV1V1Response, error)

	// CallControllerCallOperationsRunCropV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunCropV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCropV1V1Response, error)

	CallControllerCallOperationsRunCropV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCropV1V1Response, error)

	// CallControllerCallOperationsRunCutV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunCutV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCutV1V1Response, error)

	CallControllerCallOperationsRunCutV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCutV1V1Response, error)

	// CallControllerCallOperationsRunGptV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunGptV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunGptV1V1Response, error)

	CallControllerCallOperationsRunGptV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunGptV1V1Response, error)

	// CallControllerCallOperationsRunHauteLindaV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunHauteLindaV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteLindaV1V1Response, error)

	CallControllerCallOperationsRunHauteLindaV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteLindaV1V1Response, error)

	// CallControllerCallOperationsRunHauteNaomiV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunHauteNaomiV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteNaomiV1V1Response, error)

	CallControllerCallOperationsRunHauteNaomiV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteNaomiV1V1Response, error)

	// CallControllerCallOperationsRunImagineKateV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunImagineKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunImagineKateV1V1Response, error)

	CallControllerCallOperationsRunImagineKateV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunImagineKateV1V1Response, error)

	// CallControllerCallOperationsRunInpaintKateV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunInpaintKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunInpaintKateV1V1Response, error)

	CallControllerCallOperationsRunInpaintKateV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunInpaintKateV1V1Response, error)

	// CallControllerCallOperationsRunNegateImageV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunNegateImageV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNegateImageV1V1Response, error)

	CallControllerCallOperationsRunNegateImageV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNegateImageV1V1Response, error)

	// CallControllerCallOperationsRunNoiseV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunNoiseV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNoiseV1V1Response, error)

	CallControllerCallOperationsRunNoiseV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNoiseV1V1Response, error)

	// CallControllerCallOperationsRunObjectDetectionV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunObjectDetectionV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunObjectDetectionV1V1Response, error)

	CallControllerCallOperationsRunObjectDetectionV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunObjectDetectionV1V1Response, error)

	// CallControllerCallOperationsRunPoseEstimationV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunPoseEstimationV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunPoseEstimationV1V1Response, error)

	CallControllerCallOperationsRunPoseEstimationV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunPoseEstimationV1V1Response, error)

	// CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response, error)

	CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response, error)

	// CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response, error)

	CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response, error)

	// CallControllerCallOperationsRunUpscaleV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunUpscaleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunUpscaleV1V1Response, error)

	CallControllerCallOperationsRunUpscaleV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunUpscaleV1V1Response, error)

	// CallControllerCallOperationsRunVtonGiseleV1V1WithBodyWithResponse request with any body
	CallControllerCallOperationsRunVtonGiseleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunVtonGiseleV1V1Response, error)

	CallControllerCallOperationsRunVtonGiseleV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunVtonGiseleV1V1Response, error)

	// CallControllerCallOperationsWaitV1WithBodyWithResponse request with any body
	CallControllerCallOperationsWaitV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsWaitV1Response, error)

	CallControllerCallOperationsWaitV1WithResponse(ctx context.Context, body CallControllerCallOperationsWaitV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsWaitV1Response, error)

	// CallControllerCallPosesGetV1WithBodyWithResponse request with any body
	CallControllerCallPosesGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallPosesGetV1Response, error)

	CallControllerCallPosesGetV1WithResponse(ctx context.Context, body CallControllerCallPosesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallPosesGetV1Response, error)

	// CallControllerCallPosesListV1WithBodyWithResponse request with any body
	CallControllerCallPosesListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallPosesListV1Response, error)

	CallControllerCallPosesListV1WithResponse(ctx context.Context, body CallControllerCallPosesListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallPosesListV1Response, error)

	// CallControllerCallPosesPreviewSetV1WithBodyWithResponse request with any body
	CallControllerCallPosesPreviewSetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallPosesPreviewSetV1Response, error)

	CallControllerCallPosesPreviewSetV1WithResponse(ctx context.Context, body CallControllerCallPosesPreviewSetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallPosesPreviewSetV1Response, error)

	// CallControllerCallStacksCreateV1WithBodyWithResponse request with any body
	CallControllerCallStacksCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksCreateV1Response, error)

	CallControllerCallStacksCreateV1WithResponse(ctx context.Context, body CallControllerCallStacksCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksCreateV1Response, error)

	// CallControllerCallStacksGetV1WithBodyWithResponse request with any body
	CallControllerCallStacksGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksGetV1Response, error)

	CallControllerCallStacksGetV1WithResponse(ctx context.Context, body CallControllerCallStacksGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksGetV1Response, error)

	// CallControllerCallStacksItemsAddV1WithBodyWithResponse request with any body
	CallControllerCallStacksItemsAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsAddV1Response, error)

	CallControllerCallStacksItemsAddV1WithResponse(ctx context.Context, body CallControllerCallStacksItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsAddV1Response, error)

	// CallControllerCallStacksItemsRemoveV1WithBodyWithResponse request with any body
	CallControllerCallStacksItemsRemoveV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsRemoveV1Response, error)

	CallControllerCallStacksItemsRemoveV1WithResponse(ctx context.Context, body CallControllerCallStacksItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsRemoveV1Response, error)

	// CallControllerCallStacksListV1WithBodyWithResponse request with any body
	CallControllerCallStacksListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksListV1Response, error)

	CallControllerCallStacksListV1WithResponse(ctx context.Context, body CallControllerCallStacksListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksListV1Response, error)

	// CallControllerCallStacksMetadataUpdateV1WithBodyWithResponse request with any body
	CallControllerCallStacksMetadataUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksMetadataUpdateV1Response, error)

	CallControllerCallStacksMetadataUpdateV1WithResponse(ctx context.Context, body CallControllerCallStacksMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksMetadataUpdateV1Response, error)

	// CallControllerCallStorageCreateV1WithBodyWithResponse request with any body
	CallControllerCallStorageCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageCreateV1Response, error)

	CallControllerCallStorageCreateV1WithResponse(ctx context.Context, body CallControllerCallStorageCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageCreateV1Response, error)

	// CallControllerCallStorageDeleteV1WithBodyWithResponse request with any body
	CallControllerCallStorageDeleteV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageDeleteV1Response, error)

	CallControllerCallStorageDeleteV1WithResponse(ctx context.Context, body CallControllerCallStorageDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageDeleteV1Response, error)

	// CallControllerCallStorageGetManyV1WithBodyWithResponse request with any body
	CallControllerCallStorageGetManyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageGetManyV1Response, error)

	CallControllerCallStorageGetManyV1WithResponse(ctx context.Context, body CallControllerCallStorageGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageGetManyV1Response, error)

	// CallControllerCallStorageUpdateV1WithBodyWithResponse request with any body
	CallControllerCallStorageUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageUpdateV1Response, error)

	CallControllerCallStorageUpdateV1WithResponse(ctx context.Context, body CallControllerCallStorageUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageUpdateV1Response, error)

	// CollectionsControllerListCollectionsV1WithResponse request
	CollectionsControllerListCollectionsV1WithResponse(ctx context.Context, params *CollectionsControllerListCollectionsV1Params, reqEditors ...RequestEditorFn) (*CollectionsControllerListCollectionsV1Response, error)

	// CollectionsControllerCreateCollectionV1WithBodyWithResponse request with any body
	CollectionsControllerCreateCollectionV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerCreateCollectionV1Response, error)

	CollectionsControllerCreateCollectionV1WithResponse(ctx context.Context, body CollectionsControllerCreateCollectionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerCreateCollectionV1Response, error)

	// CollectionsControllerGetCollectionV1WithResponse request
	CollectionsControllerGetCollectionV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CollectionsControllerGetCollectionV1Response, error)

	// CollectionsControllerListItemsV1WithResponse request
	CollectionsControllerListItemsV1WithResponse(ctx context.Context, id string, params *CollectionsControllerListItemsV1Params, reqEditors ...RequestEditorFn) (*CollectionsControllerListItemsV1Response, error)

	// CollectionsControllerAddItemsV1WithBodyWithResponse request with any body
	CollectionsControllerAddItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerAddItemsV1Response, error)

	CollectionsControllerAddItemsV1WithResponse(ctx context.Context, id string, body CollectionsControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerAddItemsV1Response, error)

	// CollectionsControllerRemoveItemsV1WithBodyWithResponse request with any body
	CollectionsControllerRemoveItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerRemoveItemsV1Response, error)

	CollectionsControllerRemoveItemsV1WithResponse(ctx context.Context, id string, body CollectionsControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerRemoveItemsV1Response, error)

	// CollectionsControllerUpdateMetadataV1WithBodyWithResponse request with any body
	CollectionsControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerUpdateMetadataV1Response, error)

	CollectionsControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body CollectionsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerUpdateMetadataV1Response, error)

	// GroupsControllerCreateGroupV1WithResponse request
	GroupsControllerCreateGroupV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GroupsControllerCreateGroupV1Response, error)

	// GroupsControllerDeleteGroupV1WithResponse request
	GroupsControllerDeleteGroupV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GroupsControllerDeleteGroupV1Response, error)

	// GroupsControllerGetGroupV1WithResponse request
	GroupsControllerGetGroupV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GroupsControllerGetGroupV1Response, error)

	// GroupsControllerAddAccountV1WithBodyWithResponse request with any body
	GroupsControllerAddAccountV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerAddAccountV1Response, error)

	GroupsControllerAddAccountV1WithResponse(ctx context.Context, id string, body GroupsControllerAddAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerAddAccountV1Response, error)

	// GroupsControllerRemoveAccountV1WithBodyWithResponse request with any body
	GroupsControllerRemoveAccountV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerRemoveAccountV1Response, error)

	GroupsControllerRemoveAccountV1WithResponse(ctx context.Context, id string, body GroupsControllerRemoveAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerRemoveAccountV1Response, error)

	// ImagesControllerGetUrlsV1WithBodyWithResponse request with any body
	ImagesControllerGetUrlsV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImagesControllerGetUrlsV1Response, error)

	ImagesControllerGetUrlsV1WithResponse(ctx context.Context, body ImagesControllerGetUrlsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ImagesControllerGetUrlsV1Response, error)

	// ImagesControllerFinalizeUploadV1WithBodyWithResponse request with any body
	ImagesControllerFinalizeUploadV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImagesControllerFinalizeUploadV1Response, error)

	ImagesControllerFinalizeUploadV1WithResponse(ctx context.Context, body ImagesControllerFinalizeUploadV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ImagesControllerFinalizeUploadV1Response, error)

	// ImagesControllerStartUploadV1WithResponse request
	ImagesControllerStartUploadV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ImagesControllerStartUploadV1Response, error)

	// ImagesControllerGetImageV1WithResponse request
	ImagesControllerGetImageV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ImagesControllerGetImageV1Response, error)

	// ImagesControllerGetRepresentationV1WithResponse request
	ImagesControllerGetRepresentationV1WithResponse(ctx context.Context, id string, pType string, reqEditors ...RequestEditorFn) (*ImagesControllerGetRepresentationV1Response, error)

	// OperationsControllerListOperationsV1WithResponse request
	OperationsControllerListOperationsV1WithResponse(ctx context.Context, params *OperationsControllerListOperationsV1Params, reqEditors ...RequestEditorFn) (*OperationsControllerListOperationsV1Response, error)

	// OperationsControllerGetOperationsV1WithBodyWithResponse request with any body
	OperationsControllerGetOperationsV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerGetOperationsV1Response, error)

	OperationsControllerGetOperationsV1WithResponse(ctx context.Context, body OperationsControllerGetOperationsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerGetOperationsV1Response, error)

	// OperationsControllerRunCompositeV1V1WithBodyWithResponse request with any body
	OperationsControllerRunCompositeV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunCompositeV1V1Response, error)

	OperationsControllerRunCompositeV1V1WithResponse(ctx context.Context, body OperationsControllerRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunCompositeV1V1Response, error)

	// OperationsControllerRunCropV1V1WithBodyWithResponse request with any body
	OperationsControllerRunCropV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunCropV1V1Response, error)

	OperationsControllerRunCropV1V1WithResponse(ctx context.Context, body OperationsControllerRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunCropV1V1Response, error)

	// OperationsControllerRunCutV1V1WithBodyWithResponse request with any body
	OperationsControllerRunCutV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunCutV1V1Response, error)

	OperationsControllerRunCutV1V1WithResponse(ctx context.Context, body OperationsControllerRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunCutV1V1Response, error)

	// OperationsControllerRunGptV1V1WithBodyWithResponse request with any body
	OperationsControllerRunGptV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunGptV1V1Response, error)

	OperationsControllerRunGptV1V1WithResponse(ctx context.Context, body OperationsControllerRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunGptV1V1Response, error)

	// OperationsControllerRunHauteLindaV1V1WithBodyWithResponse request with any body
	OperationsControllerRunHauteLindaV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteLindaV1V1Response, error)

	OperationsControllerRunHauteLindaV1V1WithResponse(ctx context.Context, body OperationsControllerRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteLindaV1V1Response, error)

	// OperationsControllerRunHauteNaomiV1V1WithBodyWithResponse request with any body
	OperationsControllerRunHauteNaomiV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteNaomiV1V1Response, error)

	OperationsControllerRunHauteNaomiV1V1WithResponse(ctx context.Context, body OperationsControllerRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteNaomiV1V1Response, error)

	// OperationsControllerRunImagineKateV1V1WithBodyWithResponse request with any body
	OperationsControllerRunImagineKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunImagineKateV1V1Response, error)

	OperationsControllerRunImagineKateV1V1WithResponse(ctx context.Context, body OperationsControllerRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunImagineKateV1V1Response, error)

	// OperationsControllerRunInpaintKateV1V1WithBodyWithResponse request with any body
	OperationsControllerRunInpaintKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunInpaintKateV1V1Response, error)

	OperationsControllerRunInpaintKateV1V1WithResponse(ctx context.Context, body OperationsControllerRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunInpaintKateV1V1Response, error)

	// OperationsControllerRunNegateImageV1V1WithBodyWithResponse request with any body
	OperationsControllerRunNegateImageV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunNegateImageV1V1Response, error)

	OperationsControllerRunNegateImageV1V1WithResponse(ctx context.Context, body OperationsControllerRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunNegateImageV1V1Response, error)

	// OperationsControllerRunNoiseV1V1WithBodyWithResponse request with any body
	OperationsControllerRunNoiseV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunNoiseV1V1Response, error)

	OperationsControllerRunNoiseV1V1WithResponse(ctx context.Context, body OperationsControllerRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunNoiseV1V1Response, error)

	// OperationsControllerRunObjectDetectionV1V1WithBodyWithResponse request with any body
	OperationsControllerRunObjectDetectionV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunObjectDetectionV1V1Response, error)

	OperationsControllerRunObjectDetectionV1V1WithResponse(ctx context.Context, body OperationsControllerRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunObjectDetectionV1V1Response, error)

	// OperationsControllerRunPoseEstimationV1V1WithBodyWithResponse request with any body
	OperationsControllerRunPoseEstimationV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunPoseEstimationV1V1Response, error)

	OperationsControllerRunPoseEstimationV1V1WithResponse(ctx context.Context, body OperationsControllerRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunPoseEstimationV1V1Response, error)

	// OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse request with any body
	OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response, error)

	OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithResponse(ctx context.Context, body OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response, error)

	// OperationsControllerRunSegmentAnythingMaskV1V1WithBodyWithResponse request with any body
	OperationsControllerRunSegmentAnythingMaskV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingMaskV1V1Response, error)

	OperationsControllerRunSegmentAnythingMaskV1V1WithResponse(ctx context.Context, body OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingMaskV1V1Response, error)

	// OperationsControllerRunUpscaleV1V1WithBodyWithResponse request with any body
	OperationsControllerRunUpscaleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunUpscaleV1V1Response, error)

	OperationsControllerRunUpscaleV1V1WithResponse(ctx context.Context, body OperationsControllerRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunUpscaleV1V1Response, error)

	// OperationsControllerRunVtonGiseleV1V1WithBodyWithResponse request with any body
	OperationsControllerRunVtonGiseleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunVtonGiseleV1V1Response, error)

	OperationsControllerRunVtonGiseleV1V1WithResponse(ctx context.Context, body OperationsControllerRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunVtonGiseleV1V1Response, error)

	// OperationsControllerGetOperationV1WithResponse request
	OperationsControllerGetOperationV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OperationsControllerGetOperationV1Response, error)

	// OperationsControllerUpdateMetadataV1WithBodyWithResponse request with any body
	OperationsControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerUpdateMetadataV1Response, error)

	OperationsControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body OperationsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerUpdateMetadataV1Response, error)

	// PermissionsControllerListAvailablePermissionsV1WithResponse request
	PermissionsControllerListAvailablePermissionsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PermissionsControllerListAvailablePermissionsV1Response, error)

	// PipelinesControllerListPipelinesV1WithResponse request
	PipelinesControllerListPipelinesV1WithResponse(ctx context.Context, params *PipelinesControllerListPipelinesV1Params, reqEditors ...RequestEditorFn) (*PipelinesControllerListPipelinesV1Response, error)

	// PipelinesControllerCreatePipelineV1WithBodyWithResponse request with any body
	PipelinesControllerCreatePipelineV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PipelinesControllerCreatePipelineV1Response, error)

	PipelinesControllerCreatePipelineV1WithResponse(ctx context.Context, body PipelinesControllerCreatePipelineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PipelinesControllerCreatePipelineV1Response, error)

	// PipelinesControllerGetPipelineV1WithResponse request
	PipelinesControllerGetPipelineV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PipelinesControllerGetPipelineV1Response, error)

	// PosesControllerListPosesV1WithResponse request
	PosesControllerListPosesV1WithResponse(ctx context.Context, params *PosesControllerListPosesV1Params, reqEditors ...RequestEditorFn) (*PosesControllerListPosesV1Response, error)

	// PosesControllerGetPoseV1WithResponse request
	PosesControllerGetPoseV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PosesControllerGetPoseV1Response, error)

	// PosesControllerUpdateMetadataV1WithBodyWithResponse request with any body
	PosesControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PosesControllerUpdateMetadataV1Response, error)

	PosesControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body PosesControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PosesControllerUpdateMetadataV1Response, error)

	// PosesControllerSetPosePreviewV1WithBodyWithResponse request with any body
	PosesControllerSetPosePreviewV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PosesControllerSetPosePreviewV1Response, error)

	PosesControllerSetPosePreviewV1WithResponse(ctx context.Context, id string, body PosesControllerSetPosePreviewV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PosesControllerSetPosePreviewV1Response, error)

	// AccessControllerAccessV1WithResponse request
	AccessControllerAccessV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccessControllerAccessV1Response, error)

	// AccessControllerAttachAccessV1WithBodyWithResponse request with any body
	AccessControllerAttachAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerAttachAccessV1Response, error)

	AccessControllerAttachAccessV1WithResponse(ctx context.Context, id string, body AccessControllerAttachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerAttachAccessV1Response, error)

	// AccessControllerDetachAccessV1WithBodyWithResponse request with any body
	AccessControllerDetachAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerDetachAccessV1Response, error)

	AccessControllerDetachAccessV1WithResponse(ctx context.Context, id string, body AccessControllerDetachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerDetachAccessV1Response, error)

	// AccessControllerGrantAccessV1WithBodyWithResponse request with any body
	AccessControllerGrantAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerGrantAccessV1Response, error)

	AccessControllerGrantAccessV1WithResponse(ctx context.Context, id string, body AccessControllerGrantAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerGrantAccessV1Response, error)

	// AccessControllerRevokeAccessV1WithBodyWithResponse request with any body
	AccessControllerRevokeAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerRevokeAccessV1Response, error)

	AccessControllerRevokeAccessV1WithResponse(ctx context.Context, id string, body AccessControllerRevokeAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerRevokeAccessV1Response, error)

	// StacksControllerListStacksV1WithResponse request
	StacksControllerListStacksV1WithResponse(ctx context.Context, params *StacksControllerListStacksV1Params, reqEditors ...RequestEditorFn) (*StacksControllerListStacksV1Response, error)

	// StacksControllerCreateStackV1WithBodyWithResponse request with any body
	StacksControllerCreateStackV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerCreateStackV1Response, error)

	StacksControllerCreateStackV1WithResponse(ctx context.Context, body StacksControllerCreateStackV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerCreateStackV1Response, error)

	// StacksControllerGetStackV1WithResponse request
	StacksControllerGetStackV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StacksControllerGetStackV1Response, error)

	// StacksControllerAddItemsV1WithBodyWithResponse request with any body
	StacksControllerAddItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerAddItemsV1Response, error)

	StacksControllerAddItemsV1WithResponse(ctx context.Context, id string, body StacksControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerAddItemsV1Response, error)

	// StacksControllerRemoveItemsV1WithBodyWithResponse request with any body
	StacksControllerRemoveItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerRemoveItemsV1Response, error)

	StacksControllerRemoveItemsV1WithResponse(ctx context.Context, id string, body StacksControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerRemoveItemsV1Response, error)

	// StacksControllerUpdateMetadataV1WithBodyWithResponse request with any body
	StacksControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerUpdateMetadataV1Response, error)

	StacksControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body StacksControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerUpdateMetadataV1Response, error)

	// StorageControllerCreateRecordV1WithBodyWithResponse request with any body
	StorageControllerCreateRecordV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerCreateRecordV1Response, error)

	StorageControllerCreateRecordV1WithResponse(ctx context.Context, body StorageControllerCreateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerCreateRecordV1Response, error)

	// StorageControllerDeleteRecordV1WithBodyWithResponse request with any body
	StorageControllerDeleteRecordV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerDeleteRecordV1Response, error)

	StorageControllerDeleteRecordV1WithResponse(ctx context.Context, body StorageControllerDeleteRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerDeleteRecordV1Response, error)

	// StorageControllerGetRecordsV1WithBodyWithResponse request with any body
	StorageControllerGetRecordsV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerGetRecordsV1Response, error)

	StorageControllerGetRecordsV1WithResponse(ctx context.Context, body StorageControllerGetRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerGetRecordsV1Response, error)

	// StorageControllerUpdateRecordV1WithBodyWithResponse request with any body
	StorageControllerUpdateRecordV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerUpdateRecordV1Response, error)

	StorageControllerUpdateRecordV1WithResponse(ctx context.Context, body StorageControllerUpdateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerUpdateRecordV1Response, error)

	// WebsocketControllerRegisterWebsocketV1WithResponse request
	WebsocketControllerRegisterWebsocketV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketControllerRegisterWebsocketV1Response, error)

	// WebsocketControllerGetSettingsV1WithResponse request
	WebsocketControllerGetSettingsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketControllerGetSettingsV1Response, error)
}

type AccountsControllerListAccountsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAccountsDto
}

// Status returns HTTPResponse.Status
func (r AccountsControllerListAccountsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsControllerListAccountsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsControllerCreateAccountV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r AccountsControllerCreateAccountV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsControllerCreateAccountV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsControllerGetAccountByAliasV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r AccountsControllerGetAccountByAliasV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsControllerGetAccountByAliasV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsControllerGetSelfV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r AccountsControllerGetSelfV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsControllerGetSelfV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalancesControllerGetBalanceForSelfV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResultDto
}

// Status returns HTTPResponse.Status
func (r BalancesControllerGetBalanceForSelfV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalancesControllerGetBalanceForSelfV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsControllerGetAccountV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r AccountsControllerGetAccountV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsControllerGetAccountV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalancesControllerGetBalanceV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResultDto
}

// Status returns HTTPResponse.Status
func (r BalancesControllerGetBalanceV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalancesControllerGetBalanceV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BalancesControllerAddBalanceV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BalancesControllerAddBalanceV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BalancesControllerAddBalanceV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccessAttachV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccessAttachV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccessAttachV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccessGrantV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccessGrantV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccessGrantV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsBalanceAddV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsBalanceAddV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsBalanceAddV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsBalanceGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResultDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsBalanceGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsBalanceGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsBalanceSelfV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceResultDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsBalanceSelfV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsBalanceSelfV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsCreateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsCreateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsCreateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAccountsDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallAccountsSelfV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallAccountsSelfV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallAccountsSelfV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsCreateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsCreateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsCreateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsItemsAddV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsItemsAddV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsItemsAddV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsItemsListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionItemsDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsItemsListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsItemsListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsItemsRemoveV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsItemsRemoveV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsItemsRemoveV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionsDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallCollectionsMetadataUpdateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallCollectionsMetadataUpdateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallCollectionsMetadataUpdateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallGroupsAccountsAddV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallGroupsAccountsAddV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallGroupsAccountsAddV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallGroupsAccountsRemoveV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallGroupsAccountsRemoveV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallGroupsAccountsRemoveV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallGroupsCreateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallGroupsCreateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallGroupsCreateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallGroupsDeleteV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallGroupsDeleteV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallGroupsDeleteV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallGroupsGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallGroupsGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallGroupsGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallImagesGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallImagesGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallImagesGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallImagesGetManyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageUrlResponseDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallImagesGetManyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallImagesGetManyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallImagesRepresentationsGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageRepresentationResponseDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallImagesRepresentationsGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallImagesRepresentationsGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsGetManyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OperationEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsGetManyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsGetManyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOperationsDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsMetadataUpdateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsMetadataUpdateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsMetadataUpdateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunCompositeV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompositeV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunCompositeV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunCompositeV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunCropV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CropV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunCropV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunCropV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunCutV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CutV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunCutV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunCutV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunGptV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GptV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunGptV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunGptV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunHauteLindaV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HauteLindaV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunHauteLindaV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunHauteLindaV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunHauteNaomiV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HauteNaomiV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunHauteNaomiV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunHauteNaomiV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunImagineKateV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImagineKateV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunImagineKateV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunImagineKateV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunInpaintKateV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InpaintKateV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunInpaintKateV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunInpaintKateV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunNegateImageV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NegateImageV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunNegateImageV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunNegateImageV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunNoiseV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoiseV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunNoiseV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunNoiseV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunObjectDetectionV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectDetectionV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunObjectDetectionV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunObjectDetectionV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunPoseEstimationV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoseEstimationV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunPoseEstimationV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunPoseEstimationV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SegmentAnythingEmbeddingsV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SegmentAnythingMaskV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunUpscaleV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpscaleV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunUpscaleV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunUpscaleV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsRunVtonGiseleV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VtonGiseleV1Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsRunVtonGiseleV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsRunVtonGiseleV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallOperationsWaitV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallOperationsWaitV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallOperationsWaitV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallPosesGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoseEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallPosesGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallPosesGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallPosesListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPosesDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallPosesListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallPosesListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallPosesPreviewSetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallPosesPreviewSetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallPosesPreviewSetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStacksCreateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStacksCreateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStacksCreateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStacksGetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStacksGetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStacksGetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStacksItemsAddV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStacksItemsAddV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStacksItemsAddV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStacksItemsRemoveV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStacksItemsRemoveV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStacksItemsRemoveV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStacksListV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListStacksDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStacksListV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStacksListV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStacksMetadataUpdateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStacksMetadataUpdateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStacksMetadataUpdateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStorageCreateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStorageCreateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStorageCreateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStorageDeleteV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStorageDeleteV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStorageDeleteV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStorageGetManyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StorageRecordsResultDto
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStorageGetManyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStorageGetManyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallControllerCallStorageUpdateV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageEntity
}

// Status returns HTTPResponse.Status
func (r CallControllerCallStorageUpdateV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallControllerCallStorageUpdateV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerListCollectionsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionsDto
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerListCollectionsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerListCollectionsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerCreateCollectionV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CollectionEntity
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerCreateCollectionV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerCreateCollectionV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerGetCollectionV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionEntity
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerGetCollectionV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerGetCollectionV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerListItemsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCollectionItemsDto
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerListItemsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerListItemsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerAddItemsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerAddItemsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerAddItemsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerRemoveItemsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerRemoveItemsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerRemoveItemsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CollectionsControllerUpdateMetadataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEntity
}

// Status returns HTTPResponse.Status
func (r CollectionsControllerUpdateMetadataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CollectionsControllerUpdateMetadataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerCreateGroupV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GroupEntity
}

// Status returns HTTPResponse.Status
func (r GroupsControllerCreateGroupV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerCreateGroupV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerDeleteGroupV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupsControllerDeleteGroupV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerDeleteGroupV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerGetGroupV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupEntity
}

// Status returns HTTPResponse.Status
func (r GroupsControllerGetGroupV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerGetGroupV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerAddAccountV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupsControllerAddAccountV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerAddAccountV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GroupsControllerRemoveAccountV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GroupsControllerRemoveAccountV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GroupsControllerRemoveAccountV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImagesControllerGetUrlsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ImageEntity
}

// Status returns HTTPResponse.Status
func (r ImagesControllerGetUrlsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImagesControllerGetUrlsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImagesControllerFinalizeUploadV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImageEntity
}

// Status returns HTTPResponse.Status
func (r ImagesControllerFinalizeUploadV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImagesControllerFinalizeUploadV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImagesControllerStartUploadV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InitializeImageUploadResultDto
}

// Status returns HTTPResponse.Status
func (r ImagesControllerStartUploadV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImagesControllerStartUploadV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImagesControllerGetImageV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageEntity
}

// Status returns HTTPResponse.Status
func (r ImagesControllerGetImageV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImagesControllerGetImageV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImagesControllerGetRepresentationV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImageRepresentationResponseDto
}

// Status returns HTTPResponse.Status
func (r ImagesControllerGetRepresentationV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImagesControllerGetRepresentationV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerListOperationsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListOperationsDto
}

// Status returns HTTPResponse.Status
func (r OperationsControllerListOperationsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerListOperationsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerGetOperationsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OperationEntity
}

// Status returns HTTPResponse.Status
func (r OperationsControllerGetOperationsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerGetOperationsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunCompositeV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CompositeV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunCompositeV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunCompositeV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunCropV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CropV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunCropV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunCropV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunCutV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CutV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunCutV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunCutV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunGptV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GptV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunGptV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunGptV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunHauteLindaV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HauteLindaV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunHauteLindaV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunHauteLindaV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunHauteNaomiV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HauteNaomiV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunHauteNaomiV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunHauteNaomiV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunImagineKateV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ImagineKateV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunImagineKateV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunImagineKateV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunInpaintKateV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InpaintKateV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunInpaintKateV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunInpaintKateV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunNegateImageV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NegateImageV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunNegateImageV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunNegateImageV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunNoiseV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NoiseV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunNoiseV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunNoiseV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunObjectDetectionV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectDetectionV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunObjectDetectionV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunObjectDetectionV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunPoseEstimationV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PoseEstimationV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunPoseEstimationV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunPoseEstimationV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SegmentAnythingEmbeddingsV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunSegmentAnythingMaskV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SegmentAnythingMaskV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunSegmentAnythingMaskV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunSegmentAnythingMaskV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunUpscaleV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpscaleV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunUpscaleV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunUpscaleV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerRunVtonGiseleV1V1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *VtonGiseleV1Response
}

// Status returns HTTPResponse.Status
func (r OperationsControllerRunVtonGiseleV1V1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerRunVtonGiseleV1V1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerGetOperationV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationEntity
}

// Status returns HTTPResponse.Status
func (r OperationsControllerGetOperationV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerGetOperationV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OperationsControllerUpdateMetadataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEntity
}

// Status returns HTTPResponse.Status
func (r OperationsControllerUpdateMetadataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsControllerUpdateMetadataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsControllerListAvailablePermissionsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r PermissionsControllerListAvailablePermissionsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsControllerListAvailablePermissionsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelinesControllerListPipelinesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPipelinesDto
}

// Status returns HTTPResponse.Status
func (r PipelinesControllerListPipelinesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelinesControllerListPipelinesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelinesControllerCreatePipelineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineEntity
}

// Status returns HTTPResponse.Status
func (r PipelinesControllerCreatePipelineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelinesControllerCreatePipelineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PipelinesControllerGetPipelineV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineEntity
}

// Status returns HTTPResponse.Status
func (r PipelinesControllerGetPipelineV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PipelinesControllerGetPipelineV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PosesControllerListPosesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPosesDto
}

// Status returns HTTPResponse.Status
func (r PosesControllerListPosesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PosesControllerListPosesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PosesControllerGetPoseV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoseEntity
}

// Status returns HTTPResponse.Status
func (r PosesControllerGetPoseV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PosesControllerGetPoseV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PosesControllerUpdateMetadataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEntity
}

// Status returns HTTPResponse.Status
func (r PosesControllerUpdateMetadataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PosesControllerUpdateMetadataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PosesControllerSetPosePreviewV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PosesControllerSetPosePreviewV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PosesControllerSetPosePreviewV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControllerAccessV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAccessControllerDto
}

// Status returns HTTPResponse.Status
func (r AccessControllerAccessV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControllerAccessV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControllerAttachAccessV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccessControllerAttachAccessV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControllerAttachAccessV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControllerDetachAccessV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccessControllerDetachAccessV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControllerDetachAccessV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControllerGrantAccessV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccessControllerGrantAccessV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControllerGrantAccessV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccessControllerRevokeAccessV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AccessControllerRevokeAccessV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccessControllerRevokeAccessV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StacksControllerListStacksV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListStacksDto
}

// Status returns HTTPResponse.Status
func (r StacksControllerListStacksV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StacksControllerListStacksV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StacksControllerCreateStackV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StackEntity
}

// Status returns HTTPResponse.Status
func (r StacksControllerCreateStackV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StacksControllerCreateStackV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StacksControllerGetStackV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r StacksControllerGetStackV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StacksControllerGetStackV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StacksControllerAddItemsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r StacksControllerAddItemsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StacksControllerAddItemsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StacksControllerRemoveItemsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StackEntity
}

// Status returns HTTPResponse.Status
func (r StacksControllerRemoveItemsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StacksControllerRemoveItemsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StacksControllerUpdateMetadataV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceEntity
}

// Status returns HTTPResponse.Status
func (r StacksControllerUpdateMetadataV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StacksControllerUpdateMetadataV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StorageControllerCreateRecordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StorageEntity
}

// Status returns HTTPResponse.Status
func (r StorageControllerCreateRecordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StorageControllerCreateRecordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StorageControllerDeleteRecordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r StorageControllerDeleteRecordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StorageControllerDeleteRecordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StorageControllerGetRecordsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StorageRecordsResultDto
}

// Status returns HTTPResponse.Status
func (r StorageControllerGetRecordsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StorageControllerGetRecordsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StorageControllerUpdateRecordV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageEntity
}

// Status returns HTTPResponse.Status
func (r StorageControllerUpdateRecordV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StorageControllerUpdateRecordV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketControllerRegisterWebsocketV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WebsocketControllerRegisterWebsocketV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketControllerRegisterWebsocketV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebsocketControllerGetSettingsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WebsocketControllerGetSettingsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebsocketControllerGetSettingsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccountsControllerListAccountsV1WithResponse request returning *AccountsControllerListAccountsV1Response
func (c *ClientWithResponses) AccountsControllerListAccountsV1WithResponse(ctx context.Context, params *AccountsControllerListAccountsV1Params, reqEditors ...RequestEditorFn) (*AccountsControllerListAccountsV1Response, error) {
	rsp, err := c.AccountsControllerListAccountsV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsControllerListAccountsV1Response(rsp)
}

// AccountsControllerCreateAccountV1WithBodyWithResponse request with arbitrary body returning *AccountsControllerCreateAccountV1Response
func (c *ClientWithResponses) AccountsControllerCreateAccountV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsControllerCreateAccountV1Response, error) {
	rsp, err := c.AccountsControllerCreateAccountV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsControllerCreateAccountV1Response(rsp)
}

func (c *ClientWithResponses) AccountsControllerCreateAccountV1WithResponse(ctx context.Context, body AccountsControllerCreateAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsControllerCreateAccountV1Response, error) {
	rsp, err := c.AccountsControllerCreateAccountV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsControllerCreateAccountV1Response(rsp)
}

// AccountsControllerGetAccountByAliasV1WithResponse request returning *AccountsControllerGetAccountByAliasV1Response
func (c *ClientWithResponses) AccountsControllerGetAccountByAliasV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccountsControllerGetAccountByAliasV1Response, error) {
	rsp, err := c.AccountsControllerGetAccountByAliasV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsControllerGetAccountByAliasV1Response(rsp)
}

// AccountsControllerGetSelfV1WithResponse request returning *AccountsControllerGetSelfV1Response
func (c *ClientWithResponses) AccountsControllerGetSelfV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsControllerGetSelfV1Response, error) {
	rsp, err := c.AccountsControllerGetSelfV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsControllerGetSelfV1Response(rsp)
}

// BalancesControllerGetBalanceForSelfV1WithResponse request returning *BalancesControllerGetBalanceForSelfV1Response
func (c *ClientWithResponses) BalancesControllerGetBalanceForSelfV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BalancesControllerGetBalanceForSelfV1Response, error) {
	rsp, err := c.BalancesControllerGetBalanceForSelfV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalancesControllerGetBalanceForSelfV1Response(rsp)
}

// AccountsControllerGetAccountV1WithResponse request returning *AccountsControllerGetAccountV1Response
func (c *ClientWithResponses) AccountsControllerGetAccountV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccountsControllerGetAccountV1Response, error) {
	rsp, err := c.AccountsControllerGetAccountV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsControllerGetAccountV1Response(rsp)
}

// BalancesControllerGetBalanceV1WithResponse request returning *BalancesControllerGetBalanceV1Response
func (c *ClientWithResponses) BalancesControllerGetBalanceV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BalancesControllerGetBalanceV1Response, error) {
	rsp, err := c.BalancesControllerGetBalanceV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalancesControllerGetBalanceV1Response(rsp)
}

// BalancesControllerAddBalanceV1WithBodyWithResponse request with arbitrary body returning *BalancesControllerAddBalanceV1Response
func (c *ClientWithResponses) BalancesControllerAddBalanceV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BalancesControllerAddBalanceV1Response, error) {
	rsp, err := c.BalancesControllerAddBalanceV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalancesControllerAddBalanceV1Response(rsp)
}

func (c *ClientWithResponses) BalancesControllerAddBalanceV1WithResponse(ctx context.Context, id string, body BalancesControllerAddBalanceV1JSONRequestBody, reqEditors ...RequestEditorFn) (*BalancesControllerAddBalanceV1Response, error) {
	rsp, err := c.BalancesControllerAddBalanceV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBalancesControllerAddBalanceV1Response(rsp)
}

// CallControllerCallAccessAttachV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccessAttachV1Response
func (c *ClientWithResponses) CallControllerCallAccessAttachV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccessAttachV1Response, error) {
	rsp, err := c.CallControllerCallAccessAttachV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccessAttachV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccessAttachV1WithResponse(ctx context.Context, body CallControllerCallAccessAttachV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccessAttachV1Response, error) {
	rsp, err := c.CallControllerCallAccessAttachV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccessAttachV1Response(rsp)
}

// CallControllerCallAccessGrantV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccessGrantV1Response
func (c *ClientWithResponses) CallControllerCallAccessGrantV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccessGrantV1Response, error) {
	rsp, err := c.CallControllerCallAccessGrantV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccessGrantV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccessGrantV1WithResponse(ctx context.Context, body CallControllerCallAccessGrantV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccessGrantV1Response, error) {
	rsp, err := c.CallControllerCallAccessGrantV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccessGrantV1Response(rsp)
}

// CallControllerCallAccountsBalanceAddV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsBalanceAddV1Response
func (c *ClientWithResponses) CallControllerCallAccountsBalanceAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceAddV1Response, error) {
	rsp, err := c.CallControllerCallAccountsBalanceAddV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsBalanceAddV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsBalanceAddV1WithResponse(ctx context.Context, body CallControllerCallAccountsBalanceAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceAddV1Response, error) {
	rsp, err := c.CallControllerCallAccountsBalanceAddV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsBalanceAddV1Response(rsp)
}

// CallControllerCallAccountsBalanceGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsBalanceGetV1Response
func (c *ClientWithResponses) CallControllerCallAccountsBalanceGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceGetV1Response, error) {
	rsp, err := c.CallControllerCallAccountsBalanceGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsBalanceGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsBalanceGetV1WithResponse(ctx context.Context, body CallControllerCallAccountsBalanceGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceGetV1Response, error) {
	rsp, err := c.CallControllerCallAccountsBalanceGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsBalanceGetV1Response(rsp)
}

// CallControllerCallAccountsBalanceSelfV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsBalanceSelfV1Response
func (c *ClientWithResponses) CallControllerCallAccountsBalanceSelfV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceSelfV1Response, error) {
	rsp, err := c.CallControllerCallAccountsBalanceSelfV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsBalanceSelfV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsBalanceSelfV1WithResponse(ctx context.Context, body CallControllerCallAccountsBalanceSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsBalanceSelfV1Response, error) {
	rsp, err := c.CallControllerCallAccountsBalanceSelfV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsBalanceSelfV1Response(rsp)
}

// CallControllerCallAccountsCreateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsCreateV1Response
func (c *ClientWithResponses) CallControllerCallAccountsCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsCreateV1Response, error) {
	rsp, err := c.CallControllerCallAccountsCreateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsCreateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsCreateV1WithResponse(ctx context.Context, body CallControllerCallAccountsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsCreateV1Response, error) {
	rsp, err := c.CallControllerCallAccountsCreateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsCreateV1Response(rsp)
}

// CallControllerCallAccountsGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsGetV1Response
func (c *ClientWithResponses) CallControllerCallAccountsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsGetV1Response, error) {
	rsp, err := c.CallControllerCallAccountsGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsGetV1WithResponse(ctx context.Context, body CallControllerCallAccountsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsGetV1Response, error) {
	rsp, err := c.CallControllerCallAccountsGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsGetV1Response(rsp)
}

// CallControllerCallAccountsListV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsListV1Response
func (c *ClientWithResponses) CallControllerCallAccountsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsListV1Response, error) {
	rsp, err := c.CallControllerCallAccountsListV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsListV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsListV1WithResponse(ctx context.Context, body CallControllerCallAccountsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsListV1Response, error) {
	rsp, err := c.CallControllerCallAccountsListV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsListV1Response(rsp)
}

// CallControllerCallAccountsSelfV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallAccountsSelfV1Response
func (c *ClientWithResponses) CallControllerCallAccountsSelfV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsSelfV1Response, error) {
	rsp, err := c.CallControllerCallAccountsSelfV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsSelfV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallAccountsSelfV1WithResponse(ctx context.Context, body CallControllerCallAccountsSelfV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallAccountsSelfV1Response, error) {
	rsp, err := c.CallControllerCallAccountsSelfV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallAccountsSelfV1Response(rsp)
}

// CallControllerCallCollectionsCreateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsCreateV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsCreateV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsCreateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsCreateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsCreateV1WithResponse(ctx context.Context, body CallControllerCallCollectionsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsCreateV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsCreateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsCreateV1Response(rsp)
}

// CallControllerCallCollectionsGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsGetV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsGetV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsGetV1WithResponse(ctx context.Context, body CallControllerCallCollectionsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsGetV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsGetV1Response(rsp)
}

// CallControllerCallCollectionsItemsAddV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsItemsAddV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsItemsAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsAddV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsItemsAddV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsItemsAddV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsItemsAddV1WithResponse(ctx context.Context, body CallControllerCallCollectionsItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsAddV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsItemsAddV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsItemsAddV1Response(rsp)
}

// CallControllerCallCollectionsItemsListV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsItemsListV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsItemsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsListV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsItemsListV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsItemsListV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsItemsListV1WithResponse(ctx context.Context, body CallControllerCallCollectionsItemsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsListV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsItemsListV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsItemsListV1Response(rsp)
}

// CallControllerCallCollectionsItemsRemoveV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsItemsRemoveV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsItemsRemoveV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsRemoveV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsItemsRemoveV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsItemsRemoveV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsItemsRemoveV1WithResponse(ctx context.Context, body CallControllerCallCollectionsItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsItemsRemoveV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsItemsRemoveV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsItemsRemoveV1Response(rsp)
}

// CallControllerCallCollectionsListV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsListV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsListV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsListV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsListV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsListV1WithResponse(ctx context.Context, body CallControllerCallCollectionsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsListV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsListV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsListV1Response(rsp)
}

// CallControllerCallCollectionsMetadataUpdateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallCollectionsMetadataUpdateV1Response
func (c *ClientWithResponses) CallControllerCallCollectionsMetadataUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsMetadataUpdateV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsMetadataUpdateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsMetadataUpdateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallCollectionsMetadataUpdateV1WithResponse(ctx context.Context, body CallControllerCallCollectionsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallCollectionsMetadataUpdateV1Response, error) {
	rsp, err := c.CallControllerCallCollectionsMetadataUpdateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallCollectionsMetadataUpdateV1Response(rsp)
}

// CallControllerCallGroupsAccountsAddV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallGroupsAccountsAddV1Response
func (c *ClientWithResponses) CallControllerCallGroupsAccountsAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsAddV1Response, error) {
	rsp, err := c.CallControllerCallGroupsAccountsAddV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsAccountsAddV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallGroupsAccountsAddV1WithResponse(ctx context.Context, body CallControllerCallGroupsAccountsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsAddV1Response, error) {
	rsp, err := c.CallControllerCallGroupsAccountsAddV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsAccountsAddV1Response(rsp)
}

// CallControllerCallGroupsAccountsRemoveV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallGroupsAccountsRemoveV1Response
func (c *ClientWithResponses) CallControllerCallGroupsAccountsRemoveV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsRemoveV1Response, error) {
	rsp, err := c.CallControllerCallGroupsAccountsRemoveV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsAccountsRemoveV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallGroupsAccountsRemoveV1WithResponse(ctx context.Context, body CallControllerCallGroupsAccountsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsAccountsRemoveV1Response, error) {
	rsp, err := c.CallControllerCallGroupsAccountsRemoveV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsAccountsRemoveV1Response(rsp)
}

// CallControllerCallGroupsCreateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallGroupsCreateV1Response
func (c *ClientWithResponses) CallControllerCallGroupsCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsCreateV1Response, error) {
	rsp, err := c.CallControllerCallGroupsCreateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsCreateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallGroupsCreateV1WithResponse(ctx context.Context, body CallControllerCallGroupsCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsCreateV1Response, error) {
	rsp, err := c.CallControllerCallGroupsCreateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsCreateV1Response(rsp)
}

// CallControllerCallGroupsDeleteV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallGroupsDeleteV1Response
func (c *ClientWithResponses) CallControllerCallGroupsDeleteV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsDeleteV1Response, error) {
	rsp, err := c.CallControllerCallGroupsDeleteV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsDeleteV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallGroupsDeleteV1WithResponse(ctx context.Context, body CallControllerCallGroupsDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsDeleteV1Response, error) {
	rsp, err := c.CallControllerCallGroupsDeleteV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsDeleteV1Response(rsp)
}

// CallControllerCallGroupsGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallGroupsGetV1Response
func (c *ClientWithResponses) CallControllerCallGroupsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsGetV1Response, error) {
	rsp, err := c.CallControllerCallGroupsGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallGroupsGetV1WithResponse(ctx context.Context, body CallControllerCallGroupsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallGroupsGetV1Response, error) {
	rsp, err := c.CallControllerCallGroupsGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallGroupsGetV1Response(rsp)
}

// CallControllerCallImagesGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallImagesGetV1Response
func (c *ClientWithResponses) CallControllerCallImagesGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetV1Response, error) {
	rsp, err := c.CallControllerCallImagesGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallImagesGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallImagesGetV1WithResponse(ctx context.Context, body CallControllerCallImagesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetV1Response, error) {
	rsp, err := c.CallControllerCallImagesGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallImagesGetV1Response(rsp)
}

// CallControllerCallImagesGetManyV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallImagesGetManyV1Response
func (c *ClientWithResponses) CallControllerCallImagesGetManyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetManyV1Response, error) {
	rsp, err := c.CallControllerCallImagesGetManyV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallImagesGetManyV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallImagesGetManyV1WithResponse(ctx context.Context, body CallControllerCallImagesGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallImagesGetManyV1Response, error) {
	rsp, err := c.CallControllerCallImagesGetManyV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallImagesGetManyV1Response(rsp)
}

// CallControllerCallImagesRepresentationsGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallImagesRepresentationsGetV1Response
func (c *ClientWithResponses) CallControllerCallImagesRepresentationsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallImagesRepresentationsGetV1Response, error) {
	rsp, err := c.CallControllerCallImagesRepresentationsGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallImagesRepresentationsGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallImagesRepresentationsGetV1WithResponse(ctx context.Context, body CallControllerCallImagesRepresentationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallImagesRepresentationsGetV1Response, error) {
	rsp, err := c.CallControllerCallImagesRepresentationsGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallImagesRepresentationsGetV1Response(rsp)
}

// CallControllerCallOperationsGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsGetV1Response
func (c *ClientWithResponses) CallControllerCallOperationsGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetV1Response, error) {
	rsp, err := c.CallControllerCallOperationsGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsGetV1WithResponse(ctx context.Context, body CallControllerCallOperationsGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetV1Response, error) {
	rsp, err := c.CallControllerCallOperationsGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsGetV1Response(rsp)
}

// CallControllerCallOperationsGetManyV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsGetManyV1Response
func (c *ClientWithResponses) CallControllerCallOperationsGetManyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetManyV1Response, error) {
	rsp, err := c.CallControllerCallOperationsGetManyV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsGetManyV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsGetManyV1WithResponse(ctx context.Context, body CallControllerCallOperationsGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsGetManyV1Response, error) {
	rsp, err := c.CallControllerCallOperationsGetManyV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsGetManyV1Response(rsp)
}

// CallControllerCallOperationsListV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsListV1Response
func (c *ClientWithResponses) CallControllerCallOperationsListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsListV1Response, error) {
	rsp, err := c.CallControllerCallOperationsListV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsListV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsListV1WithResponse(ctx context.Context, body CallControllerCallOperationsListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsListV1Response, error) {
	rsp, err := c.CallControllerCallOperationsListV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsListV1Response(rsp)
}

// CallControllerCallOperationsMetadataUpdateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsMetadataUpdateV1Response
func (c *ClientWithResponses) CallControllerCallOperationsMetadataUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsMetadataUpdateV1Response, error) {
	rsp, err := c.CallControllerCallOperationsMetadataUpdateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsMetadataUpdateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsMetadataUpdateV1WithResponse(ctx context.Context, body CallControllerCallOperationsMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsMetadataUpdateV1Response, error) {
	rsp, err := c.CallControllerCallOperationsMetadataUpdateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsMetadataUpdateV1Response(rsp)
}

// CallControllerCallOperationsRunCompositeV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunCompositeV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunCompositeV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCompositeV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunCompositeV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunCompositeV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunCompositeV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCompositeV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunCompositeV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunCompositeV1V1Response(rsp)
}

// CallControllerCallOperationsRunCropV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunCropV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunCropV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCropV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunCropV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunCropV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunCropV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCropV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunCropV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunCropV1V1Response(rsp)
}

// CallControllerCallOperationsRunCutV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunCutV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunCutV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCutV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunCutV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunCutV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunCutV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunCutV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunCutV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunCutV1V1Response(rsp)
}

// CallControllerCallOperationsRunGptV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunGptV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunGptV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunGptV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunGptV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunGptV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunGptV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunGptV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunGptV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunGptV1V1Response(rsp)
}

// CallControllerCallOperationsRunHauteLindaV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunHauteLindaV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunHauteLindaV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteLindaV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunHauteLindaV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunHauteLindaV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunHauteLindaV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteLindaV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunHauteLindaV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunHauteLindaV1V1Response(rsp)
}

// CallControllerCallOperationsRunHauteNaomiV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunHauteNaomiV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunHauteNaomiV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteNaomiV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunHauteNaomiV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunHauteNaomiV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunHauteNaomiV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunHauteNaomiV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunHauteNaomiV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunHauteNaomiV1V1Response(rsp)
}

// CallControllerCallOperationsRunImagineKateV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunImagineKateV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunImagineKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunImagineKateV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunImagineKateV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunImagineKateV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunImagineKateV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunImagineKateV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunImagineKateV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunImagineKateV1V1Response(rsp)
}

// CallControllerCallOperationsRunInpaintKateV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunInpaintKateV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunInpaintKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunInpaintKateV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunInpaintKateV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunInpaintKateV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunInpaintKateV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunInpaintKateV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunInpaintKateV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunInpaintKateV1V1Response(rsp)
}

// CallControllerCallOperationsRunNegateImageV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunNegateImageV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunNegateImageV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNegateImageV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunNegateImageV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunNegateImageV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunNegateImageV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNegateImageV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunNegateImageV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunNegateImageV1V1Response(rsp)
}

// CallControllerCallOperationsRunNoiseV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunNoiseV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunNoiseV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNoiseV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunNoiseV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunNoiseV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunNoiseV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunNoiseV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunNoiseV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunNoiseV1V1Response(rsp)
}

// CallControllerCallOperationsRunObjectDetectionV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunObjectDetectionV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunObjectDetectionV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunObjectDetectionV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunObjectDetectionV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunObjectDetectionV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunObjectDetectionV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunObjectDetectionV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunObjectDetectionV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunObjectDetectionV1V1Response(rsp)
}

// CallControllerCallOperationsRunPoseEstimationV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunPoseEstimationV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunPoseEstimationV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunPoseEstimationV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunPoseEstimationV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunPoseEstimationV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunPoseEstimationV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunPoseEstimationV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunPoseEstimationV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunPoseEstimationV1V1Response(rsp)
}

// CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response(rsp)
}

// CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunSegmentAnythingMaskV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunSegmentAnythingMaskV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunSegmentAnythingMaskV1V1Response(rsp)
}

// CallControllerCallOperationsRunUpscaleV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunUpscaleV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunUpscaleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunUpscaleV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunUpscaleV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunUpscaleV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunUpscaleV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunUpscaleV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunUpscaleV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunUpscaleV1V1Response(rsp)
}

// CallControllerCallOperationsRunVtonGiseleV1V1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsRunVtonGiseleV1V1Response
func (c *ClientWithResponses) CallControllerCallOperationsRunVtonGiseleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunVtonGiseleV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunVtonGiseleV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunVtonGiseleV1V1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsRunVtonGiseleV1V1WithResponse(ctx context.Context, body CallControllerCallOperationsRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsRunVtonGiseleV1V1Response, error) {
	rsp, err := c.CallControllerCallOperationsRunVtonGiseleV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsRunVtonGiseleV1V1Response(rsp)
}

// CallControllerCallOperationsWaitV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallOperationsWaitV1Response
func (c *ClientWithResponses) CallControllerCallOperationsWaitV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsWaitV1Response, error) {
	rsp, err := c.CallControllerCallOperationsWaitV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsWaitV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallOperationsWaitV1WithResponse(ctx context.Context, body CallControllerCallOperationsWaitV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallOperationsWaitV1Response, error) {
	rsp, err := c.CallControllerCallOperationsWaitV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallOperationsWaitV1Response(rsp)
}

// CallControllerCallPosesGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallPosesGetV1Response
func (c *ClientWithResponses) CallControllerCallPosesGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallPosesGetV1Response, error) {
	rsp, err := c.CallControllerCallPosesGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallPosesGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallPosesGetV1WithResponse(ctx context.Context, body CallControllerCallPosesGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallPosesGetV1Response, error) {
	rsp, err := c.CallControllerCallPosesGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallPosesGetV1Response(rsp)
}

// CallControllerCallPosesListV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallPosesListV1Response
func (c *ClientWithResponses) CallControllerCallPosesListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallPosesListV1Response, error) {
	rsp, err := c.CallControllerCallPosesListV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallPosesListV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallPosesListV1WithResponse(ctx context.Context, body CallControllerCallPosesListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallPosesListV1Response, error) {
	rsp, err := c.CallControllerCallPosesListV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallPosesListV1Response(rsp)
}

// CallControllerCallPosesPreviewSetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallPosesPreviewSetV1Response
func (c *ClientWithResponses) CallControllerCallPosesPreviewSetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallPosesPreviewSetV1Response, error) {
	rsp, err := c.CallControllerCallPosesPreviewSetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallPosesPreviewSetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallPosesPreviewSetV1WithResponse(ctx context.Context, body CallControllerCallPosesPreviewSetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallPosesPreviewSetV1Response, error) {
	rsp, err := c.CallControllerCallPosesPreviewSetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallPosesPreviewSetV1Response(rsp)
}

// CallControllerCallStacksCreateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStacksCreateV1Response
func (c *ClientWithResponses) CallControllerCallStacksCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksCreateV1Response, error) {
	rsp, err := c.CallControllerCallStacksCreateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksCreateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStacksCreateV1WithResponse(ctx context.Context, body CallControllerCallStacksCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksCreateV1Response, error) {
	rsp, err := c.CallControllerCallStacksCreateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksCreateV1Response(rsp)
}

// CallControllerCallStacksGetV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStacksGetV1Response
func (c *ClientWithResponses) CallControllerCallStacksGetV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksGetV1Response, error) {
	rsp, err := c.CallControllerCallStacksGetV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksGetV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStacksGetV1WithResponse(ctx context.Context, body CallControllerCallStacksGetV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksGetV1Response, error) {
	rsp, err := c.CallControllerCallStacksGetV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksGetV1Response(rsp)
}

// CallControllerCallStacksItemsAddV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStacksItemsAddV1Response
func (c *ClientWithResponses) CallControllerCallStacksItemsAddV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsAddV1Response, error) {
	rsp, err := c.CallControllerCallStacksItemsAddV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksItemsAddV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStacksItemsAddV1WithResponse(ctx context.Context, body CallControllerCallStacksItemsAddV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsAddV1Response, error) {
	rsp, err := c.CallControllerCallStacksItemsAddV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksItemsAddV1Response(rsp)
}

// CallControllerCallStacksItemsRemoveV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStacksItemsRemoveV1Response
func (c *ClientWithResponses) CallControllerCallStacksItemsRemoveV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsRemoveV1Response, error) {
	rsp, err := c.CallControllerCallStacksItemsRemoveV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksItemsRemoveV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStacksItemsRemoveV1WithResponse(ctx context.Context, body CallControllerCallStacksItemsRemoveV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksItemsRemoveV1Response, error) {
	rsp, err := c.CallControllerCallStacksItemsRemoveV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksItemsRemoveV1Response(rsp)
}

// CallControllerCallStacksListV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStacksListV1Response
func (c *ClientWithResponses) CallControllerCallStacksListV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksListV1Response, error) {
	rsp, err := c.CallControllerCallStacksListV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksListV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStacksListV1WithResponse(ctx context.Context, body CallControllerCallStacksListV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksListV1Response, error) {
	rsp, err := c.CallControllerCallStacksListV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksListV1Response(rsp)
}

// CallControllerCallStacksMetadataUpdateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStacksMetadataUpdateV1Response
func (c *ClientWithResponses) CallControllerCallStacksMetadataUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStacksMetadataUpdateV1Response, error) {
	rsp, err := c.CallControllerCallStacksMetadataUpdateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksMetadataUpdateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStacksMetadataUpdateV1WithResponse(ctx context.Context, body CallControllerCallStacksMetadataUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStacksMetadataUpdateV1Response, error) {
	rsp, err := c.CallControllerCallStacksMetadataUpdateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStacksMetadataUpdateV1Response(rsp)
}

// CallControllerCallStorageCreateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStorageCreateV1Response
func (c *ClientWithResponses) CallControllerCallStorageCreateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageCreateV1Response, error) {
	rsp, err := c.CallControllerCallStorageCreateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageCreateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStorageCreateV1WithResponse(ctx context.Context, body CallControllerCallStorageCreateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageCreateV1Response, error) {
	rsp, err := c.CallControllerCallStorageCreateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageCreateV1Response(rsp)
}

// CallControllerCallStorageDeleteV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStorageDeleteV1Response
func (c *ClientWithResponses) CallControllerCallStorageDeleteV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageDeleteV1Response, error) {
	rsp, err := c.CallControllerCallStorageDeleteV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageDeleteV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStorageDeleteV1WithResponse(ctx context.Context, body CallControllerCallStorageDeleteV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageDeleteV1Response, error) {
	rsp, err := c.CallControllerCallStorageDeleteV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageDeleteV1Response(rsp)
}

// CallControllerCallStorageGetManyV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStorageGetManyV1Response
func (c *ClientWithResponses) CallControllerCallStorageGetManyV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageGetManyV1Response, error) {
	rsp, err := c.CallControllerCallStorageGetManyV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageGetManyV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStorageGetManyV1WithResponse(ctx context.Context, body CallControllerCallStorageGetManyV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageGetManyV1Response, error) {
	rsp, err := c.CallControllerCallStorageGetManyV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageGetManyV1Response(rsp)
}

// CallControllerCallStorageUpdateV1WithBodyWithResponse request with arbitrary body returning *CallControllerCallStorageUpdateV1Response
func (c *ClientWithResponses) CallControllerCallStorageUpdateV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallControllerCallStorageUpdateV1Response, error) {
	rsp, err := c.CallControllerCallStorageUpdateV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageUpdateV1Response(rsp)
}

func (c *ClientWithResponses) CallControllerCallStorageUpdateV1WithResponse(ctx context.Context, body CallControllerCallStorageUpdateV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CallControllerCallStorageUpdateV1Response, error) {
	rsp, err := c.CallControllerCallStorageUpdateV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallControllerCallStorageUpdateV1Response(rsp)
}

// CollectionsControllerListCollectionsV1WithResponse request returning *CollectionsControllerListCollectionsV1Response
func (c *ClientWithResponses) CollectionsControllerListCollectionsV1WithResponse(ctx context.Context, params *CollectionsControllerListCollectionsV1Params, reqEditors ...RequestEditorFn) (*CollectionsControllerListCollectionsV1Response, error) {
	rsp, err := c.CollectionsControllerListCollectionsV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerListCollectionsV1Response(rsp)
}

// CollectionsControllerCreateCollectionV1WithBodyWithResponse request with arbitrary body returning *CollectionsControllerCreateCollectionV1Response
func (c *ClientWithResponses) CollectionsControllerCreateCollectionV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerCreateCollectionV1Response, error) {
	rsp, err := c.CollectionsControllerCreateCollectionV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerCreateCollectionV1Response(rsp)
}

func (c *ClientWithResponses) CollectionsControllerCreateCollectionV1WithResponse(ctx context.Context, body CollectionsControllerCreateCollectionV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerCreateCollectionV1Response, error) {
	rsp, err := c.CollectionsControllerCreateCollectionV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerCreateCollectionV1Response(rsp)
}

// CollectionsControllerGetCollectionV1WithResponse request returning *CollectionsControllerGetCollectionV1Response
func (c *ClientWithResponses) CollectionsControllerGetCollectionV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CollectionsControllerGetCollectionV1Response, error) {
	rsp, err := c.CollectionsControllerGetCollectionV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerGetCollectionV1Response(rsp)
}

// CollectionsControllerListItemsV1WithResponse request returning *CollectionsControllerListItemsV1Response
func (c *ClientWithResponses) CollectionsControllerListItemsV1WithResponse(ctx context.Context, id string, params *CollectionsControllerListItemsV1Params, reqEditors ...RequestEditorFn) (*CollectionsControllerListItemsV1Response, error) {
	rsp, err := c.CollectionsControllerListItemsV1(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerListItemsV1Response(rsp)
}

// CollectionsControllerAddItemsV1WithBodyWithResponse request with arbitrary body returning *CollectionsControllerAddItemsV1Response
func (c *ClientWithResponses) CollectionsControllerAddItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerAddItemsV1Response, error) {
	rsp, err := c.CollectionsControllerAddItemsV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerAddItemsV1Response(rsp)
}

func (c *ClientWithResponses) CollectionsControllerAddItemsV1WithResponse(ctx context.Context, id string, body CollectionsControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerAddItemsV1Response, error) {
	rsp, err := c.CollectionsControllerAddItemsV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerAddItemsV1Response(rsp)
}

// CollectionsControllerRemoveItemsV1WithBodyWithResponse request with arbitrary body returning *CollectionsControllerRemoveItemsV1Response
func (c *ClientWithResponses) CollectionsControllerRemoveItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerRemoveItemsV1Response, error) {
	rsp, err := c.CollectionsControllerRemoveItemsV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerRemoveItemsV1Response(rsp)
}

func (c *ClientWithResponses) CollectionsControllerRemoveItemsV1WithResponse(ctx context.Context, id string, body CollectionsControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerRemoveItemsV1Response, error) {
	rsp, err := c.CollectionsControllerRemoveItemsV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerRemoveItemsV1Response(rsp)
}

// CollectionsControllerUpdateMetadataV1WithBodyWithResponse request with arbitrary body returning *CollectionsControllerUpdateMetadataV1Response
func (c *ClientWithResponses) CollectionsControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CollectionsControllerUpdateMetadataV1Response, error) {
	rsp, err := c.CollectionsControllerUpdateMetadataV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerUpdateMetadataV1Response(rsp)
}

func (c *ClientWithResponses) CollectionsControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body CollectionsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CollectionsControllerUpdateMetadataV1Response, error) {
	rsp, err := c.CollectionsControllerUpdateMetadataV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCollectionsControllerUpdateMetadataV1Response(rsp)
}

// GroupsControllerCreateGroupV1WithResponse request returning *GroupsControllerCreateGroupV1Response
func (c *ClientWithResponses) GroupsControllerCreateGroupV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GroupsControllerCreateGroupV1Response, error) {
	rsp, err := c.GroupsControllerCreateGroupV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerCreateGroupV1Response(rsp)
}

// GroupsControllerDeleteGroupV1WithResponse request returning *GroupsControllerDeleteGroupV1Response
func (c *ClientWithResponses) GroupsControllerDeleteGroupV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GroupsControllerDeleteGroupV1Response, error) {
	rsp, err := c.GroupsControllerDeleteGroupV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerDeleteGroupV1Response(rsp)
}

// GroupsControllerGetGroupV1WithResponse request returning *GroupsControllerGetGroupV1Response
func (c *ClientWithResponses) GroupsControllerGetGroupV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GroupsControllerGetGroupV1Response, error) {
	rsp, err := c.GroupsControllerGetGroupV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerGetGroupV1Response(rsp)
}

// GroupsControllerAddAccountV1WithBodyWithResponse request with arbitrary body returning *GroupsControllerAddAccountV1Response
func (c *ClientWithResponses) GroupsControllerAddAccountV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerAddAccountV1Response, error) {
	rsp, err := c.GroupsControllerAddAccountV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerAddAccountV1Response(rsp)
}

func (c *ClientWithResponses) GroupsControllerAddAccountV1WithResponse(ctx context.Context, id string, body GroupsControllerAddAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerAddAccountV1Response, error) {
	rsp, err := c.GroupsControllerAddAccountV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerAddAccountV1Response(rsp)
}

// GroupsControllerRemoveAccountV1WithBodyWithResponse request with arbitrary body returning *GroupsControllerRemoveAccountV1Response
func (c *ClientWithResponses) GroupsControllerRemoveAccountV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GroupsControllerRemoveAccountV1Response, error) {
	rsp, err := c.GroupsControllerRemoveAccountV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerRemoveAccountV1Response(rsp)
}

func (c *ClientWithResponses) GroupsControllerRemoveAccountV1WithResponse(ctx context.Context, id string, body GroupsControllerRemoveAccountV1JSONRequestBody, reqEditors ...RequestEditorFn) (*GroupsControllerRemoveAccountV1Response, error) {
	rsp, err := c.GroupsControllerRemoveAccountV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGroupsControllerRemoveAccountV1Response(rsp)
}

// ImagesControllerGetUrlsV1WithBodyWithResponse request with arbitrary body returning *ImagesControllerGetUrlsV1Response
func (c *ClientWithResponses) ImagesControllerGetUrlsV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImagesControllerGetUrlsV1Response, error) {
	rsp, err := c.ImagesControllerGetUrlsV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerGetUrlsV1Response(rsp)
}

func (c *ClientWithResponses) ImagesControllerGetUrlsV1WithResponse(ctx context.Context, body ImagesControllerGetUrlsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ImagesControllerGetUrlsV1Response, error) {
	rsp, err := c.ImagesControllerGetUrlsV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerGetUrlsV1Response(rsp)
}

// ImagesControllerFinalizeUploadV1WithBodyWithResponse request with arbitrary body returning *ImagesControllerFinalizeUploadV1Response
func (c *ClientWithResponses) ImagesControllerFinalizeUploadV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImagesControllerFinalizeUploadV1Response, error) {
	rsp, err := c.ImagesControllerFinalizeUploadV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerFinalizeUploadV1Response(rsp)
}

func (c *ClientWithResponses) ImagesControllerFinalizeUploadV1WithResponse(ctx context.Context, body ImagesControllerFinalizeUploadV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ImagesControllerFinalizeUploadV1Response, error) {
	rsp, err := c.ImagesControllerFinalizeUploadV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerFinalizeUploadV1Response(rsp)
}

// ImagesControllerStartUploadV1WithResponse request returning *ImagesControllerStartUploadV1Response
func (c *ClientWithResponses) ImagesControllerStartUploadV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ImagesControllerStartUploadV1Response, error) {
	rsp, err := c.ImagesControllerStartUploadV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerStartUploadV1Response(rsp)
}

// ImagesControllerGetImageV1WithResponse request returning *ImagesControllerGetImageV1Response
func (c *ClientWithResponses) ImagesControllerGetImageV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ImagesControllerGetImageV1Response, error) {
	rsp, err := c.ImagesControllerGetImageV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerGetImageV1Response(rsp)
}

// ImagesControllerGetRepresentationV1WithResponse request returning *ImagesControllerGetRepresentationV1Response
func (c *ClientWithResponses) ImagesControllerGetRepresentationV1WithResponse(ctx context.Context, id string, pType string, reqEditors ...RequestEditorFn) (*ImagesControllerGetRepresentationV1Response, error) {
	rsp, err := c.ImagesControllerGetRepresentationV1(ctx, id, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImagesControllerGetRepresentationV1Response(rsp)
}

// OperationsControllerListOperationsV1WithResponse request returning *OperationsControllerListOperationsV1Response
func (c *ClientWithResponses) OperationsControllerListOperationsV1WithResponse(ctx context.Context, params *OperationsControllerListOperationsV1Params, reqEditors ...RequestEditorFn) (*OperationsControllerListOperationsV1Response, error) {
	rsp, err := c.OperationsControllerListOperationsV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerListOperationsV1Response(rsp)
}

// OperationsControllerGetOperationsV1WithBodyWithResponse request with arbitrary body returning *OperationsControllerGetOperationsV1Response
func (c *ClientWithResponses) OperationsControllerGetOperationsV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerGetOperationsV1Response, error) {
	rsp, err := c.OperationsControllerGetOperationsV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerGetOperationsV1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerGetOperationsV1WithResponse(ctx context.Context, body OperationsControllerGetOperationsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerGetOperationsV1Response, error) {
	rsp, err := c.OperationsControllerGetOperationsV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerGetOperationsV1Response(rsp)
}

// OperationsControllerRunCompositeV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunCompositeV1V1Response
func (c *ClientWithResponses) OperationsControllerRunCompositeV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunCompositeV1V1Response, error) {
	rsp, err := c.OperationsControllerRunCompositeV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunCompositeV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunCompositeV1V1WithResponse(ctx context.Context, body OperationsControllerRunCompositeV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunCompositeV1V1Response, error) {
	rsp, err := c.OperationsControllerRunCompositeV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunCompositeV1V1Response(rsp)
}

// OperationsControllerRunCropV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunCropV1V1Response
func (c *ClientWithResponses) OperationsControllerRunCropV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunCropV1V1Response, error) {
	rsp, err := c.OperationsControllerRunCropV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunCropV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunCropV1V1WithResponse(ctx context.Context, body OperationsControllerRunCropV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunCropV1V1Response, error) {
	rsp, err := c.OperationsControllerRunCropV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunCropV1V1Response(rsp)
}

// OperationsControllerRunCutV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunCutV1V1Response
func (c *ClientWithResponses) OperationsControllerRunCutV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunCutV1V1Response, error) {
	rsp, err := c.OperationsControllerRunCutV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunCutV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunCutV1V1WithResponse(ctx context.Context, body OperationsControllerRunCutV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunCutV1V1Response, error) {
	rsp, err := c.OperationsControllerRunCutV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunCutV1V1Response(rsp)
}

// OperationsControllerRunGptV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunGptV1V1Response
func (c *ClientWithResponses) OperationsControllerRunGptV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunGptV1V1Response, error) {
	rsp, err := c.OperationsControllerRunGptV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunGptV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunGptV1V1WithResponse(ctx context.Context, body OperationsControllerRunGptV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunGptV1V1Response, error) {
	rsp, err := c.OperationsControllerRunGptV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunGptV1V1Response(rsp)
}

// OperationsControllerRunHauteLindaV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunHauteLindaV1V1Response
func (c *ClientWithResponses) OperationsControllerRunHauteLindaV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteLindaV1V1Response, error) {
	rsp, err := c.OperationsControllerRunHauteLindaV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunHauteLindaV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunHauteLindaV1V1WithResponse(ctx context.Context, body OperationsControllerRunHauteLindaV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteLindaV1V1Response, error) {
	rsp, err := c.OperationsControllerRunHauteLindaV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunHauteLindaV1V1Response(rsp)
}

// OperationsControllerRunHauteNaomiV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunHauteNaomiV1V1Response
func (c *ClientWithResponses) OperationsControllerRunHauteNaomiV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteNaomiV1V1Response, error) {
	rsp, err := c.OperationsControllerRunHauteNaomiV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunHauteNaomiV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunHauteNaomiV1V1WithResponse(ctx context.Context, body OperationsControllerRunHauteNaomiV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunHauteNaomiV1V1Response, error) {
	rsp, err := c.OperationsControllerRunHauteNaomiV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunHauteNaomiV1V1Response(rsp)
}

// OperationsControllerRunImagineKateV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunImagineKateV1V1Response
func (c *ClientWithResponses) OperationsControllerRunImagineKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunImagineKateV1V1Response, error) {
	rsp, err := c.OperationsControllerRunImagineKateV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunImagineKateV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunImagineKateV1V1WithResponse(ctx context.Context, body OperationsControllerRunImagineKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunImagineKateV1V1Response, error) {
	rsp, err := c.OperationsControllerRunImagineKateV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunImagineKateV1V1Response(rsp)
}

// OperationsControllerRunInpaintKateV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunInpaintKateV1V1Response
func (c *ClientWithResponses) OperationsControllerRunInpaintKateV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunInpaintKateV1V1Response, error) {
	rsp, err := c.OperationsControllerRunInpaintKateV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunInpaintKateV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunInpaintKateV1V1WithResponse(ctx context.Context, body OperationsControllerRunInpaintKateV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunInpaintKateV1V1Response, error) {
	rsp, err := c.OperationsControllerRunInpaintKateV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunInpaintKateV1V1Response(rsp)
}

// OperationsControllerRunNegateImageV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunNegateImageV1V1Response
func (c *ClientWithResponses) OperationsControllerRunNegateImageV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunNegateImageV1V1Response, error) {
	rsp, err := c.OperationsControllerRunNegateImageV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunNegateImageV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunNegateImageV1V1WithResponse(ctx context.Context, body OperationsControllerRunNegateImageV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunNegateImageV1V1Response, error) {
	rsp, err := c.OperationsControllerRunNegateImageV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunNegateImageV1V1Response(rsp)
}

// OperationsControllerRunNoiseV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunNoiseV1V1Response
func (c *ClientWithResponses) OperationsControllerRunNoiseV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunNoiseV1V1Response, error) {
	rsp, err := c.OperationsControllerRunNoiseV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunNoiseV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunNoiseV1V1WithResponse(ctx context.Context, body OperationsControllerRunNoiseV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunNoiseV1V1Response, error) {
	rsp, err := c.OperationsControllerRunNoiseV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunNoiseV1V1Response(rsp)
}

// OperationsControllerRunObjectDetectionV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunObjectDetectionV1V1Response
func (c *ClientWithResponses) OperationsControllerRunObjectDetectionV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunObjectDetectionV1V1Response, error) {
	rsp, err := c.OperationsControllerRunObjectDetectionV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunObjectDetectionV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunObjectDetectionV1V1WithResponse(ctx context.Context, body OperationsControllerRunObjectDetectionV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunObjectDetectionV1V1Response, error) {
	rsp, err := c.OperationsControllerRunObjectDetectionV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunObjectDetectionV1V1Response(rsp)
}

// OperationsControllerRunPoseEstimationV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunPoseEstimationV1V1Response
func (c *ClientWithResponses) OperationsControllerRunPoseEstimationV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunPoseEstimationV1V1Response, error) {
	rsp, err := c.OperationsControllerRunPoseEstimationV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunPoseEstimationV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunPoseEstimationV1V1WithResponse(ctx context.Context, body OperationsControllerRunPoseEstimationV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunPoseEstimationV1V1Response, error) {
	rsp, err := c.OperationsControllerRunPoseEstimationV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunPoseEstimationV1V1Response(rsp)
}

// OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response
func (c *ClientWithResponses) OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response, error) {
	rsp, err := c.OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunSegmentAnythingEmbeddingsV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithResponse(ctx context.Context, body OperationsControllerRunSegmentAnythingEmbeddingsV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response, error) {
	rsp, err := c.OperationsControllerRunSegmentAnythingEmbeddingsV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunSegmentAnythingEmbeddingsV1V1Response(rsp)
}

// OperationsControllerRunSegmentAnythingMaskV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunSegmentAnythingMaskV1V1Response
func (c *ClientWithResponses) OperationsControllerRunSegmentAnythingMaskV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingMaskV1V1Response, error) {
	rsp, err := c.OperationsControllerRunSegmentAnythingMaskV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunSegmentAnythingMaskV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunSegmentAnythingMaskV1V1WithResponse(ctx context.Context, body OperationsControllerRunSegmentAnythingMaskV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunSegmentAnythingMaskV1V1Response, error) {
	rsp, err := c.OperationsControllerRunSegmentAnythingMaskV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunSegmentAnythingMaskV1V1Response(rsp)
}

// OperationsControllerRunUpscaleV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunUpscaleV1V1Response
func (c *ClientWithResponses) OperationsControllerRunUpscaleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunUpscaleV1V1Response, error) {
	rsp, err := c.OperationsControllerRunUpscaleV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunUpscaleV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunUpscaleV1V1WithResponse(ctx context.Context, body OperationsControllerRunUpscaleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunUpscaleV1V1Response, error) {
	rsp, err := c.OperationsControllerRunUpscaleV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunUpscaleV1V1Response(rsp)
}

// OperationsControllerRunVtonGiseleV1V1WithBodyWithResponse request with arbitrary body returning *OperationsControllerRunVtonGiseleV1V1Response
func (c *ClientWithResponses) OperationsControllerRunVtonGiseleV1V1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerRunVtonGiseleV1V1Response, error) {
	rsp, err := c.OperationsControllerRunVtonGiseleV1V1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunVtonGiseleV1V1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerRunVtonGiseleV1V1WithResponse(ctx context.Context, body OperationsControllerRunVtonGiseleV1V1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerRunVtonGiseleV1V1Response, error) {
	rsp, err := c.OperationsControllerRunVtonGiseleV1V1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerRunVtonGiseleV1V1Response(rsp)
}

// OperationsControllerGetOperationV1WithResponse request returning *OperationsControllerGetOperationV1Response
func (c *ClientWithResponses) OperationsControllerGetOperationV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*OperationsControllerGetOperationV1Response, error) {
	rsp, err := c.OperationsControllerGetOperationV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerGetOperationV1Response(rsp)
}

// OperationsControllerUpdateMetadataV1WithBodyWithResponse request with arbitrary body returning *OperationsControllerUpdateMetadataV1Response
func (c *ClientWithResponses) OperationsControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OperationsControllerUpdateMetadataV1Response, error) {
	rsp, err := c.OperationsControllerUpdateMetadataV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerUpdateMetadataV1Response(rsp)
}

func (c *ClientWithResponses) OperationsControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body OperationsControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*OperationsControllerUpdateMetadataV1Response, error) {
	rsp, err := c.OperationsControllerUpdateMetadataV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOperationsControllerUpdateMetadataV1Response(rsp)
}

// PermissionsControllerListAvailablePermissionsV1WithResponse request returning *PermissionsControllerListAvailablePermissionsV1Response
func (c *ClientWithResponses) PermissionsControllerListAvailablePermissionsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PermissionsControllerListAvailablePermissionsV1Response, error) {
	rsp, err := c.PermissionsControllerListAvailablePermissionsV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsControllerListAvailablePermissionsV1Response(rsp)
}

// PipelinesControllerListPipelinesV1WithResponse request returning *PipelinesControllerListPipelinesV1Response
func (c *ClientWithResponses) PipelinesControllerListPipelinesV1WithResponse(ctx context.Context, params *PipelinesControllerListPipelinesV1Params, reqEditors ...RequestEditorFn) (*PipelinesControllerListPipelinesV1Response, error) {
	rsp, err := c.PipelinesControllerListPipelinesV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelinesControllerListPipelinesV1Response(rsp)
}

// PipelinesControllerCreatePipelineV1WithBodyWithResponse request with arbitrary body returning *PipelinesControllerCreatePipelineV1Response
func (c *ClientWithResponses) PipelinesControllerCreatePipelineV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PipelinesControllerCreatePipelineV1Response, error) {
	rsp, err := c.PipelinesControllerCreatePipelineV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelinesControllerCreatePipelineV1Response(rsp)
}

func (c *ClientWithResponses) PipelinesControllerCreatePipelineV1WithResponse(ctx context.Context, body PipelinesControllerCreatePipelineV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PipelinesControllerCreatePipelineV1Response, error) {
	rsp, err := c.PipelinesControllerCreatePipelineV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelinesControllerCreatePipelineV1Response(rsp)
}

// PipelinesControllerGetPipelineV1WithResponse request returning *PipelinesControllerGetPipelineV1Response
func (c *ClientWithResponses) PipelinesControllerGetPipelineV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PipelinesControllerGetPipelineV1Response, error) {
	rsp, err := c.PipelinesControllerGetPipelineV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePipelinesControllerGetPipelineV1Response(rsp)
}

// PosesControllerListPosesV1WithResponse request returning *PosesControllerListPosesV1Response
func (c *ClientWithResponses) PosesControllerListPosesV1WithResponse(ctx context.Context, params *PosesControllerListPosesV1Params, reqEditors ...RequestEditorFn) (*PosesControllerListPosesV1Response, error) {
	rsp, err := c.PosesControllerListPosesV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePosesControllerListPosesV1Response(rsp)
}

// PosesControllerGetPoseV1WithResponse request returning *PosesControllerGetPoseV1Response
func (c *ClientWithResponses) PosesControllerGetPoseV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PosesControllerGetPoseV1Response, error) {
	rsp, err := c.PosesControllerGetPoseV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePosesControllerGetPoseV1Response(rsp)
}

// PosesControllerUpdateMetadataV1WithBodyWithResponse request with arbitrary body returning *PosesControllerUpdateMetadataV1Response
func (c *ClientWithResponses) PosesControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PosesControllerUpdateMetadataV1Response, error) {
	rsp, err := c.PosesControllerUpdateMetadataV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePosesControllerUpdateMetadataV1Response(rsp)
}

func (c *ClientWithResponses) PosesControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body PosesControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PosesControllerUpdateMetadataV1Response, error) {
	rsp, err := c.PosesControllerUpdateMetadataV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePosesControllerUpdateMetadataV1Response(rsp)
}

// PosesControllerSetPosePreviewV1WithBodyWithResponse request with arbitrary body returning *PosesControllerSetPosePreviewV1Response
func (c *ClientWithResponses) PosesControllerSetPosePreviewV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PosesControllerSetPosePreviewV1Response, error) {
	rsp, err := c.PosesControllerSetPosePreviewV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePosesControllerSetPosePreviewV1Response(rsp)
}

func (c *ClientWithResponses) PosesControllerSetPosePreviewV1WithResponse(ctx context.Context, id string, body PosesControllerSetPosePreviewV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PosesControllerSetPosePreviewV1Response, error) {
	rsp, err := c.PosesControllerSetPosePreviewV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePosesControllerSetPosePreviewV1Response(rsp)
}

// AccessControllerAccessV1WithResponse request returning *AccessControllerAccessV1Response
func (c *ClientWithResponses) AccessControllerAccessV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AccessControllerAccessV1Response, error) {
	rsp, err := c.AccessControllerAccessV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerAccessV1Response(rsp)
}

// AccessControllerAttachAccessV1WithBodyWithResponse request with arbitrary body returning *AccessControllerAttachAccessV1Response
func (c *ClientWithResponses) AccessControllerAttachAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerAttachAccessV1Response, error) {
	rsp, err := c.AccessControllerAttachAccessV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerAttachAccessV1Response(rsp)
}

func (c *ClientWithResponses) AccessControllerAttachAccessV1WithResponse(ctx context.Context, id string, body AccessControllerAttachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerAttachAccessV1Response, error) {
	rsp, err := c.AccessControllerAttachAccessV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerAttachAccessV1Response(rsp)
}

// AccessControllerDetachAccessV1WithBodyWithResponse request with arbitrary body returning *AccessControllerDetachAccessV1Response
func (c *ClientWithResponses) AccessControllerDetachAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerDetachAccessV1Response, error) {
	rsp, err := c.AccessControllerDetachAccessV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerDetachAccessV1Response(rsp)
}

func (c *ClientWithResponses) AccessControllerDetachAccessV1WithResponse(ctx context.Context, id string, body AccessControllerDetachAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerDetachAccessV1Response, error) {
	rsp, err := c.AccessControllerDetachAccessV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerDetachAccessV1Response(rsp)
}

// AccessControllerGrantAccessV1WithBodyWithResponse request with arbitrary body returning *AccessControllerGrantAccessV1Response
func (c *ClientWithResponses) AccessControllerGrantAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerGrantAccessV1Response, error) {
	rsp, err := c.AccessControllerGrantAccessV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerGrantAccessV1Response(rsp)
}

func (c *ClientWithResponses) AccessControllerGrantAccessV1WithResponse(ctx context.Context, id string, body AccessControllerGrantAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerGrantAccessV1Response, error) {
	rsp, err := c.AccessControllerGrantAccessV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerGrantAccessV1Response(rsp)
}

// AccessControllerRevokeAccessV1WithBodyWithResponse request with arbitrary body returning *AccessControllerRevokeAccessV1Response
func (c *ClientWithResponses) AccessControllerRevokeAccessV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccessControllerRevokeAccessV1Response, error) {
	rsp, err := c.AccessControllerRevokeAccessV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerRevokeAccessV1Response(rsp)
}

func (c *ClientWithResponses) AccessControllerRevokeAccessV1WithResponse(ctx context.Context, id string, body AccessControllerRevokeAccessV1JSONRequestBody, reqEditors ...RequestEditorFn) (*AccessControllerRevokeAccessV1Response, error) {
	rsp, err := c.AccessControllerRevokeAccessV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccessControllerRevokeAccessV1Response(rsp)
}

// StacksControllerListStacksV1WithResponse request returning *StacksControllerListStacksV1Response
func (c *ClientWithResponses) StacksControllerListStacksV1WithResponse(ctx context.Context, params *StacksControllerListStacksV1Params, reqEditors ...RequestEditorFn) (*StacksControllerListStacksV1Response, error) {
	rsp, err := c.StacksControllerListStacksV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerListStacksV1Response(rsp)
}

// StacksControllerCreateStackV1WithBodyWithResponse request with arbitrary body returning *StacksControllerCreateStackV1Response
func (c *ClientWithResponses) StacksControllerCreateStackV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerCreateStackV1Response, error) {
	rsp, err := c.StacksControllerCreateStackV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerCreateStackV1Response(rsp)
}

func (c *ClientWithResponses) StacksControllerCreateStackV1WithResponse(ctx context.Context, body StacksControllerCreateStackV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerCreateStackV1Response, error) {
	rsp, err := c.StacksControllerCreateStackV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerCreateStackV1Response(rsp)
}

// StacksControllerGetStackV1WithResponse request returning *StacksControllerGetStackV1Response
func (c *ClientWithResponses) StacksControllerGetStackV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StacksControllerGetStackV1Response, error) {
	rsp, err := c.StacksControllerGetStackV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerGetStackV1Response(rsp)
}

// StacksControllerAddItemsV1WithBodyWithResponse request with arbitrary body returning *StacksControllerAddItemsV1Response
func (c *ClientWithResponses) StacksControllerAddItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerAddItemsV1Response, error) {
	rsp, err := c.StacksControllerAddItemsV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerAddItemsV1Response(rsp)
}

func (c *ClientWithResponses) StacksControllerAddItemsV1WithResponse(ctx context.Context, id string, body StacksControllerAddItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerAddItemsV1Response, error) {
	rsp, err := c.StacksControllerAddItemsV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerAddItemsV1Response(rsp)
}

// StacksControllerRemoveItemsV1WithBodyWithResponse request with arbitrary body returning *StacksControllerRemoveItemsV1Response
func (c *ClientWithResponses) StacksControllerRemoveItemsV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerRemoveItemsV1Response, error) {
	rsp, err := c.StacksControllerRemoveItemsV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerRemoveItemsV1Response(rsp)
}

func (c *ClientWithResponses) StacksControllerRemoveItemsV1WithResponse(ctx context.Context, id string, body StacksControllerRemoveItemsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerRemoveItemsV1Response, error) {
	rsp, err := c.StacksControllerRemoveItemsV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerRemoveItemsV1Response(rsp)
}

// StacksControllerUpdateMetadataV1WithBodyWithResponse request with arbitrary body returning *StacksControllerUpdateMetadataV1Response
func (c *ClientWithResponses) StacksControllerUpdateMetadataV1WithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StacksControllerUpdateMetadataV1Response, error) {
	rsp, err := c.StacksControllerUpdateMetadataV1WithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerUpdateMetadataV1Response(rsp)
}

func (c *ClientWithResponses) StacksControllerUpdateMetadataV1WithResponse(ctx context.Context, id string, body StacksControllerUpdateMetadataV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StacksControllerUpdateMetadataV1Response, error) {
	rsp, err := c.StacksControllerUpdateMetadataV1(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStacksControllerUpdateMetadataV1Response(rsp)
}

// StorageControllerCreateRecordV1WithBodyWithResponse request with arbitrary body returning *StorageControllerCreateRecordV1Response
func (c *ClientWithResponses) StorageControllerCreateRecordV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerCreateRecordV1Response, error) {
	rsp, err := c.StorageControllerCreateRecordV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerCreateRecordV1Response(rsp)
}

func (c *ClientWithResponses) StorageControllerCreateRecordV1WithResponse(ctx context.Context, body StorageControllerCreateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerCreateRecordV1Response, error) {
	rsp, err := c.StorageControllerCreateRecordV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerCreateRecordV1Response(rsp)
}

// StorageControllerDeleteRecordV1WithBodyWithResponse request with arbitrary body returning *StorageControllerDeleteRecordV1Response
func (c *ClientWithResponses) StorageControllerDeleteRecordV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerDeleteRecordV1Response, error) {
	rsp, err := c.StorageControllerDeleteRecordV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerDeleteRecordV1Response(rsp)
}

func (c *ClientWithResponses) StorageControllerDeleteRecordV1WithResponse(ctx context.Context, body StorageControllerDeleteRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerDeleteRecordV1Response, error) {
	rsp, err := c.StorageControllerDeleteRecordV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerDeleteRecordV1Response(rsp)
}

// StorageControllerGetRecordsV1WithBodyWithResponse request with arbitrary body returning *StorageControllerGetRecordsV1Response
func (c *ClientWithResponses) StorageControllerGetRecordsV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerGetRecordsV1Response, error) {
	rsp, err := c.StorageControllerGetRecordsV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerGetRecordsV1Response(rsp)
}

func (c *ClientWithResponses) StorageControllerGetRecordsV1WithResponse(ctx context.Context, body StorageControllerGetRecordsV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerGetRecordsV1Response, error) {
	rsp, err := c.StorageControllerGetRecordsV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerGetRecordsV1Response(rsp)
}

// StorageControllerUpdateRecordV1WithBodyWithResponse request with arbitrary body returning *StorageControllerUpdateRecordV1Response
func (c *ClientWithResponses) StorageControllerUpdateRecordV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StorageControllerUpdateRecordV1Response, error) {
	rsp, err := c.StorageControllerUpdateRecordV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerUpdateRecordV1Response(rsp)
}

func (c *ClientWithResponses) StorageControllerUpdateRecordV1WithResponse(ctx context.Context, body StorageControllerUpdateRecordV1JSONRequestBody, reqEditors ...RequestEditorFn) (*StorageControllerUpdateRecordV1Response, error) {
	rsp, err := c.StorageControllerUpdateRecordV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStorageControllerUpdateRecordV1Response(rsp)
}

// WebsocketControllerRegisterWebsocketV1WithResponse request returning *WebsocketControllerRegisterWebsocketV1Response
func (c *ClientWithResponses) WebsocketControllerRegisterWebsocketV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketControllerRegisterWebsocketV1Response, error) {
	rsp, err := c.WebsocketControllerRegisterWebsocketV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketControllerRegisterWebsocketV1Response(rsp)
}

// WebsocketControllerGetSettingsV1WithResponse request returning *WebsocketControllerGetSettingsV1Response
func (c *ClientWithResponses) WebsocketControllerGetSettingsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebsocketControllerGetSettingsV1Response, error) {
	rsp, err := c.WebsocketControllerGetSettingsV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebsocketControllerGetSettingsV1Response(rsp)
}

// ParseAccountsControllerListAccountsV1Response parses an HTTP response from a AccountsControllerListAccountsV1WithResponse call
func ParseAccountsControllerListAccountsV1Response(rsp *http.Response) (*AccountsControllerListAccountsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsControllerListAccountsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAccountsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsControllerCreateAccountV1Response parses an HTTP response from a AccountsControllerCreateAccountV1WithResponse call
func ParseAccountsControllerCreateAccountV1Response(rsp *http.Response) (*AccountsControllerCreateAccountV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsControllerCreateAccountV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAccountsControllerGetAccountByAliasV1Response parses an HTTP response from a AccountsControllerGetAccountByAliasV1WithResponse call
func ParseAccountsControllerGetAccountByAliasV1Response(rsp *http.Response) (*AccountsControllerGetAccountByAliasV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsControllerGetAccountByAliasV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsControllerGetSelfV1Response parses an HTTP response from a AccountsControllerGetSelfV1WithResponse call
func ParseAccountsControllerGetSelfV1Response(rsp *http.Response) (*AccountsControllerGetSelfV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsControllerGetSelfV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalancesControllerGetBalanceForSelfV1Response parses an HTTP response from a BalancesControllerGetBalanceForSelfV1WithResponse call
func ParseBalancesControllerGetBalanceForSelfV1Response(rsp *http.Response) (*BalancesControllerGetBalanceForSelfV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalancesControllerGetBalanceForSelfV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsControllerGetAccountV1Response parses an HTTP response from a AccountsControllerGetAccountV1WithResponse call
func ParseAccountsControllerGetAccountV1Response(rsp *http.Response) (*AccountsControllerGetAccountV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsControllerGetAccountV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalancesControllerGetBalanceV1Response parses an HTTP response from a BalancesControllerGetBalanceV1WithResponse call
func ParseBalancesControllerGetBalanceV1Response(rsp *http.Response) (*BalancesControllerGetBalanceV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalancesControllerGetBalanceV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBalancesControllerAddBalanceV1Response parses an HTTP response from a BalancesControllerAddBalanceV1WithResponse call
func ParseBalancesControllerAddBalanceV1Response(rsp *http.Response) (*BalancesControllerAddBalanceV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BalancesControllerAddBalanceV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallAccessAttachV1Response parses an HTTP response from a CallControllerCallAccessAttachV1WithResponse call
func ParseCallControllerCallAccessAttachV1Response(rsp *http.Response) (*CallControllerCallAccessAttachV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccessAttachV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallAccessGrantV1Response parses an HTTP response from a CallControllerCallAccessGrantV1WithResponse call
func ParseCallControllerCallAccessGrantV1Response(rsp *http.Response) (*CallControllerCallAccessGrantV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccessGrantV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallAccountsBalanceAddV1Response parses an HTTP response from a CallControllerCallAccountsBalanceAddV1WithResponse call
func ParseCallControllerCallAccountsBalanceAddV1Response(rsp *http.Response) (*CallControllerCallAccountsBalanceAddV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsBalanceAddV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallAccountsBalanceGetV1Response parses an HTTP response from a CallControllerCallAccountsBalanceGetV1WithResponse call
func ParseCallControllerCallAccountsBalanceGetV1Response(rsp *http.Response) (*CallControllerCallAccountsBalanceGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsBalanceGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallAccountsBalanceSelfV1Response parses an HTTP response from a CallControllerCallAccountsBalanceSelfV1WithResponse call
func ParseCallControllerCallAccountsBalanceSelfV1Response(rsp *http.Response) (*CallControllerCallAccountsBalanceSelfV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsBalanceSelfV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallAccountsCreateV1Response parses an HTTP response from a CallControllerCallAccountsCreateV1WithResponse call
func ParseCallControllerCallAccountsCreateV1Response(rsp *http.Response) (*CallControllerCallAccountsCreateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsCreateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallAccountsGetV1Response parses an HTTP response from a CallControllerCallAccountsGetV1WithResponse call
func ParseCallControllerCallAccountsGetV1Response(rsp *http.Response) (*CallControllerCallAccountsGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallAccountsListV1Response parses an HTTP response from a CallControllerCallAccountsListV1WithResponse call
func ParseCallControllerCallAccountsListV1Response(rsp *http.Response) (*CallControllerCallAccountsListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAccountsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallAccountsSelfV1Response parses an HTTP response from a CallControllerCallAccountsSelfV1WithResponse call
func ParseCallControllerCallAccountsSelfV1Response(rsp *http.Response) (*CallControllerCallAccountsSelfV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallAccountsSelfV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallCollectionsCreateV1Response parses an HTTP response from a CallControllerCallCollectionsCreateV1WithResponse call
func ParseCallControllerCallCollectionsCreateV1Response(rsp *http.Response) (*CallControllerCallCollectionsCreateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsCreateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallCollectionsGetV1Response parses an HTTP response from a CallControllerCallCollectionsGetV1WithResponse call
func ParseCallControllerCallCollectionsGetV1Response(rsp *http.Response) (*CallControllerCallCollectionsGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallCollectionsItemsAddV1Response parses an HTTP response from a CallControllerCallCollectionsItemsAddV1WithResponse call
func ParseCallControllerCallCollectionsItemsAddV1Response(rsp *http.Response) (*CallControllerCallCollectionsItemsAddV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsItemsAddV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallCollectionsItemsListV1Response parses an HTTP response from a CallControllerCallCollectionsItemsListV1WithResponse call
func ParseCallControllerCallCollectionsItemsListV1Response(rsp *http.Response) (*CallControllerCallCollectionsItemsListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsItemsListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionItemsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallCollectionsItemsRemoveV1Response parses an HTTP response from a CallControllerCallCollectionsItemsRemoveV1WithResponse call
func ParseCallControllerCallCollectionsItemsRemoveV1Response(rsp *http.Response) (*CallControllerCallCollectionsItemsRemoveV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsItemsRemoveV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallCollectionsListV1Response parses an HTTP response from a CallControllerCallCollectionsListV1WithResponse call
func ParseCallControllerCallCollectionsListV1Response(rsp *http.Response) (*CallControllerCallCollectionsListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallCollectionsMetadataUpdateV1Response parses an HTTP response from a CallControllerCallCollectionsMetadataUpdateV1WithResponse call
func ParseCallControllerCallCollectionsMetadataUpdateV1Response(rsp *http.Response) (*CallControllerCallCollectionsMetadataUpdateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallCollectionsMetadataUpdateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallGroupsAccountsAddV1Response parses an HTTP response from a CallControllerCallGroupsAccountsAddV1WithResponse call
func ParseCallControllerCallGroupsAccountsAddV1Response(rsp *http.Response) (*CallControllerCallGroupsAccountsAddV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallGroupsAccountsAddV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallGroupsAccountsRemoveV1Response parses an HTTP response from a CallControllerCallGroupsAccountsRemoveV1WithResponse call
func ParseCallControllerCallGroupsAccountsRemoveV1Response(rsp *http.Response) (*CallControllerCallGroupsAccountsRemoveV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallGroupsAccountsRemoveV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallGroupsCreateV1Response parses an HTTP response from a CallControllerCallGroupsCreateV1WithResponse call
func ParseCallControllerCallGroupsCreateV1Response(rsp *http.Response) (*CallControllerCallGroupsCreateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallGroupsCreateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallGroupsDeleteV1Response parses an HTTP response from a CallControllerCallGroupsDeleteV1WithResponse call
func ParseCallControllerCallGroupsDeleteV1Response(rsp *http.Response) (*CallControllerCallGroupsDeleteV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallGroupsDeleteV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallGroupsGetV1Response parses an HTTP response from a CallControllerCallGroupsGetV1WithResponse call
func ParseCallControllerCallGroupsGetV1Response(rsp *http.Response) (*CallControllerCallGroupsGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallGroupsGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallImagesGetV1Response parses an HTTP response from a CallControllerCallImagesGetV1WithResponse call
func ParseCallControllerCallImagesGetV1Response(rsp *http.Response) (*CallControllerCallImagesGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallImagesGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallImagesGetManyV1Response parses an HTTP response from a CallControllerCallImagesGetManyV1WithResponse call
func ParseCallControllerCallImagesGetManyV1Response(rsp *http.Response) (*CallControllerCallImagesGetManyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallImagesGetManyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageUrlResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallImagesRepresentationsGetV1Response parses an HTTP response from a CallControllerCallImagesRepresentationsGetV1WithResponse call
func ParseCallControllerCallImagesRepresentationsGetV1Response(rsp *http.Response) (*CallControllerCallImagesRepresentationsGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallImagesRepresentationsGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageRepresentationResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsGetV1Response parses an HTTP response from a CallControllerCallOperationsGetV1WithResponse call
func ParseCallControllerCallOperationsGetV1Response(rsp *http.Response) (*CallControllerCallOperationsGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsGetManyV1Response parses an HTTP response from a CallControllerCallOperationsGetManyV1WithResponse call
func ParseCallControllerCallOperationsGetManyV1Response(rsp *http.Response) (*CallControllerCallOperationsGetManyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsGetManyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OperationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsListV1Response parses an HTTP response from a CallControllerCallOperationsListV1WithResponse call
func ParseCallControllerCallOperationsListV1Response(rsp *http.Response) (*CallControllerCallOperationsListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOperationsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsMetadataUpdateV1Response parses an HTTP response from a CallControllerCallOperationsMetadataUpdateV1WithResponse call
func ParseCallControllerCallOperationsMetadataUpdateV1Response(rsp *http.Response) (*CallControllerCallOperationsMetadataUpdateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsMetadataUpdateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunCompositeV1V1Response parses an HTTP response from a CallControllerCallOperationsRunCompositeV1V1WithResponse call
func ParseCallControllerCallOperationsRunCompositeV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunCompositeV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunCompositeV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompositeV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunCropV1V1Response parses an HTTP response from a CallControllerCallOperationsRunCropV1V1WithResponse call
func ParseCallControllerCallOperationsRunCropV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunCropV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunCropV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CropV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunCutV1V1Response parses an HTTP response from a CallControllerCallOperationsRunCutV1V1WithResponse call
func ParseCallControllerCallOperationsRunCutV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunCutV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunCutV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CutV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunGptV1V1Response parses an HTTP response from a CallControllerCallOperationsRunGptV1V1WithResponse call
func ParseCallControllerCallOperationsRunGptV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunGptV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunGptV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GptV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunHauteLindaV1V1Response parses an HTTP response from a CallControllerCallOperationsRunHauteLindaV1V1WithResponse call
func ParseCallControllerCallOperationsRunHauteLindaV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunHauteLindaV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunHauteLindaV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HauteLindaV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunHauteNaomiV1V1Response parses an HTTP response from a CallControllerCallOperationsRunHauteNaomiV1V1WithResponse call
func ParseCallControllerCallOperationsRunHauteNaomiV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunHauteNaomiV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunHauteNaomiV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HauteNaomiV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunImagineKateV1V1Response parses an HTTP response from a CallControllerCallOperationsRunImagineKateV1V1WithResponse call
func ParseCallControllerCallOperationsRunImagineKateV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunImagineKateV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunImagineKateV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImagineKateV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunInpaintKateV1V1Response parses an HTTP response from a CallControllerCallOperationsRunInpaintKateV1V1WithResponse call
func ParseCallControllerCallOperationsRunInpaintKateV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunInpaintKateV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunInpaintKateV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InpaintKateV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunNegateImageV1V1Response parses an HTTP response from a CallControllerCallOperationsRunNegateImageV1V1WithResponse call
func ParseCallControllerCallOperationsRunNegateImageV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunNegateImageV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunNegateImageV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NegateImageV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunNoiseV1V1Response parses an HTTP response from a CallControllerCallOperationsRunNoiseV1V1WithResponse call
func ParseCallControllerCallOperationsRunNoiseV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunNoiseV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunNoiseV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoiseV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunObjectDetectionV1V1Response parses an HTTP response from a CallControllerCallOperationsRunObjectDetectionV1V1WithResponse call
func ParseCallControllerCallOperationsRunObjectDetectionV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunObjectDetectionV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunObjectDetectionV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectDetectionV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunPoseEstimationV1V1Response parses an HTTP response from a CallControllerCallOperationsRunPoseEstimationV1V1WithResponse call
func ParseCallControllerCallOperationsRunPoseEstimationV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunPoseEstimationV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunPoseEstimationV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoseEstimationV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response parses an HTTP response from a CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1WithResponse call
func ParseCallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunSegmentAnythingEmbeddingsV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SegmentAnythingEmbeddingsV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunSegmentAnythingMaskV1V1Response parses an HTTP response from a CallControllerCallOperationsRunSegmentAnythingMaskV1V1WithResponse call
func ParseCallControllerCallOperationsRunSegmentAnythingMaskV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunSegmentAnythingMaskV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SegmentAnythingMaskV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunUpscaleV1V1Response parses an HTTP response from a CallControllerCallOperationsRunUpscaleV1V1WithResponse call
func ParseCallControllerCallOperationsRunUpscaleV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunUpscaleV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunUpscaleV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpscaleV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsRunVtonGiseleV1V1Response parses an HTTP response from a CallControllerCallOperationsRunVtonGiseleV1V1WithResponse call
func ParseCallControllerCallOperationsRunVtonGiseleV1V1Response(rsp *http.Response) (*CallControllerCallOperationsRunVtonGiseleV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsRunVtonGiseleV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VtonGiseleV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallOperationsWaitV1Response parses an HTTP response from a CallControllerCallOperationsWaitV1WithResponse call
func ParseCallControllerCallOperationsWaitV1Response(rsp *http.Response) (*CallControllerCallOperationsWaitV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallOperationsWaitV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallPosesGetV1Response parses an HTTP response from a CallControllerCallPosesGetV1WithResponse call
func ParseCallControllerCallPosesGetV1Response(rsp *http.Response) (*CallControllerCallPosesGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallPosesGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoseEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallPosesListV1Response parses an HTTP response from a CallControllerCallPosesListV1WithResponse call
func ParseCallControllerCallPosesListV1Response(rsp *http.Response) (*CallControllerCallPosesListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallPosesListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPosesDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallPosesPreviewSetV1Response parses an HTTP response from a CallControllerCallPosesPreviewSetV1WithResponse call
func ParseCallControllerCallPosesPreviewSetV1Response(rsp *http.Response) (*CallControllerCallPosesPreviewSetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallPosesPreviewSetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallStacksCreateV1Response parses an HTTP response from a CallControllerCallStacksCreateV1WithResponse call
func ParseCallControllerCallStacksCreateV1Response(rsp *http.Response) (*CallControllerCallStacksCreateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStacksCreateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStacksGetV1Response parses an HTTP response from a CallControllerCallStacksGetV1WithResponse call
func ParseCallControllerCallStacksGetV1Response(rsp *http.Response) (*CallControllerCallStacksGetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStacksGetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStacksItemsAddV1Response parses an HTTP response from a CallControllerCallStacksItemsAddV1WithResponse call
func ParseCallControllerCallStacksItemsAddV1Response(rsp *http.Response) (*CallControllerCallStacksItemsAddV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStacksItemsAddV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStacksItemsRemoveV1Response parses an HTTP response from a CallControllerCallStacksItemsRemoveV1WithResponse call
func ParseCallControllerCallStacksItemsRemoveV1Response(rsp *http.Response) (*CallControllerCallStacksItemsRemoveV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStacksItemsRemoveV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStacksListV1Response parses an HTTP response from a CallControllerCallStacksListV1WithResponse call
func ParseCallControllerCallStacksListV1Response(rsp *http.Response) (*CallControllerCallStacksListV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStacksListV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListStacksDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStacksMetadataUpdateV1Response parses an HTTP response from a CallControllerCallStacksMetadataUpdateV1WithResponse call
func ParseCallControllerCallStacksMetadataUpdateV1Response(rsp *http.Response) (*CallControllerCallStacksMetadataUpdateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStacksMetadataUpdateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStorageCreateV1Response parses an HTTP response from a CallControllerCallStorageCreateV1WithResponse call
func ParseCallControllerCallStorageCreateV1Response(rsp *http.Response) (*CallControllerCallStorageCreateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStorageCreateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStorageDeleteV1Response parses an HTTP response from a CallControllerCallStorageDeleteV1WithResponse call
func ParseCallControllerCallStorageDeleteV1Response(rsp *http.Response) (*CallControllerCallStorageDeleteV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStorageDeleteV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCallControllerCallStorageGetManyV1Response parses an HTTP response from a CallControllerCallStorageGetManyV1WithResponse call
func ParseCallControllerCallStorageGetManyV1Response(rsp *http.Response) (*CallControllerCallStorageGetManyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStorageGetManyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StorageRecordsResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCallControllerCallStorageUpdateV1Response parses an HTTP response from a CallControllerCallStorageUpdateV1WithResponse call
func ParseCallControllerCallStorageUpdateV1Response(rsp *http.Response) (*CallControllerCallStorageUpdateV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallControllerCallStorageUpdateV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsControllerListCollectionsV1Response parses an HTTP response from a CollectionsControllerListCollectionsV1WithResponse call
func ParseCollectionsControllerListCollectionsV1Response(rsp *http.Response) (*CollectionsControllerListCollectionsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerListCollectionsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsControllerCreateCollectionV1Response parses an HTTP response from a CollectionsControllerCreateCollectionV1WithResponse call
func ParseCollectionsControllerCreateCollectionV1Response(rsp *http.Response) (*CollectionsControllerCreateCollectionV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerCreateCollectionV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CollectionEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCollectionsControllerGetCollectionV1Response parses an HTTP response from a CollectionsControllerGetCollectionV1WithResponse call
func ParseCollectionsControllerGetCollectionV1Response(rsp *http.Response) (*CollectionsControllerGetCollectionV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerGetCollectionV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsControllerListItemsV1Response parses an HTTP response from a CollectionsControllerListItemsV1WithResponse call
func ParseCollectionsControllerListItemsV1Response(rsp *http.Response) (*CollectionsControllerListItemsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerListItemsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCollectionItemsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCollectionsControllerAddItemsV1Response parses an HTTP response from a CollectionsControllerAddItemsV1WithResponse call
func ParseCollectionsControllerAddItemsV1Response(rsp *http.Response) (*CollectionsControllerAddItemsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerAddItemsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCollectionsControllerRemoveItemsV1Response parses an HTTP response from a CollectionsControllerRemoveItemsV1WithResponse call
func ParseCollectionsControllerRemoveItemsV1Response(rsp *http.Response) (*CollectionsControllerRemoveItemsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerRemoveItemsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCollectionsControllerUpdateMetadataV1Response parses an HTTP response from a CollectionsControllerUpdateMetadataV1WithResponse call
func ParseCollectionsControllerUpdateMetadataV1Response(rsp *http.Response) (*CollectionsControllerUpdateMetadataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CollectionsControllerUpdateMetadataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsControllerCreateGroupV1Response parses an HTTP response from a GroupsControllerCreateGroupV1WithResponse call
func ParseGroupsControllerCreateGroupV1Response(rsp *http.Response) (*GroupsControllerCreateGroupV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerCreateGroupV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GroupEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGroupsControllerDeleteGroupV1Response parses an HTTP response from a GroupsControllerDeleteGroupV1WithResponse call
func ParseGroupsControllerDeleteGroupV1Response(rsp *http.Response) (*GroupsControllerDeleteGroupV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerDeleteGroupV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGroupsControllerGetGroupV1Response parses an HTTP response from a GroupsControllerGetGroupV1WithResponse call
func ParseGroupsControllerGetGroupV1Response(rsp *http.Response) (*GroupsControllerGetGroupV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerGetGroupV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGroupsControllerAddAccountV1Response parses an HTTP response from a GroupsControllerAddAccountV1WithResponse call
func ParseGroupsControllerAddAccountV1Response(rsp *http.Response) (*GroupsControllerAddAccountV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerAddAccountV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGroupsControllerRemoveAccountV1Response parses an HTTP response from a GroupsControllerRemoveAccountV1WithResponse call
func ParseGroupsControllerRemoveAccountV1Response(rsp *http.Response) (*GroupsControllerRemoveAccountV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GroupsControllerRemoveAccountV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImagesControllerGetUrlsV1Response parses an HTTP response from a ImagesControllerGetUrlsV1WithResponse call
func ParseImagesControllerGetUrlsV1Response(rsp *http.Response) (*ImagesControllerGetUrlsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImagesControllerGetUrlsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ImageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImagesControllerFinalizeUploadV1Response parses an HTTP response from a ImagesControllerFinalizeUploadV1WithResponse call
func ParseImagesControllerFinalizeUploadV1Response(rsp *http.Response) (*ImagesControllerFinalizeUploadV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImagesControllerFinalizeUploadV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseImagesControllerStartUploadV1Response parses an HTTP response from a ImagesControllerStartUploadV1WithResponse call
func ParseImagesControllerStartUploadV1Response(rsp *http.Response) (*ImagesControllerStartUploadV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImagesControllerStartUploadV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InitializeImageUploadResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImagesControllerGetImageV1Response parses an HTTP response from a ImagesControllerGetImageV1WithResponse call
func ParseImagesControllerGetImageV1Response(rsp *http.Response) (*ImagesControllerGetImageV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImagesControllerGetImageV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImagesControllerGetRepresentationV1Response parses an HTTP response from a ImagesControllerGetRepresentationV1WithResponse call
func ParseImagesControllerGetRepresentationV1Response(rsp *http.Response) (*ImagesControllerGetRepresentationV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImagesControllerGetRepresentationV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImageRepresentationResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsControllerListOperationsV1Response parses an HTTP response from a OperationsControllerListOperationsV1WithResponse call
func ParseOperationsControllerListOperationsV1Response(rsp *http.Response) (*OperationsControllerListOperationsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerListOperationsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListOperationsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsControllerGetOperationsV1Response parses an HTTP response from a OperationsControllerGetOperationsV1WithResponse call
func ParseOperationsControllerGetOperationsV1Response(rsp *http.Response) (*OperationsControllerGetOperationsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerGetOperationsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OperationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunCompositeV1V1Response parses an HTTP response from a OperationsControllerRunCompositeV1V1WithResponse call
func ParseOperationsControllerRunCompositeV1V1Response(rsp *http.Response) (*OperationsControllerRunCompositeV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunCompositeV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CompositeV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunCropV1V1Response parses an HTTP response from a OperationsControllerRunCropV1V1WithResponse call
func ParseOperationsControllerRunCropV1V1Response(rsp *http.Response) (*OperationsControllerRunCropV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunCropV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CropV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunCutV1V1Response parses an HTTP response from a OperationsControllerRunCutV1V1WithResponse call
func ParseOperationsControllerRunCutV1V1Response(rsp *http.Response) (*OperationsControllerRunCutV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunCutV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CutV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunGptV1V1Response parses an HTTP response from a OperationsControllerRunGptV1V1WithResponse call
func ParseOperationsControllerRunGptV1V1Response(rsp *http.Response) (*OperationsControllerRunGptV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunGptV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GptV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunHauteLindaV1V1Response parses an HTTP response from a OperationsControllerRunHauteLindaV1V1WithResponse call
func ParseOperationsControllerRunHauteLindaV1V1Response(rsp *http.Response) (*OperationsControllerRunHauteLindaV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunHauteLindaV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HauteLindaV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunHauteNaomiV1V1Response parses an HTTP response from a OperationsControllerRunHauteNaomiV1V1WithResponse call
func ParseOperationsControllerRunHauteNaomiV1V1Response(rsp *http.Response) (*OperationsControllerRunHauteNaomiV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunHauteNaomiV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HauteNaomiV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunImagineKateV1V1Response parses an HTTP response from a OperationsControllerRunImagineKateV1V1WithResponse call
func ParseOperationsControllerRunImagineKateV1V1Response(rsp *http.Response) (*OperationsControllerRunImagineKateV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunImagineKateV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ImagineKateV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunInpaintKateV1V1Response parses an HTTP response from a OperationsControllerRunInpaintKateV1V1WithResponse call
func ParseOperationsControllerRunInpaintKateV1V1Response(rsp *http.Response) (*OperationsControllerRunInpaintKateV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunInpaintKateV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InpaintKateV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunNegateImageV1V1Response parses an HTTP response from a OperationsControllerRunNegateImageV1V1WithResponse call
func ParseOperationsControllerRunNegateImageV1V1Response(rsp *http.Response) (*OperationsControllerRunNegateImageV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunNegateImageV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NegateImageV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunNoiseV1V1Response parses an HTTP response from a OperationsControllerRunNoiseV1V1WithResponse call
func ParseOperationsControllerRunNoiseV1V1Response(rsp *http.Response) (*OperationsControllerRunNoiseV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunNoiseV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NoiseV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunObjectDetectionV1V1Response parses an HTTP response from a OperationsControllerRunObjectDetectionV1V1WithResponse call
func ParseOperationsControllerRunObjectDetectionV1V1Response(rsp *http.Response) (*OperationsControllerRunObjectDetectionV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunObjectDetectionV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectDetectionV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunPoseEstimationV1V1Response parses an HTTP response from a OperationsControllerRunPoseEstimationV1V1WithResponse call
func ParseOperationsControllerRunPoseEstimationV1V1Response(rsp *http.Response) (*OperationsControllerRunPoseEstimationV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunPoseEstimationV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PoseEstimationV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunSegmentAnythingEmbeddingsV1V1Response parses an HTTP response from a OperationsControllerRunSegmentAnythingEmbeddingsV1V1WithResponse call
func ParseOperationsControllerRunSegmentAnythingEmbeddingsV1V1Response(rsp *http.Response) (*OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunSegmentAnythingEmbeddingsV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SegmentAnythingEmbeddingsV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunSegmentAnythingMaskV1V1Response parses an HTTP response from a OperationsControllerRunSegmentAnythingMaskV1V1WithResponse call
func ParseOperationsControllerRunSegmentAnythingMaskV1V1Response(rsp *http.Response) (*OperationsControllerRunSegmentAnythingMaskV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunSegmentAnythingMaskV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SegmentAnythingMaskV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunUpscaleV1V1Response parses an HTTP response from a OperationsControllerRunUpscaleV1V1WithResponse call
func ParseOperationsControllerRunUpscaleV1V1Response(rsp *http.Response) (*OperationsControllerRunUpscaleV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunUpscaleV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpscaleV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerRunVtonGiseleV1V1Response parses an HTTP response from a OperationsControllerRunVtonGiseleV1V1WithResponse call
func ParseOperationsControllerRunVtonGiseleV1V1Response(rsp *http.Response) (*OperationsControllerRunVtonGiseleV1V1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerRunVtonGiseleV1V1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest VtonGiseleV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOperationsControllerGetOperationV1Response parses an HTTP response from a OperationsControllerGetOperationV1WithResponse call
func ParseOperationsControllerGetOperationV1Response(rsp *http.Response) (*OperationsControllerGetOperationV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerGetOperationV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsControllerUpdateMetadataV1Response parses an HTTP response from a OperationsControllerUpdateMetadataV1WithResponse call
func ParseOperationsControllerUpdateMetadataV1Response(rsp *http.Response) (*OperationsControllerUpdateMetadataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OperationsControllerUpdateMetadataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePermissionsControllerListAvailablePermissionsV1Response parses an HTTP response from a PermissionsControllerListAvailablePermissionsV1WithResponse call
func ParsePermissionsControllerListAvailablePermissionsV1Response(rsp *http.Response) (*PermissionsControllerListAvailablePermissionsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsControllerListAvailablePermissionsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePipelinesControllerListPipelinesV1Response parses an HTTP response from a PipelinesControllerListPipelinesV1WithResponse call
func ParsePipelinesControllerListPipelinesV1Response(rsp *http.Response) (*PipelinesControllerListPipelinesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelinesControllerListPipelinesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPipelinesDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePipelinesControllerCreatePipelineV1Response parses an HTTP response from a PipelinesControllerCreatePipelineV1WithResponse call
func ParsePipelinesControllerCreatePipelineV1Response(rsp *http.Response) (*PipelinesControllerCreatePipelineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelinesControllerCreatePipelineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePipelinesControllerGetPipelineV1Response parses an HTTP response from a PipelinesControllerGetPipelineV1WithResponse call
func ParsePipelinesControllerGetPipelineV1Response(rsp *http.Response) (*PipelinesControllerGetPipelineV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PipelinesControllerGetPipelineV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePosesControllerListPosesV1Response parses an HTTP response from a PosesControllerListPosesV1WithResponse call
func ParsePosesControllerListPosesV1Response(rsp *http.Response) (*PosesControllerListPosesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PosesControllerListPosesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPosesDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePosesControllerGetPoseV1Response parses an HTTP response from a PosesControllerGetPoseV1WithResponse call
func ParsePosesControllerGetPoseV1Response(rsp *http.Response) (*PosesControllerGetPoseV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PosesControllerGetPoseV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoseEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePosesControllerUpdateMetadataV1Response parses an HTTP response from a PosesControllerUpdateMetadataV1WithResponse call
func ParsePosesControllerUpdateMetadataV1Response(rsp *http.Response) (*PosesControllerUpdateMetadataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PosesControllerUpdateMetadataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePosesControllerSetPosePreviewV1Response parses an HTTP response from a PosesControllerSetPosePreviewV1WithResponse call
func ParsePosesControllerSetPosePreviewV1Response(rsp *http.Response) (*PosesControllerSetPosePreviewV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PosesControllerSetPosePreviewV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccessControllerAccessV1Response parses an HTTP response from a AccessControllerAccessV1WithResponse call
func ParseAccessControllerAccessV1Response(rsp *http.Response) (*AccessControllerAccessV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControllerAccessV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAccessControllerDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccessControllerAttachAccessV1Response parses an HTTP response from a AccessControllerAttachAccessV1WithResponse call
func ParseAccessControllerAttachAccessV1Response(rsp *http.Response) (*AccessControllerAttachAccessV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControllerAttachAccessV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccessControllerDetachAccessV1Response parses an HTTP response from a AccessControllerDetachAccessV1WithResponse call
func ParseAccessControllerDetachAccessV1Response(rsp *http.Response) (*AccessControllerDetachAccessV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControllerDetachAccessV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccessControllerGrantAccessV1Response parses an HTTP response from a AccessControllerGrantAccessV1WithResponse call
func ParseAccessControllerGrantAccessV1Response(rsp *http.Response) (*AccessControllerGrantAccessV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControllerGrantAccessV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccessControllerRevokeAccessV1Response parses an HTTP response from a AccessControllerRevokeAccessV1WithResponse call
func ParseAccessControllerRevokeAccessV1Response(rsp *http.Response) (*AccessControllerRevokeAccessV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccessControllerRevokeAccessV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStacksControllerListStacksV1Response parses an HTTP response from a StacksControllerListStacksV1WithResponse call
func ParseStacksControllerListStacksV1Response(rsp *http.Response) (*StacksControllerListStacksV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StacksControllerListStacksV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListStacksDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStacksControllerCreateStackV1Response parses an HTTP response from a StacksControllerCreateStackV1WithResponse call
func ParseStacksControllerCreateStackV1Response(rsp *http.Response) (*StacksControllerCreateStackV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StacksControllerCreateStackV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseStacksControllerGetStackV1Response parses an HTTP response from a StacksControllerGetStackV1WithResponse call
func ParseStacksControllerGetStackV1Response(rsp *http.Response) (*StacksControllerGetStackV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StacksControllerGetStackV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStacksControllerAddItemsV1Response parses an HTTP response from a StacksControllerAddItemsV1WithResponse call
func ParseStacksControllerAddItemsV1Response(rsp *http.Response) (*StacksControllerAddItemsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StacksControllerAddItemsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStacksControllerRemoveItemsV1Response parses an HTTP response from a StacksControllerRemoveItemsV1WithResponse call
func ParseStacksControllerRemoveItemsV1Response(rsp *http.Response) (*StacksControllerRemoveItemsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StacksControllerRemoveItemsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StackEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStacksControllerUpdateMetadataV1Response parses an HTTP response from a StacksControllerUpdateMetadataV1WithResponse call
func ParseStacksControllerUpdateMetadataV1Response(rsp *http.Response) (*StacksControllerUpdateMetadataV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StacksControllerUpdateMetadataV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStorageControllerCreateRecordV1Response parses an HTTP response from a StorageControllerCreateRecordV1WithResponse call
func ParseStorageControllerCreateRecordV1Response(rsp *http.Response) (*StorageControllerCreateRecordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StorageControllerCreateRecordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StorageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseStorageControllerDeleteRecordV1Response parses an HTTP response from a StorageControllerDeleteRecordV1WithResponse call
func ParseStorageControllerDeleteRecordV1Response(rsp *http.Response) (*StorageControllerDeleteRecordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StorageControllerDeleteRecordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseStorageControllerGetRecordsV1Response parses an HTTP response from a StorageControllerGetRecordsV1WithResponse call
func ParseStorageControllerGetRecordsV1Response(rsp *http.Response) (*StorageControllerGetRecordsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StorageControllerGetRecordsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StorageRecordsResultDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStorageControllerUpdateRecordV1Response parses an HTTP response from a StorageControllerUpdateRecordV1WithResponse call
func ParseStorageControllerUpdateRecordV1Response(rsp *http.Response) (*StorageControllerUpdateRecordV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StorageControllerUpdateRecordV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebsocketControllerRegisterWebsocketV1Response parses an HTTP response from a WebsocketControllerRegisterWebsocketV1WithResponse call
func ParseWebsocketControllerRegisterWebsocketV1Response(rsp *http.Response) (*WebsocketControllerRegisterWebsocketV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketControllerRegisterWebsocketV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWebsocketControllerGetSettingsV1Response parses an HTTP response from a WebsocketControllerGetSettingsV1WithResponse call
func ParseWebsocketControllerGetSettingsV1Response(rsp *http.Response) (*WebsocketControllerGetSettingsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebsocketControllerGetSettingsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// StackEntityItemsInner - struct for StackEntityItemsInner
type StackEntityItemsInner struct {
	ImageEntity *ImageEntity
	OperationEntity *OperationEntity
}

// ImageEntityAsStackEntityItemsInner is a convenience function that returns ImageEntity wrapped in StackEntityItemsInner
func ImageEntityAsStackEntityItemsInner(v *ImageEntity) StackEntityItemsInner {
	return StackEntityItemsInner{
		ImageEntity: v,
	}
}

// OperationEntityAsStackEntityItemsInner is a convenience function that returns OperationEntity wrapped in StackEntityItemsInner
func OperationEntityAsStackEntityItemsInner(v *OperationEntity) StackEntityItemsInner {
	return StackEntityItemsInner{
		OperationEntity: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StackEntityItemsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ImageEntity
	err = newStrictDecoder(data).Decode(&dst.ImageEntity)
	if err == nil {
		jsonImageEntity, _ := json.Marshal(dst.ImageEntity)
		if string(jsonImageEntity) == "{}" { // empty struct
			dst.ImageEntity = nil
		} else {
			if err = validator.Validate(dst.ImageEntity); err != nil {
				dst.ImageEntity = nil
			} else {
				match++
			}
		}
	} else {
		dst.ImageEntity = nil
	}

	// try to unmarshal data into OperationEntity
	err = newStrictDecoder(data).Decode(&dst.OperationEntity)
	if err == nil {
		jsonOperationEntity, _ := json.Marshal(dst.OperationEntity)
		if string(jsonOperationEntity) == "{}" { // empty struct
			dst.OperationEntity = nil
		} else {
			if err = validator.Validate(dst.OperationEntity); err != nil {
				dst.OperationEntity = nil
			} else {
				match++
			}
		}
	} else {
		dst.OperationEntity = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ImageEntity = nil
		dst.OperationEntity = nil

		return fmt.Errorf("data matches more than one schema in oneOf(StackEntityItemsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(StackEntityItemsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StackEntityItemsInner) MarshalJSON() ([]byte, error) {
	if src.ImageEntity != nil {
		return json.Marshal(&src.ImageEntity)
	}

	if src.OperationEntity != nil {
		return json.Marshal(&src.OperationEntity)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StackEntityItemsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ImageEntity != nil {
		return obj.ImageEntity
	}

	if obj.OperationEntity != nil {
		return obj.OperationEntity
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj StackEntityItemsInner) GetActualInstanceValue() (interface{}) {
	if obj.ImageEntity != nil {
		return *obj.ImageEntity
	}

	if obj.OperationEntity != nil {
		return *obj.OperationEntity
	}

	// all schemas are nil
	return nil
}

type NullableStackEntityItemsInner struct {
	value *StackEntityItemsInner
	isSet bool
}

func (v NullableStackEntityItemsInner) Get() *StackEntityItemsInner {
	return v.value
}

func (v *NullableStackEntityItemsInner) Set(val *StackEntityItemsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableStackEntityItemsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableStackEntityItemsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackEntityItemsInner(val *StackEntityItemsInner) *NullableStackEntityItemsInner {
	return &NullableStackEntityItemsInner{value: val, isSet: true}
}

func (v NullableStackEntityItemsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackEntityItemsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
)

// checks if the GetAccountParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAccountParamsDto{}

// GetAccountParamsDto struct for GetAccountParamsDto
type GetAccountParamsDto struct {
	Id *string `json:"id,omitempty"`
	Alias *string `json:"alias,omitempty"`
}

// NewGetAccountParamsDto instantiates a new GetAccountParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAccountParamsDto() *GetAccountParamsDto {
	this := GetAccountParamsDto{}
	return &this
}

// NewGetAccountParamsDtoWithDefaults instantiates a new GetAccountParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAccountParamsDtoWithDefaults() *GetAccountParamsDto {
	this := GetAccountParamsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetAccountParamsDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAccountParamsDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetAccountParamsDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetAccountParamsDto) SetId(v string) {
	o.Id = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *GetAccountParamsDto) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAccountParamsDto) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *GetAccountParamsDto) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *GetAccountParamsDto) SetAlias(v string) {
	o.Alias = &v
}

func (o GetAccountParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAccountParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	return toSerialize, nil
}

type NullableGetAccountParamsDto struct {
	value *GetAccountParamsDto
	isSet bool
}

func (v NullableGetAccountParamsDto) Get() *GetAccountParamsDto {
	return v.value
}

func (v *NullableGetAccountParamsDto) Set(val *GetAccountParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAccountParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAccountParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAccountParamsDto(val *GetAccountParamsDto) *NullableGetAccountParamsDto {
	return &NullableGetAccountParamsDto{value: val, isSet: true}
}

func (v NullableGetAccountParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAccountParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



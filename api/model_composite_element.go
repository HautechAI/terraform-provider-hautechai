/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompositeElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeElement{}

// CompositeElement struct for CompositeElement
type CompositeElement struct {
	ImageId string `json:"imageId"`
	Left float32 `json:"left"`
	Top float32 `json:"top"`
	Width float32 `json:"width"`
	Height float32 `json:"height"`
	Fit string `json:"fit"`
}

type _CompositeElement CompositeElement

// NewCompositeElement instantiates a new CompositeElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeElement(imageId string, left float32, top float32, width float32, height float32, fit string) *CompositeElement {
	this := CompositeElement{}
	this.ImageId = imageId
	this.Left = left
	this.Top = top
	this.Width = width
	this.Height = height
	this.Fit = fit
	return &this
}

// NewCompositeElementWithDefaults instantiates a new CompositeElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeElementWithDefaults() *CompositeElement {
	this := CompositeElement{}
	return &this
}

// GetImageId returns the ImageId field value
func (o *CompositeElement) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *CompositeElement) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *CompositeElement) SetImageId(v string) {
	o.ImageId = v
}

// GetLeft returns the Left field value
func (o *CompositeElement) GetLeft() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Left
}

// GetLeftOk returns a tuple with the Left field value
// and a boolean to check if the value has been set.
func (o *CompositeElement) GetLeftOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Left, true
}

// SetLeft sets field value
func (o *CompositeElement) SetLeft(v float32) {
	o.Left = v
}

// GetTop returns the Top field value
func (o *CompositeElement) GetTop() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Top
}

// GetTopOk returns a tuple with the Top field value
// and a boolean to check if the value has been set.
func (o *CompositeElement) GetTopOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Top, true
}

// SetTop sets field value
func (o *CompositeElement) SetTop(v float32) {
	o.Top = v
}

// GetWidth returns the Width field value
func (o *CompositeElement) GetWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *CompositeElement) GetWidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *CompositeElement) SetWidth(v float32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *CompositeElement) GetHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *CompositeElement) GetHeightOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *CompositeElement) SetHeight(v float32) {
	o.Height = v
}

// GetFit returns the Fit field value
func (o *CompositeElement) GetFit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fit
}

// GetFitOk returns a tuple with the Fit field value
// and a boolean to check if the value has been set.
func (o *CompositeElement) GetFitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fit, true
}

// SetFit sets field value
func (o *CompositeElement) SetFit(v string) {
	o.Fit = v
}

func (o CompositeElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageId"] = o.ImageId
	toSerialize["left"] = o.Left
	toSerialize["top"] = o.Top
	toSerialize["width"] = o.Width
	toSerialize["height"] = o.Height
	toSerialize["fit"] = o.Fit
	return toSerialize, nil
}

func (o *CompositeElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageId",
		"left",
		"top",
		"width",
		"height",
		"fit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompositeElement := _CompositeElement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompositeElement)

	if err != nil {
		return err
	}

	*o = CompositeElement(varCompositeElement)

	return err
}

type NullableCompositeElement struct {
	value *CompositeElement
	isSet bool
}

func (v NullableCompositeElement) Get() *CompositeElement {
	return v.value
}

func (v *NullableCompositeElement) Set(val *CompositeElement) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeElement) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeElement(val *CompositeElement) *NullableCompositeElement {
	return &NullableCompositeElement{value: val, isSet: true}
}

func (v NullableCompositeElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



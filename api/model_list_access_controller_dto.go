/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListAccessControllerDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListAccessControllerDto{}

// ListAccessControllerDto struct for ListAccessControllerDto
type ListAccessControllerDto struct {
	Attachments []ListAccessControllerAttachmentsDto `json:"attachments"`
	Grants []ListAccessControllerGrantsDto `json:"grants"`
}

type _ListAccessControllerDto ListAccessControllerDto

// NewListAccessControllerDto instantiates a new ListAccessControllerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAccessControllerDto(attachments []ListAccessControllerAttachmentsDto, grants []ListAccessControllerGrantsDto) *ListAccessControllerDto {
	this := ListAccessControllerDto{}
	this.Attachments = attachments
	this.Grants = grants
	return &this
}

// NewListAccessControllerDtoWithDefaults instantiates a new ListAccessControllerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAccessControllerDtoWithDefaults() *ListAccessControllerDto {
	this := ListAccessControllerDto{}
	return &this
}

// GetAttachments returns the Attachments field value
func (o *ListAccessControllerDto) GetAttachments() []ListAccessControllerAttachmentsDto {
	if o == nil {
		var ret []ListAccessControllerAttachmentsDto
		return ret
	}

	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value
// and a boolean to check if the value has been set.
func (o *ListAccessControllerDto) GetAttachmentsOk() ([]ListAccessControllerAttachmentsDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments, true
}

// SetAttachments sets field value
func (o *ListAccessControllerDto) SetAttachments(v []ListAccessControllerAttachmentsDto) {
	o.Attachments = v
}

// GetGrants returns the Grants field value
func (o *ListAccessControllerDto) GetGrants() []ListAccessControllerGrantsDto {
	if o == nil {
		var ret []ListAccessControllerGrantsDto
		return ret
	}

	return o.Grants
}

// GetGrantsOk returns a tuple with the Grants field value
// and a boolean to check if the value has been set.
func (o *ListAccessControllerDto) GetGrantsOk() ([]ListAccessControllerGrantsDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grants, true
}

// SetGrants sets field value
func (o *ListAccessControllerDto) SetGrants(v []ListAccessControllerGrantsDto) {
	o.Grants = v
}

func (o ListAccessControllerDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListAccessControllerDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attachments"] = o.Attachments
	toSerialize["grants"] = o.Grants
	return toSerialize, nil
}

func (o *ListAccessControllerDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attachments",
		"grants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListAccessControllerDto := _ListAccessControllerDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListAccessControllerDto)

	if err != nil {
		return err
	}

	*o = ListAccessControllerDto(varListAccessControllerDto)

	return err
}

type NullableListAccessControllerDto struct {
	value *ListAccessControllerDto
	isSet bool
}

func (v NullableListAccessControllerDto) Get() *ListAccessControllerDto {
	return v.value
}

func (v *NullableListAccessControllerDto) Set(val *ListAccessControllerDto) {
	v.value = val
	v.isSet = true
}

func (v NullableListAccessControllerDto) IsSet() bool {
	return v.isSet
}

func (v *NullableListAccessControllerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAccessControllerDto(val *ListAccessControllerDto) *NullableListAccessControllerDto {
	return &NullableListAccessControllerDto{value: val, isSet: true}
}

func (v NullableListAccessControllerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAccessControllerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



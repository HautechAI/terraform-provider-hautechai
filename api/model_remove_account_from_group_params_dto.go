/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoveAccountFromGroupParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveAccountFromGroupParamsDto{}

// RemoveAccountFromGroupParamsDto struct for RemoveAccountFromGroupParamsDto
type RemoveAccountFromGroupParamsDto struct {
	AccountId string `json:"accountId"`
	GroupId string `json:"groupId"`
	Role string `json:"role"`
}

type _RemoveAccountFromGroupParamsDto RemoveAccountFromGroupParamsDto

// NewRemoveAccountFromGroupParamsDto instantiates a new RemoveAccountFromGroupParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveAccountFromGroupParamsDto(accountId string, groupId string, role string) *RemoveAccountFromGroupParamsDto {
	this := RemoveAccountFromGroupParamsDto{}
	this.AccountId = accountId
	this.GroupId = groupId
	this.Role = role
	return &this
}

// NewRemoveAccountFromGroupParamsDtoWithDefaults instantiates a new RemoveAccountFromGroupParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveAccountFromGroupParamsDtoWithDefaults() *RemoveAccountFromGroupParamsDto {
	this := RemoveAccountFromGroupParamsDto{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *RemoveAccountFromGroupParamsDto) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *RemoveAccountFromGroupParamsDto) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *RemoveAccountFromGroupParamsDto) SetAccountId(v string) {
	o.AccountId = v
}

// GetGroupId returns the GroupId field value
func (o *RemoveAccountFromGroupParamsDto) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *RemoveAccountFromGroupParamsDto) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *RemoveAccountFromGroupParamsDto) SetGroupId(v string) {
	o.GroupId = v
}

// GetRole returns the Role field value
func (o *RemoveAccountFromGroupParamsDto) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *RemoveAccountFromGroupParamsDto) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *RemoveAccountFromGroupParamsDto) SetRole(v string) {
	o.Role = v
}

func (o RemoveAccountFromGroupParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveAccountFromGroupParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountId"] = o.AccountId
	toSerialize["groupId"] = o.GroupId
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *RemoveAccountFromGroupParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountId",
		"groupId",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoveAccountFromGroupParamsDto := _RemoveAccountFromGroupParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoveAccountFromGroupParamsDto)

	if err != nil {
		return err
	}

	*o = RemoveAccountFromGroupParamsDto(varRemoveAccountFromGroupParamsDto)

	return err
}

type NullableRemoveAccountFromGroupParamsDto struct {
	value *RemoveAccountFromGroupParamsDto
	isSet bool
}

func (v NullableRemoveAccountFromGroupParamsDto) Get() *RemoveAccountFromGroupParamsDto {
	return v.value
}

func (v *NullableRemoveAccountFromGroupParamsDto) Set(val *RemoveAccountFromGroupParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveAccountFromGroupParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveAccountFromGroupParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveAccountFromGroupParamsDto(val *RemoveAccountFromGroupParamsDto) *NullableRemoveAccountFromGroupParamsDto {
	return &NullableRemoveAccountFromGroupParamsDto{value: val, isSet: true}
}

func (v NullableRemoveAccountFromGroupParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveAccountFromGroupParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddAccountToGroupControllerParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddAccountToGroupControllerParamsDto{}

// AddAccountToGroupControllerParamsDto struct for AddAccountToGroupControllerParamsDto
type AddAccountToGroupControllerParamsDto struct {
	AccountId string `json:"accountId"`
	Role string `json:"role"`
}

type _AddAccountToGroupControllerParamsDto AddAccountToGroupControllerParamsDto

// NewAddAccountToGroupControllerParamsDto instantiates a new AddAccountToGroupControllerParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddAccountToGroupControllerParamsDto(accountId string, role string) *AddAccountToGroupControllerParamsDto {
	this := AddAccountToGroupControllerParamsDto{}
	this.AccountId = accountId
	this.Role = role
	return &this
}

// NewAddAccountToGroupControllerParamsDtoWithDefaults instantiates a new AddAccountToGroupControllerParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddAccountToGroupControllerParamsDtoWithDefaults() *AddAccountToGroupControllerParamsDto {
	this := AddAccountToGroupControllerParamsDto{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *AddAccountToGroupControllerParamsDto) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AddAccountToGroupControllerParamsDto) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AddAccountToGroupControllerParamsDto) SetAccountId(v string) {
	o.AccountId = v
}

// GetRole returns the Role field value
func (o *AddAccountToGroupControllerParamsDto) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *AddAccountToGroupControllerParamsDto) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *AddAccountToGroupControllerParamsDto) SetRole(v string) {
	o.Role = v
}

func (o AddAccountToGroupControllerParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddAccountToGroupControllerParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountId"] = o.AccountId
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *AddAccountToGroupControllerParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountId",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddAccountToGroupControllerParamsDto := _AddAccountToGroupControllerParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddAccountToGroupControllerParamsDto)

	if err != nil {
		return err
	}

	*o = AddAccountToGroupControllerParamsDto(varAddAccountToGroupControllerParamsDto)

	return err
}

type NullableAddAccountToGroupControllerParamsDto struct {
	value *AddAccountToGroupControllerParamsDto
	isSet bool
}

func (v NullableAddAccountToGroupControllerParamsDto) Get() *AddAccountToGroupControllerParamsDto {
	return v.value
}

func (v *NullableAddAccountToGroupControllerParamsDto) Set(val *AddAccountToGroupControllerParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAddAccountToGroupControllerParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAddAccountToGroupControllerParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddAccountToGroupControllerParamsDto(val *AddAccountToGroupControllerParamsDto) *NullableAddAccountToGroupControllerParamsDto {
	return &NullableAddAccountToGroupControllerParamsDto{value: val, isSet: true}
}

func (v NullableAddAccountToGroupControllerParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddAccountToGroupControllerParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type StacksAPI interface {

	/*
	StacksControllerAddItemsV1 Method for StacksControllerAddItemsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiStacksControllerAddItemsV1Request
	*/
	StacksControllerAddItemsV1(ctx context.Context, id string) ApiStacksControllerAddItemsV1Request

	// StacksControllerAddItemsV1Execute executes the request
	//  @return StackEntity
	StacksControllerAddItemsV1Execute(r ApiStacksControllerAddItemsV1Request) (*StackEntity, *http.Response, error)

	/*
	StacksControllerCreateStackV1 Method for StacksControllerCreateStackV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStacksControllerCreateStackV1Request
	*/
	StacksControllerCreateStackV1(ctx context.Context) ApiStacksControllerCreateStackV1Request

	// StacksControllerCreateStackV1Execute executes the request
	//  @return StackEntity
	StacksControllerCreateStackV1Execute(r ApiStacksControllerCreateStackV1Request) (*StackEntity, *http.Response, error)

	/*
	StacksControllerGetStackV1 Method for StacksControllerGetStackV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiStacksControllerGetStackV1Request
	*/
	StacksControllerGetStackV1(ctx context.Context, id string) ApiStacksControllerGetStackV1Request

	// StacksControllerGetStackV1Execute executes the request
	//  @return StackEntity
	StacksControllerGetStackV1Execute(r ApiStacksControllerGetStackV1Request) (*StackEntity, *http.Response, error)

	/*
	StacksControllerListStacksV1 Method for StacksControllerListStacksV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiStacksControllerListStacksV1Request
	*/
	StacksControllerListStacksV1(ctx context.Context) ApiStacksControllerListStacksV1Request

	// StacksControllerListStacksV1Execute executes the request
	//  @return ListStacksDto
	StacksControllerListStacksV1Execute(r ApiStacksControllerListStacksV1Request) (*ListStacksDto, *http.Response, error)

	/*
	StacksControllerRemoveItemsV1 Method for StacksControllerRemoveItemsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiStacksControllerRemoveItemsV1Request
	*/
	StacksControllerRemoveItemsV1(ctx context.Context, id string) ApiStacksControllerRemoveItemsV1Request

	// StacksControllerRemoveItemsV1Execute executes the request
	//  @return StackEntity
	StacksControllerRemoveItemsV1Execute(r ApiStacksControllerRemoveItemsV1Request) (*StackEntity, *http.Response, error)

	/*
	StacksControllerUpdateMetadataV1 Method for StacksControllerUpdateMetadataV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiStacksControllerUpdateMetadataV1Request
	*/
	StacksControllerUpdateMetadataV1(ctx context.Context, id string) ApiStacksControllerUpdateMetadataV1Request

	// StacksControllerUpdateMetadataV1Execute executes the request
	//  @return ResourceEntity
	StacksControllerUpdateMetadataV1Execute(r ApiStacksControllerUpdateMetadataV1Request) (*ResourceEntity, *http.Response, error)
}

// StacksAPIService StacksAPI service
type StacksAPIService service

type ApiStacksControllerAddItemsV1Request struct {
	ctx context.Context
	ApiService StacksAPI
	id string
	addItemsToStackControllerParamsDto *AddItemsToStackControllerParamsDto
}

func (r ApiStacksControllerAddItemsV1Request) AddItemsToStackControllerParamsDto(addItemsToStackControllerParamsDto AddItemsToStackControllerParamsDto) ApiStacksControllerAddItemsV1Request {
	r.addItemsToStackControllerParamsDto = &addItemsToStackControllerParamsDto
	return r
}

func (r ApiStacksControllerAddItemsV1Request) Execute() (*StackEntity, *http.Response, error) {
	return r.ApiService.StacksControllerAddItemsV1Execute(r)
}

/*
StacksControllerAddItemsV1 Method for StacksControllerAddItemsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiStacksControllerAddItemsV1Request
*/
func (a *StacksAPIService) StacksControllerAddItemsV1(ctx context.Context, id string) ApiStacksControllerAddItemsV1Request {
	return ApiStacksControllerAddItemsV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StackEntity
func (a *StacksAPIService) StacksControllerAddItemsV1Execute(r ApiStacksControllerAddItemsV1Request) (*StackEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StackEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StacksAPIService.StacksControllerAddItemsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stacks/{id}/items/add"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addItemsToStackControllerParamsDto == nil {
		return localVarReturnValue, nil, reportError("addItemsToStackControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addItemsToStackControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStacksControllerCreateStackV1Request struct {
	ctx context.Context
	ApiService StacksAPI
	createStackParamsDto *CreateStackParamsDto
}

func (r ApiStacksControllerCreateStackV1Request) CreateStackParamsDto(createStackParamsDto CreateStackParamsDto) ApiStacksControllerCreateStackV1Request {
	r.createStackParamsDto = &createStackParamsDto
	return r
}

func (r ApiStacksControllerCreateStackV1Request) Execute() (*StackEntity, *http.Response, error) {
	return r.ApiService.StacksControllerCreateStackV1Execute(r)
}

/*
StacksControllerCreateStackV1 Method for StacksControllerCreateStackV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStacksControllerCreateStackV1Request
*/
func (a *StacksAPIService) StacksControllerCreateStackV1(ctx context.Context) ApiStacksControllerCreateStackV1Request {
	return ApiStacksControllerCreateStackV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StackEntity
func (a *StacksAPIService) StacksControllerCreateStackV1Execute(r ApiStacksControllerCreateStackV1Request) (*StackEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StackEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StacksAPIService.StacksControllerCreateStackV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stacks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createStackParamsDto == nil {
		return localVarReturnValue, nil, reportError("createStackParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createStackParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStacksControllerGetStackV1Request struct {
	ctx context.Context
	ApiService StacksAPI
	id string
}

func (r ApiStacksControllerGetStackV1Request) Execute() (*StackEntity, *http.Response, error) {
	return r.ApiService.StacksControllerGetStackV1Execute(r)
}

/*
StacksControllerGetStackV1 Method for StacksControllerGetStackV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiStacksControllerGetStackV1Request
*/
func (a *StacksAPIService) StacksControllerGetStackV1(ctx context.Context, id string) ApiStacksControllerGetStackV1Request {
	return ApiStacksControllerGetStackV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StackEntity
func (a *StacksAPIService) StacksControllerGetStackV1Execute(r ApiStacksControllerGetStackV1Request) (*StackEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StackEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StacksAPIService.StacksControllerGetStackV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stacks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStacksControllerListStacksV1Request struct {
	ctx context.Context
	ApiService StacksAPI
	orderBy *string
	limit *float32
	cursor *string
}

func (r ApiStacksControllerListStacksV1Request) OrderBy(orderBy string) ApiStacksControllerListStacksV1Request {
	r.orderBy = &orderBy
	return r
}

func (r ApiStacksControllerListStacksV1Request) Limit(limit float32) ApiStacksControllerListStacksV1Request {
	r.limit = &limit
	return r
}

func (r ApiStacksControllerListStacksV1Request) Cursor(cursor string) ApiStacksControllerListStacksV1Request {
	r.cursor = &cursor
	return r
}

func (r ApiStacksControllerListStacksV1Request) Execute() (*ListStacksDto, *http.Response, error) {
	return r.ApiService.StacksControllerListStacksV1Execute(r)
}

/*
StacksControllerListStacksV1 Method for StacksControllerListStacksV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiStacksControllerListStacksV1Request
*/
func (a *StacksAPIService) StacksControllerListStacksV1(ctx context.Context) ApiStacksControllerListStacksV1Request {
	return ApiStacksControllerListStacksV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListStacksDto
func (a *StacksAPIService) StacksControllerListStacksV1Execute(r ApiStacksControllerListStacksV1Request) (*ListStacksDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListStacksDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StacksAPIService.StacksControllerListStacksV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stacks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	} else {
		var defaultValue string = "createdAt_DESC"
		r.orderBy = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 50
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStacksControllerRemoveItemsV1Request struct {
	ctx context.Context
	ApiService StacksAPI
	id string
	removeItemsFromCollectionControllerParamsDto *RemoveItemsFromCollectionControllerParamsDto
}

func (r ApiStacksControllerRemoveItemsV1Request) RemoveItemsFromCollectionControllerParamsDto(removeItemsFromCollectionControllerParamsDto RemoveItemsFromCollectionControllerParamsDto) ApiStacksControllerRemoveItemsV1Request {
	r.removeItemsFromCollectionControllerParamsDto = &removeItemsFromCollectionControllerParamsDto
	return r
}

func (r ApiStacksControllerRemoveItemsV1Request) Execute() (*StackEntity, *http.Response, error) {
	return r.ApiService.StacksControllerRemoveItemsV1Execute(r)
}

/*
StacksControllerRemoveItemsV1 Method for StacksControllerRemoveItemsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiStacksControllerRemoveItemsV1Request
*/
func (a *StacksAPIService) StacksControllerRemoveItemsV1(ctx context.Context, id string) ApiStacksControllerRemoveItemsV1Request {
	return ApiStacksControllerRemoveItemsV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StackEntity
func (a *StacksAPIService) StacksControllerRemoveItemsV1Execute(r ApiStacksControllerRemoveItemsV1Request) (*StackEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StackEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StacksAPIService.StacksControllerRemoveItemsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stacks/{id}/items/remove"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.removeItemsFromCollectionControllerParamsDto == nil {
		return localVarReturnValue, nil, reportError("removeItemsFromCollectionControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.removeItemsFromCollectionControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStacksControllerUpdateMetadataV1Request struct {
	ctx context.Context
	ApiService StacksAPI
	id string
	updateMetadataDto *UpdateMetadataDto
}

func (r ApiStacksControllerUpdateMetadataV1Request) UpdateMetadataDto(updateMetadataDto UpdateMetadataDto) ApiStacksControllerUpdateMetadataV1Request {
	r.updateMetadataDto = &updateMetadataDto
	return r
}

func (r ApiStacksControllerUpdateMetadataV1Request) Execute() (*ResourceEntity, *http.Response, error) {
	return r.ApiService.StacksControllerUpdateMetadataV1Execute(r)
}

/*
StacksControllerUpdateMetadataV1 Method for StacksControllerUpdateMetadataV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiStacksControllerUpdateMetadataV1Request
*/
func (a *StacksAPIService) StacksControllerUpdateMetadataV1(ctx context.Context, id string) ApiStacksControllerUpdateMetadataV1Request {
	return ApiStacksControllerUpdateMetadataV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ResourceEntity
func (a *StacksAPIService) StacksControllerUpdateMetadataV1Execute(r ApiStacksControllerUpdateMetadataV1Request) (*ResourceEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StacksAPIService.StacksControllerUpdateMetadataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/stacks/{id}/metadata"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateMetadataDto == nil {
		return localVarReturnValue, nil, reportError("updateMetadataDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateMetadataDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

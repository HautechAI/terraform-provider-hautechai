/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AccessAPI interface {

	/*
	AccessControllerAccessV1 UNSTABLE

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccessControllerAccessV1Request
	*/
	AccessControllerAccessV1(ctx context.Context, id string) ApiAccessControllerAccessV1Request

	// AccessControllerAccessV1Execute executes the request
	//  @return ListAccessControllerDto
	AccessControllerAccessV1Execute(r ApiAccessControllerAccessV1Request) (*ListAccessControllerDto, *http.Response, error)

	/*
	AccessControllerAttachAccessV1 Method for AccessControllerAttachAccessV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccessControllerAttachAccessV1Request
	*/
	AccessControllerAttachAccessV1(ctx context.Context, id string) ApiAccessControllerAttachAccessV1Request

	// AccessControllerAttachAccessV1Execute executes the request
	AccessControllerAttachAccessV1Execute(r ApiAccessControllerAttachAccessV1Request) (*http.Response, error)

	/*
	AccessControllerDetachAccessV1 Method for AccessControllerDetachAccessV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccessControllerDetachAccessV1Request
	*/
	AccessControllerDetachAccessV1(ctx context.Context, id string) ApiAccessControllerDetachAccessV1Request

	// AccessControllerDetachAccessV1Execute executes the request
	AccessControllerDetachAccessV1Execute(r ApiAccessControllerDetachAccessV1Request) (*http.Response, error)

	/*
	AccessControllerGrantAccessV1 Method for AccessControllerGrantAccessV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccessControllerGrantAccessV1Request
	*/
	AccessControllerGrantAccessV1(ctx context.Context, id string) ApiAccessControllerGrantAccessV1Request

	// AccessControllerGrantAccessV1Execute executes the request
	AccessControllerGrantAccessV1Execute(r ApiAccessControllerGrantAccessV1Request) (*http.Response, error)

	/*
	AccessControllerRevokeAccessV1 Method for AccessControllerRevokeAccessV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiAccessControllerRevokeAccessV1Request
	*/
	AccessControllerRevokeAccessV1(ctx context.Context, id string) ApiAccessControllerRevokeAccessV1Request

	// AccessControllerRevokeAccessV1Execute executes the request
	AccessControllerRevokeAccessV1Execute(r ApiAccessControllerRevokeAccessV1Request) (*http.Response, error)
}

// AccessAPIService AccessAPI service
type AccessAPIService service

type ApiAccessControllerAccessV1Request struct {
	ctx context.Context
	ApiService AccessAPI
	id string
}

func (r ApiAccessControllerAccessV1Request) Execute() (*ListAccessControllerDto, *http.Response, error) {
	return r.ApiService.AccessControllerAccessV1Execute(r)
}

/*
AccessControllerAccessV1 UNSTABLE

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccessControllerAccessV1Request
*/
func (a *AccessAPIService) AccessControllerAccessV1(ctx context.Context, id string) ApiAccessControllerAccessV1Request {
	return ApiAccessControllerAccessV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ListAccessControllerDto
func (a *AccessAPIService) AccessControllerAccessV1Execute(r ApiAccessControllerAccessV1Request) (*ListAccessControllerDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAccessControllerDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessAPIService.AccessControllerAccessV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/resources/{id}/access"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccessControllerAttachAccessV1Request struct {
	ctx context.Context
	ApiService AccessAPI
	id string
	attachAccessControllerParamsDto *AttachAccessControllerParamsDto
}

func (r ApiAccessControllerAttachAccessV1Request) AttachAccessControllerParamsDto(attachAccessControllerParamsDto AttachAccessControllerParamsDto) ApiAccessControllerAttachAccessV1Request {
	r.attachAccessControllerParamsDto = &attachAccessControllerParamsDto
	return r
}

func (r ApiAccessControllerAttachAccessV1Request) Execute() (*http.Response, error) {
	return r.ApiService.AccessControllerAttachAccessV1Execute(r)
}

/*
AccessControllerAttachAccessV1 Method for AccessControllerAttachAccessV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccessControllerAttachAccessV1Request
*/
func (a *AccessAPIService) AccessControllerAttachAccessV1(ctx context.Context, id string) ApiAccessControllerAttachAccessV1Request {
	return ApiAccessControllerAttachAccessV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AccessAPIService) AccessControllerAttachAccessV1Execute(r ApiAccessControllerAttachAccessV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessAPIService.AccessControllerAttachAccessV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/resources/{id}/access/attach"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.attachAccessControllerParamsDto == nil {
		return nil, reportError("attachAccessControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.attachAccessControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAccessControllerDetachAccessV1Request struct {
	ctx context.Context
	ApiService AccessAPI
	id string
	detachAccessControllerParamsDto *DetachAccessControllerParamsDto
}

func (r ApiAccessControllerDetachAccessV1Request) DetachAccessControllerParamsDto(detachAccessControllerParamsDto DetachAccessControllerParamsDto) ApiAccessControllerDetachAccessV1Request {
	r.detachAccessControllerParamsDto = &detachAccessControllerParamsDto
	return r
}

func (r ApiAccessControllerDetachAccessV1Request) Execute() (*http.Response, error) {
	return r.ApiService.AccessControllerDetachAccessV1Execute(r)
}

/*
AccessControllerDetachAccessV1 Method for AccessControllerDetachAccessV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccessControllerDetachAccessV1Request
*/
func (a *AccessAPIService) AccessControllerDetachAccessV1(ctx context.Context, id string) ApiAccessControllerDetachAccessV1Request {
	return ApiAccessControllerDetachAccessV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AccessAPIService) AccessControllerDetachAccessV1Execute(r ApiAccessControllerDetachAccessV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessAPIService.AccessControllerDetachAccessV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/resources/{id}/access/detach"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.detachAccessControllerParamsDto == nil {
		return nil, reportError("detachAccessControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.detachAccessControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAccessControllerGrantAccessV1Request struct {
	ctx context.Context
	ApiService AccessAPI
	id string
	grantAccessControllerParams *GrantAccessControllerParams
}

func (r ApiAccessControllerGrantAccessV1Request) GrantAccessControllerParams(grantAccessControllerParams GrantAccessControllerParams) ApiAccessControllerGrantAccessV1Request {
	r.grantAccessControllerParams = &grantAccessControllerParams
	return r
}

func (r ApiAccessControllerGrantAccessV1Request) Execute() (*http.Response, error) {
	return r.ApiService.AccessControllerGrantAccessV1Execute(r)
}

/*
AccessControllerGrantAccessV1 Method for AccessControllerGrantAccessV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccessControllerGrantAccessV1Request
*/
func (a *AccessAPIService) AccessControllerGrantAccessV1(ctx context.Context, id string) ApiAccessControllerGrantAccessV1Request {
	return ApiAccessControllerGrantAccessV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AccessAPIService) AccessControllerGrantAccessV1Execute(r ApiAccessControllerGrantAccessV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessAPIService.AccessControllerGrantAccessV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/resources/{id}/access/grant"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.grantAccessControllerParams == nil {
		return nil, reportError("grantAccessControllerParams is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.grantAccessControllerParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAccessControllerRevokeAccessV1Request struct {
	ctx context.Context
	ApiService AccessAPI
	id string
	revokeAccessControllerParamsDto *RevokeAccessControllerParamsDto
}

func (r ApiAccessControllerRevokeAccessV1Request) RevokeAccessControllerParamsDto(revokeAccessControllerParamsDto RevokeAccessControllerParamsDto) ApiAccessControllerRevokeAccessV1Request {
	r.revokeAccessControllerParamsDto = &revokeAccessControllerParamsDto
	return r
}

func (r ApiAccessControllerRevokeAccessV1Request) Execute() (*http.Response, error) {
	return r.ApiService.AccessControllerRevokeAccessV1Execute(r)
}

/*
AccessControllerRevokeAccessV1 Method for AccessControllerRevokeAccessV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAccessControllerRevokeAccessV1Request
*/
func (a *AccessAPIService) AccessControllerRevokeAccessV1(ctx context.Context, id string) ApiAccessControllerRevokeAccessV1Request {
	return ApiAccessControllerRevokeAccessV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AccessAPIService) AccessControllerRevokeAccessV1Execute(r ApiAccessControllerRevokeAccessV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessAPIService.AccessControllerRevokeAccessV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/resources/{id}/access/revoke"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.revokeAccessControllerParamsDto == nil {
		return nil, reportError("revokeAccessControllerParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.revokeAccessControllerParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type WebsocketAPI interface {

	/*
	WebsocketControllerGetSettingsV1 Method for WebsocketControllerGetSettingsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWebsocketControllerGetSettingsV1Request
	*/
	WebsocketControllerGetSettingsV1(ctx context.Context) ApiWebsocketControllerGetSettingsV1Request

	// WebsocketControllerGetSettingsV1Execute executes the request
	WebsocketControllerGetSettingsV1Execute(r ApiWebsocketControllerGetSettingsV1Request) (*http.Response, error)

	/*
	WebsocketControllerRegisterWebsocketV1 Method for WebsocketControllerRegisterWebsocketV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWebsocketControllerRegisterWebsocketV1Request
	*/
	WebsocketControllerRegisterWebsocketV1(ctx context.Context) ApiWebsocketControllerRegisterWebsocketV1Request

	// WebsocketControllerRegisterWebsocketV1Execute executes the request
	WebsocketControllerRegisterWebsocketV1Execute(r ApiWebsocketControllerRegisterWebsocketV1Request) (*http.Response, error)
}

// WebsocketAPIService WebsocketAPI service
type WebsocketAPIService service

type ApiWebsocketControllerGetSettingsV1Request struct {
	ctx context.Context
	ApiService WebsocketAPI
}

func (r ApiWebsocketControllerGetSettingsV1Request) Execute() (*http.Response, error) {
	return r.ApiService.WebsocketControllerGetSettingsV1Execute(r)
}

/*
WebsocketControllerGetSettingsV1 Method for WebsocketControllerGetSettingsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWebsocketControllerGetSettingsV1Request
*/
func (a *WebsocketAPIService) WebsocketControllerGetSettingsV1(ctx context.Context) ApiWebsocketControllerGetSettingsV1Request {
	return ApiWebsocketControllerGetSettingsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WebsocketAPIService) WebsocketControllerGetSettingsV1Execute(r ApiWebsocketControllerGetSettingsV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebsocketAPIService.WebsocketControllerGetSettingsV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/websocket/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWebsocketControllerRegisterWebsocketV1Request struct {
	ctx context.Context
	ApiService WebsocketAPI
}

func (r ApiWebsocketControllerRegisterWebsocketV1Request) Execute() (*http.Response, error) {
	return r.ApiService.WebsocketControllerRegisterWebsocketV1Execute(r)
}

/*
WebsocketControllerRegisterWebsocketV1 Method for WebsocketControllerRegisterWebsocketV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWebsocketControllerRegisterWebsocketV1Request
*/
func (a *WebsocketAPIService) WebsocketControllerRegisterWebsocketV1(ctx context.Context) ApiWebsocketControllerRegisterWebsocketV1Request {
	return ApiWebsocketControllerRegisterWebsocketV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WebsocketAPIService) WebsocketControllerRegisterWebsocketV1Execute(r ApiWebsocketControllerRegisterWebsocketV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WebsocketAPIService.WebsocketControllerRegisterWebsocketV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/websocket/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

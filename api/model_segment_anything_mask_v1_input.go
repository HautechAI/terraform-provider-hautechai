/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SegmentAnythingMaskV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentAnythingMaskV1Input{}

// SegmentAnythingMaskV1Input struct for SegmentAnythingMaskV1Input
type SegmentAnythingMaskV1Input struct {
	ImageId string `json:"imageId"`
	Box []float32 `json:"box"`
	Smoothness *float32 `json:"smoothness,omitempty"`
	MaskThreshold *float32 `json:"maskThreshold,omitempty"`
}

type _SegmentAnythingMaskV1Input SegmentAnythingMaskV1Input

// NewSegmentAnythingMaskV1Input instantiates a new SegmentAnythingMaskV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentAnythingMaskV1Input(imageId string, box []float32) *SegmentAnythingMaskV1Input {
	this := SegmentAnythingMaskV1Input{}
	this.ImageId = imageId
	this.Box = box
	var smoothness float32 = 0.1
	this.Smoothness = &smoothness
	var maskThreshold float32 = 0
	this.MaskThreshold = &maskThreshold
	return &this
}

// NewSegmentAnythingMaskV1InputWithDefaults instantiates a new SegmentAnythingMaskV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentAnythingMaskV1InputWithDefaults() *SegmentAnythingMaskV1Input {
	this := SegmentAnythingMaskV1Input{}
	var smoothness float32 = 0.1
	this.Smoothness = &smoothness
	var maskThreshold float32 = 0
	this.MaskThreshold = &maskThreshold
	return &this
}

// GetImageId returns the ImageId field value
func (o *SegmentAnythingMaskV1Input) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *SegmentAnythingMaskV1Input) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *SegmentAnythingMaskV1Input) SetImageId(v string) {
	o.ImageId = v
}

// GetBox returns the Box field value
func (o *SegmentAnythingMaskV1Input) GetBox() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Box
}

// GetBoxOk returns a tuple with the Box field value
// and a boolean to check if the value has been set.
func (o *SegmentAnythingMaskV1Input) GetBoxOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Box, true
}

// SetBox sets field value
func (o *SegmentAnythingMaskV1Input) SetBox(v []float32) {
	o.Box = v
}

// GetSmoothness returns the Smoothness field value if set, zero value otherwise.
func (o *SegmentAnythingMaskV1Input) GetSmoothness() float32 {
	if o == nil || IsNil(o.Smoothness) {
		var ret float32
		return ret
	}
	return *o.Smoothness
}

// GetSmoothnessOk returns a tuple with the Smoothness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentAnythingMaskV1Input) GetSmoothnessOk() (*float32, bool) {
	if o == nil || IsNil(o.Smoothness) {
		return nil, false
	}
	return o.Smoothness, true
}

// HasSmoothness returns a boolean if a field has been set.
func (o *SegmentAnythingMaskV1Input) HasSmoothness() bool {
	if o != nil && !IsNil(o.Smoothness) {
		return true
	}

	return false
}

// SetSmoothness gets a reference to the given float32 and assigns it to the Smoothness field.
func (o *SegmentAnythingMaskV1Input) SetSmoothness(v float32) {
	o.Smoothness = &v
}

// GetMaskThreshold returns the MaskThreshold field value if set, zero value otherwise.
func (o *SegmentAnythingMaskV1Input) GetMaskThreshold() float32 {
	if o == nil || IsNil(o.MaskThreshold) {
		var ret float32
		return ret
	}
	return *o.MaskThreshold
}

// GetMaskThresholdOk returns a tuple with the MaskThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentAnythingMaskV1Input) GetMaskThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.MaskThreshold) {
		return nil, false
	}
	return o.MaskThreshold, true
}

// HasMaskThreshold returns a boolean if a field has been set.
func (o *SegmentAnythingMaskV1Input) HasMaskThreshold() bool {
	if o != nil && !IsNil(o.MaskThreshold) {
		return true
	}

	return false
}

// SetMaskThreshold gets a reference to the given float32 and assigns it to the MaskThreshold field.
func (o *SegmentAnythingMaskV1Input) SetMaskThreshold(v float32) {
	o.MaskThreshold = &v
}

func (o SegmentAnythingMaskV1Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentAnythingMaskV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageId"] = o.ImageId
	toSerialize["box"] = o.Box
	if !IsNil(o.Smoothness) {
		toSerialize["smoothness"] = o.Smoothness
	}
	if !IsNil(o.MaskThreshold) {
		toSerialize["maskThreshold"] = o.MaskThreshold
	}
	return toSerialize, nil
}

func (o *SegmentAnythingMaskV1Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageId",
		"box",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSegmentAnythingMaskV1Input := _SegmentAnythingMaskV1Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSegmentAnythingMaskV1Input)

	if err != nil {
		return err
	}

	*o = SegmentAnythingMaskV1Input(varSegmentAnythingMaskV1Input)

	return err
}

type NullableSegmentAnythingMaskV1Input struct {
	value *SegmentAnythingMaskV1Input
	isSet bool
}

func (v NullableSegmentAnythingMaskV1Input) Get() *SegmentAnythingMaskV1Input {
	return v.value
}

func (v *NullableSegmentAnythingMaskV1Input) Set(val *SegmentAnythingMaskV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentAnythingMaskV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentAnythingMaskV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentAnythingMaskV1Input(val *SegmentAnythingMaskV1Input) *NullableSegmentAnythingMaskV1Input {
	return &NullableSegmentAnythingMaskV1Input{value: val, isSet: true}
}

func (v NullableSegmentAnythingMaskV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentAnythingMaskV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



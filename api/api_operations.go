/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type OperationsAPI interface {

	/*
	OperationsControllerGetOperationV1 Method for OperationsControllerGetOperationV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiOperationsControllerGetOperationV1Request
	*/
	OperationsControllerGetOperationV1(ctx context.Context, id string) ApiOperationsControllerGetOperationV1Request

	// OperationsControllerGetOperationV1Execute executes the request
	//  @return OperationEntity
	OperationsControllerGetOperationV1Execute(r ApiOperationsControllerGetOperationV1Request) (*OperationEntity, *http.Response, error)

	/*
	OperationsControllerGetOperationsV1 Method for OperationsControllerGetOperationsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerGetOperationsV1Request
	*/
	OperationsControllerGetOperationsV1(ctx context.Context) ApiOperationsControllerGetOperationsV1Request

	// OperationsControllerGetOperationsV1Execute executes the request
	//  @return []OperationEntity
	OperationsControllerGetOperationsV1Execute(r ApiOperationsControllerGetOperationsV1Request) ([]OperationEntity, *http.Response, error)

	/*
	OperationsControllerListOperationsV1 Method for OperationsControllerListOperationsV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerListOperationsV1Request
	*/
	OperationsControllerListOperationsV1(ctx context.Context) ApiOperationsControllerListOperationsV1Request

	// OperationsControllerListOperationsV1Execute executes the request
	//  @return ListOperationsDto
	OperationsControllerListOperationsV1Execute(r ApiOperationsControllerListOperationsV1Request) (*ListOperationsDto, *http.Response, error)

	/*
	OperationsControllerRunCompositeV1V1 Method for OperationsControllerRunCompositeV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunCompositeV1V1Request
	*/
	OperationsControllerRunCompositeV1V1(ctx context.Context) ApiOperationsControllerRunCompositeV1V1Request

	// OperationsControllerRunCompositeV1V1Execute executes the request
	//  @return CompositeV1Response
	OperationsControllerRunCompositeV1V1Execute(r ApiOperationsControllerRunCompositeV1V1Request) (*CompositeV1Response, *http.Response, error)

	/*
	OperationsControllerRunCropV1V1 Method for OperationsControllerRunCropV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunCropV1V1Request
	*/
	OperationsControllerRunCropV1V1(ctx context.Context) ApiOperationsControllerRunCropV1V1Request

	// OperationsControllerRunCropV1V1Execute executes the request
	//  @return CropV1Response
	OperationsControllerRunCropV1V1Execute(r ApiOperationsControllerRunCropV1V1Request) (*CropV1Response, *http.Response, error)

	/*
	OperationsControllerRunCutV1V1 Method for OperationsControllerRunCutV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunCutV1V1Request
	*/
	OperationsControllerRunCutV1V1(ctx context.Context) ApiOperationsControllerRunCutV1V1Request

	// OperationsControllerRunCutV1V1Execute executes the request
	//  @return CutV1Response
	OperationsControllerRunCutV1V1Execute(r ApiOperationsControllerRunCutV1V1Request) (*CutV1Response, *http.Response, error)

	/*
	OperationsControllerRunGptV1V1 Method for OperationsControllerRunGptV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunGptV1V1Request
	*/
	OperationsControllerRunGptV1V1(ctx context.Context) ApiOperationsControllerRunGptV1V1Request

	// OperationsControllerRunGptV1V1Execute executes the request
	//  @return GptV1Response
	OperationsControllerRunGptV1V1Execute(r ApiOperationsControllerRunGptV1V1Request) (*GptV1Response, *http.Response, error)

	/*
	OperationsControllerRunHauteLindaV1V1 Method for OperationsControllerRunHauteLindaV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunHauteLindaV1V1Request
	*/
	OperationsControllerRunHauteLindaV1V1(ctx context.Context) ApiOperationsControllerRunHauteLindaV1V1Request

	// OperationsControllerRunHauteLindaV1V1Execute executes the request
	//  @return HauteLindaV1Response
	OperationsControllerRunHauteLindaV1V1Execute(r ApiOperationsControllerRunHauteLindaV1V1Request) (*HauteLindaV1Response, *http.Response, error)

	/*
	OperationsControllerRunHauteNaomiV1V1 Method for OperationsControllerRunHauteNaomiV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunHauteNaomiV1V1Request
	*/
	OperationsControllerRunHauteNaomiV1V1(ctx context.Context) ApiOperationsControllerRunHauteNaomiV1V1Request

	// OperationsControllerRunHauteNaomiV1V1Execute executes the request
	//  @return HauteNaomiV1Response
	OperationsControllerRunHauteNaomiV1V1Execute(r ApiOperationsControllerRunHauteNaomiV1V1Request) (*HauteNaomiV1Response, *http.Response, error)

	/*
	OperationsControllerRunImagineKateV1V1 Method for OperationsControllerRunImagineKateV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunImagineKateV1V1Request
	*/
	OperationsControllerRunImagineKateV1V1(ctx context.Context) ApiOperationsControllerRunImagineKateV1V1Request

	// OperationsControllerRunImagineKateV1V1Execute executes the request
	//  @return ImagineKateV1Response
	OperationsControllerRunImagineKateV1V1Execute(r ApiOperationsControllerRunImagineKateV1V1Request) (*ImagineKateV1Response, *http.Response, error)

	/*
	OperationsControllerRunInpaintKateV1V1 Method for OperationsControllerRunInpaintKateV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunInpaintKateV1V1Request
	*/
	OperationsControllerRunInpaintKateV1V1(ctx context.Context) ApiOperationsControllerRunInpaintKateV1V1Request

	// OperationsControllerRunInpaintKateV1V1Execute executes the request
	//  @return InpaintKateV1Response
	OperationsControllerRunInpaintKateV1V1Execute(r ApiOperationsControllerRunInpaintKateV1V1Request) (*InpaintKateV1Response, *http.Response, error)

	/*
	OperationsControllerRunNegateImageV1V1 Method for OperationsControllerRunNegateImageV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunNegateImageV1V1Request
	*/
	OperationsControllerRunNegateImageV1V1(ctx context.Context) ApiOperationsControllerRunNegateImageV1V1Request

	// OperationsControllerRunNegateImageV1V1Execute executes the request
	//  @return NegateImageV1Response
	OperationsControllerRunNegateImageV1V1Execute(r ApiOperationsControllerRunNegateImageV1V1Request) (*NegateImageV1Response, *http.Response, error)

	/*
	OperationsControllerRunNoiseV1V1 Method for OperationsControllerRunNoiseV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunNoiseV1V1Request
	*/
	OperationsControllerRunNoiseV1V1(ctx context.Context) ApiOperationsControllerRunNoiseV1V1Request

	// OperationsControllerRunNoiseV1V1Execute executes the request
	//  @return NoiseV1Response
	OperationsControllerRunNoiseV1V1Execute(r ApiOperationsControllerRunNoiseV1V1Request) (*NoiseV1Response, *http.Response, error)

	/*
	OperationsControllerRunObjectDetectionV1V1 Method for OperationsControllerRunObjectDetectionV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunObjectDetectionV1V1Request
	*/
	OperationsControllerRunObjectDetectionV1V1(ctx context.Context) ApiOperationsControllerRunObjectDetectionV1V1Request

	// OperationsControllerRunObjectDetectionV1V1Execute executes the request
	//  @return ObjectDetectionV1Response
	OperationsControllerRunObjectDetectionV1V1Execute(r ApiOperationsControllerRunObjectDetectionV1V1Request) (*ObjectDetectionV1Response, *http.Response, error)

	/*
	OperationsControllerRunPoseEstimationV1V1 Method for OperationsControllerRunPoseEstimationV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunPoseEstimationV1V1Request
	*/
	OperationsControllerRunPoseEstimationV1V1(ctx context.Context) ApiOperationsControllerRunPoseEstimationV1V1Request

	// OperationsControllerRunPoseEstimationV1V1Execute executes the request
	//  @return PoseEstimationV1Response
	OperationsControllerRunPoseEstimationV1V1Execute(r ApiOperationsControllerRunPoseEstimationV1V1Request) (*PoseEstimationV1Response, *http.Response, error)

	/*
	OperationsControllerRunSegmentAnythingEmbeddingsV1V1 Method for OperationsControllerRunSegmentAnythingEmbeddingsV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request
	*/
	OperationsControllerRunSegmentAnythingEmbeddingsV1V1(ctx context.Context) ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request

	// OperationsControllerRunSegmentAnythingEmbeddingsV1V1Execute executes the request
	//  @return SegmentAnythingEmbeddingsV1Response
	OperationsControllerRunSegmentAnythingEmbeddingsV1V1Execute(r ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request) (*SegmentAnythingEmbeddingsV1Response, *http.Response, error)

	/*
	OperationsControllerRunSegmentAnythingMaskV1V1 Method for OperationsControllerRunSegmentAnythingMaskV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunSegmentAnythingMaskV1V1Request
	*/
	OperationsControllerRunSegmentAnythingMaskV1V1(ctx context.Context) ApiOperationsControllerRunSegmentAnythingMaskV1V1Request

	// OperationsControllerRunSegmentAnythingMaskV1V1Execute executes the request
	//  @return SegmentAnythingMaskV1Response
	OperationsControllerRunSegmentAnythingMaskV1V1Execute(r ApiOperationsControllerRunSegmentAnythingMaskV1V1Request) (*SegmentAnythingMaskV1Response, *http.Response, error)

	/*
	OperationsControllerRunUpscaleV1V1 Method for OperationsControllerRunUpscaleV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunUpscaleV1V1Request
	*/
	OperationsControllerRunUpscaleV1V1(ctx context.Context) ApiOperationsControllerRunUpscaleV1V1Request

	// OperationsControllerRunUpscaleV1V1Execute executes the request
	//  @return UpscaleV1Response
	OperationsControllerRunUpscaleV1V1Execute(r ApiOperationsControllerRunUpscaleV1V1Request) (*UpscaleV1Response, *http.Response, error)

	/*
	OperationsControllerRunVtonGiseleV1V1 Method for OperationsControllerRunVtonGiseleV1V1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOperationsControllerRunVtonGiseleV1V1Request
	*/
	OperationsControllerRunVtonGiseleV1V1(ctx context.Context) ApiOperationsControllerRunVtonGiseleV1V1Request

	// OperationsControllerRunVtonGiseleV1V1Execute executes the request
	//  @return VtonGiseleV1Response
	OperationsControllerRunVtonGiseleV1V1Execute(r ApiOperationsControllerRunVtonGiseleV1V1Request) (*VtonGiseleV1Response, *http.Response, error)

	/*
	OperationsControllerUpdateMetadataV1 Method for OperationsControllerUpdateMetadataV1

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiOperationsControllerUpdateMetadataV1Request
	*/
	OperationsControllerUpdateMetadataV1(ctx context.Context, id string) ApiOperationsControllerUpdateMetadataV1Request

	// OperationsControllerUpdateMetadataV1Execute executes the request
	//  @return ResourceEntity
	OperationsControllerUpdateMetadataV1Execute(r ApiOperationsControllerUpdateMetadataV1Request) (*ResourceEntity, *http.Response, error)
}

// OperationsAPIService OperationsAPI service
type OperationsAPIService service

type ApiOperationsControllerGetOperationV1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	id string
}

func (r ApiOperationsControllerGetOperationV1Request) Execute() (*OperationEntity, *http.Response, error) {
	return r.ApiService.OperationsControllerGetOperationV1Execute(r)
}

/*
OperationsControllerGetOperationV1 Method for OperationsControllerGetOperationV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiOperationsControllerGetOperationV1Request
*/
func (a *OperationsAPIService) OperationsControllerGetOperationV1(ctx context.Context, id string) ApiOperationsControllerGetOperationV1Request {
	return ApiOperationsControllerGetOperationV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OperationEntity
func (a *OperationsAPIService) OperationsControllerGetOperationV1Execute(r ApiOperationsControllerGetOperationV1Request) (*OperationEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperationEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerGetOperationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerGetOperationsV1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	getOperationsParamsDto *GetOperationsParamsDto
}

func (r ApiOperationsControllerGetOperationsV1Request) GetOperationsParamsDto(getOperationsParamsDto GetOperationsParamsDto) ApiOperationsControllerGetOperationsV1Request {
	r.getOperationsParamsDto = &getOperationsParamsDto
	return r
}

func (r ApiOperationsControllerGetOperationsV1Request) Execute() ([]OperationEntity, *http.Response, error) {
	return r.ApiService.OperationsControllerGetOperationsV1Execute(r)
}

/*
OperationsControllerGetOperationsV1 Method for OperationsControllerGetOperationsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerGetOperationsV1Request
*/
func (a *OperationsAPIService) OperationsControllerGetOperationsV1(ctx context.Context) ApiOperationsControllerGetOperationsV1Request {
	return ApiOperationsControllerGetOperationsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OperationEntity
func (a *OperationsAPIService) OperationsControllerGetOperationsV1Execute(r ApiOperationsControllerGetOperationsV1Request) ([]OperationEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OperationEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerGetOperationsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/many"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getOperationsParamsDto == nil {
		return localVarReturnValue, nil, reportError("getOperationsParamsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getOperationsParamsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerListOperationsV1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	orderBy *string
	limit *float32
	cursor *string
}

func (r ApiOperationsControllerListOperationsV1Request) OrderBy(orderBy string) ApiOperationsControllerListOperationsV1Request {
	r.orderBy = &orderBy
	return r
}

func (r ApiOperationsControllerListOperationsV1Request) Limit(limit float32) ApiOperationsControllerListOperationsV1Request {
	r.limit = &limit
	return r
}

func (r ApiOperationsControllerListOperationsV1Request) Cursor(cursor string) ApiOperationsControllerListOperationsV1Request {
	r.cursor = &cursor
	return r
}

func (r ApiOperationsControllerListOperationsV1Request) Execute() (*ListOperationsDto, *http.Response, error) {
	return r.ApiService.OperationsControllerListOperationsV1Execute(r)
}

/*
OperationsControllerListOperationsV1 Method for OperationsControllerListOperationsV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerListOperationsV1Request
*/
func (a *OperationsAPIService) OperationsControllerListOperationsV1(ctx context.Context) ApiOperationsControllerListOperationsV1Request {
	return ApiOperationsControllerListOperationsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOperationsDto
func (a *OperationsAPIService) OperationsControllerListOperationsV1Execute(r ApiOperationsControllerListOperationsV1Request) (*ListOperationsDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOperationsDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerListOperationsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	} else {
		var defaultValue string = "createdAt_DESC"
		r.orderBy = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 50
		r.limit = &defaultValue
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunCompositeV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	compositeV1Request *CompositeV1Request
}

func (r ApiOperationsControllerRunCompositeV1V1Request) CompositeV1Request(compositeV1Request CompositeV1Request) ApiOperationsControllerRunCompositeV1V1Request {
	r.compositeV1Request = &compositeV1Request
	return r
}

func (r ApiOperationsControllerRunCompositeV1V1Request) Execute() (*CompositeV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunCompositeV1V1Execute(r)
}

/*
OperationsControllerRunCompositeV1V1 Method for OperationsControllerRunCompositeV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunCompositeV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunCompositeV1V1(ctx context.Context) ApiOperationsControllerRunCompositeV1V1Request {
	return ApiOperationsControllerRunCompositeV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CompositeV1Response
func (a *OperationsAPIService) OperationsControllerRunCompositeV1V1Execute(r ApiOperationsControllerRunCompositeV1V1Request) (*CompositeV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompositeV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunCompositeV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/composite.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.compositeV1Request == nil {
		return localVarReturnValue, nil, reportError("compositeV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.compositeV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunCropV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	cropV1Request *CropV1Request
}

func (r ApiOperationsControllerRunCropV1V1Request) CropV1Request(cropV1Request CropV1Request) ApiOperationsControllerRunCropV1V1Request {
	r.cropV1Request = &cropV1Request
	return r
}

func (r ApiOperationsControllerRunCropV1V1Request) Execute() (*CropV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunCropV1V1Execute(r)
}

/*
OperationsControllerRunCropV1V1 Method for OperationsControllerRunCropV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunCropV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunCropV1V1(ctx context.Context) ApiOperationsControllerRunCropV1V1Request {
	return ApiOperationsControllerRunCropV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CropV1Response
func (a *OperationsAPIService) OperationsControllerRunCropV1V1Execute(r ApiOperationsControllerRunCropV1V1Request) (*CropV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CropV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunCropV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/crop.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cropV1Request == nil {
		return localVarReturnValue, nil, reportError("cropV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cropV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunCutV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	cutV1Request *CutV1Request
}

func (r ApiOperationsControllerRunCutV1V1Request) CutV1Request(cutV1Request CutV1Request) ApiOperationsControllerRunCutV1V1Request {
	r.cutV1Request = &cutV1Request
	return r
}

func (r ApiOperationsControllerRunCutV1V1Request) Execute() (*CutV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunCutV1V1Execute(r)
}

/*
OperationsControllerRunCutV1V1 Method for OperationsControllerRunCutV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunCutV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunCutV1V1(ctx context.Context) ApiOperationsControllerRunCutV1V1Request {
	return ApiOperationsControllerRunCutV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CutV1Response
func (a *OperationsAPIService) OperationsControllerRunCutV1V1Execute(r ApiOperationsControllerRunCutV1V1Request) (*CutV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CutV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunCutV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/cut.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cutV1Request == nil {
		return localVarReturnValue, nil, reportError("cutV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cutV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunGptV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	gptV1Request *GptV1Request
}

func (r ApiOperationsControllerRunGptV1V1Request) GptV1Request(gptV1Request GptV1Request) ApiOperationsControllerRunGptV1V1Request {
	r.gptV1Request = &gptV1Request
	return r
}

func (r ApiOperationsControllerRunGptV1V1Request) Execute() (*GptV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunGptV1V1Execute(r)
}

/*
OperationsControllerRunGptV1V1 Method for OperationsControllerRunGptV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunGptV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunGptV1V1(ctx context.Context) ApiOperationsControllerRunGptV1V1Request {
	return ApiOperationsControllerRunGptV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GptV1Response
func (a *OperationsAPIService) OperationsControllerRunGptV1V1Execute(r ApiOperationsControllerRunGptV1V1Request) (*GptV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GptV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunGptV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/gpt.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gptV1Request == nil {
		return localVarReturnValue, nil, reportError("gptV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gptV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunHauteLindaV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	hauteLindaV1Request *HauteLindaV1Request
}

func (r ApiOperationsControllerRunHauteLindaV1V1Request) HauteLindaV1Request(hauteLindaV1Request HauteLindaV1Request) ApiOperationsControllerRunHauteLindaV1V1Request {
	r.hauteLindaV1Request = &hauteLindaV1Request
	return r
}

func (r ApiOperationsControllerRunHauteLindaV1V1Request) Execute() (*HauteLindaV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunHauteLindaV1V1Execute(r)
}

/*
OperationsControllerRunHauteLindaV1V1 Method for OperationsControllerRunHauteLindaV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunHauteLindaV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunHauteLindaV1V1(ctx context.Context) ApiOperationsControllerRunHauteLindaV1V1Request {
	return ApiOperationsControllerRunHauteLindaV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HauteLindaV1Response
func (a *OperationsAPIService) OperationsControllerRunHauteLindaV1V1Execute(r ApiOperationsControllerRunHauteLindaV1V1Request) (*HauteLindaV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HauteLindaV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunHauteLindaV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/haute.linda.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hauteLindaV1Request == nil {
		return localVarReturnValue, nil, reportError("hauteLindaV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hauteLindaV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunHauteNaomiV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	hauteNaomiV1Request *HauteNaomiV1Request
}

func (r ApiOperationsControllerRunHauteNaomiV1V1Request) HauteNaomiV1Request(hauteNaomiV1Request HauteNaomiV1Request) ApiOperationsControllerRunHauteNaomiV1V1Request {
	r.hauteNaomiV1Request = &hauteNaomiV1Request
	return r
}

func (r ApiOperationsControllerRunHauteNaomiV1V1Request) Execute() (*HauteNaomiV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunHauteNaomiV1V1Execute(r)
}

/*
OperationsControllerRunHauteNaomiV1V1 Method for OperationsControllerRunHauteNaomiV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunHauteNaomiV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunHauteNaomiV1V1(ctx context.Context) ApiOperationsControllerRunHauteNaomiV1V1Request {
	return ApiOperationsControllerRunHauteNaomiV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HauteNaomiV1Response
func (a *OperationsAPIService) OperationsControllerRunHauteNaomiV1V1Execute(r ApiOperationsControllerRunHauteNaomiV1V1Request) (*HauteNaomiV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HauteNaomiV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunHauteNaomiV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/haute.naomi.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hauteNaomiV1Request == nil {
		return localVarReturnValue, nil, reportError("hauteNaomiV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hauteNaomiV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunImagineKateV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	imagineKateV1Request *ImagineKateV1Request
}

func (r ApiOperationsControllerRunImagineKateV1V1Request) ImagineKateV1Request(imagineKateV1Request ImagineKateV1Request) ApiOperationsControllerRunImagineKateV1V1Request {
	r.imagineKateV1Request = &imagineKateV1Request
	return r
}

func (r ApiOperationsControllerRunImagineKateV1V1Request) Execute() (*ImagineKateV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunImagineKateV1V1Execute(r)
}

/*
OperationsControllerRunImagineKateV1V1 Method for OperationsControllerRunImagineKateV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunImagineKateV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunImagineKateV1V1(ctx context.Context) ApiOperationsControllerRunImagineKateV1V1Request {
	return ApiOperationsControllerRunImagineKateV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImagineKateV1Response
func (a *OperationsAPIService) OperationsControllerRunImagineKateV1V1Execute(r ApiOperationsControllerRunImagineKateV1V1Request) (*ImagineKateV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImagineKateV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunImagineKateV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/imagine.kate.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imagineKateV1Request == nil {
		return localVarReturnValue, nil, reportError("imagineKateV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imagineKateV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunInpaintKateV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	inpaintKateV1Request *InpaintKateV1Request
}

func (r ApiOperationsControllerRunInpaintKateV1V1Request) InpaintKateV1Request(inpaintKateV1Request InpaintKateV1Request) ApiOperationsControllerRunInpaintKateV1V1Request {
	r.inpaintKateV1Request = &inpaintKateV1Request
	return r
}

func (r ApiOperationsControllerRunInpaintKateV1V1Request) Execute() (*InpaintKateV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunInpaintKateV1V1Execute(r)
}

/*
OperationsControllerRunInpaintKateV1V1 Method for OperationsControllerRunInpaintKateV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunInpaintKateV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunInpaintKateV1V1(ctx context.Context) ApiOperationsControllerRunInpaintKateV1V1Request {
	return ApiOperationsControllerRunInpaintKateV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InpaintKateV1Response
func (a *OperationsAPIService) OperationsControllerRunInpaintKateV1V1Execute(r ApiOperationsControllerRunInpaintKateV1V1Request) (*InpaintKateV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InpaintKateV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunInpaintKateV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/inpaint.kate.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inpaintKateV1Request == nil {
		return localVarReturnValue, nil, reportError("inpaintKateV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inpaintKateV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunNegateImageV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	negateImageV1Request *NegateImageV1Request
}

func (r ApiOperationsControllerRunNegateImageV1V1Request) NegateImageV1Request(negateImageV1Request NegateImageV1Request) ApiOperationsControllerRunNegateImageV1V1Request {
	r.negateImageV1Request = &negateImageV1Request
	return r
}

func (r ApiOperationsControllerRunNegateImageV1V1Request) Execute() (*NegateImageV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunNegateImageV1V1Execute(r)
}

/*
OperationsControllerRunNegateImageV1V1 Method for OperationsControllerRunNegateImageV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunNegateImageV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunNegateImageV1V1(ctx context.Context) ApiOperationsControllerRunNegateImageV1V1Request {
	return ApiOperationsControllerRunNegateImageV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NegateImageV1Response
func (a *OperationsAPIService) OperationsControllerRunNegateImageV1V1Execute(r ApiOperationsControllerRunNegateImageV1V1Request) (*NegateImageV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NegateImageV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunNegateImageV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/negateImage.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.negateImageV1Request == nil {
		return localVarReturnValue, nil, reportError("negateImageV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.negateImageV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunNoiseV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	noiseV1Request *NoiseV1Request
}

func (r ApiOperationsControllerRunNoiseV1V1Request) NoiseV1Request(noiseV1Request NoiseV1Request) ApiOperationsControllerRunNoiseV1V1Request {
	r.noiseV1Request = &noiseV1Request
	return r
}

func (r ApiOperationsControllerRunNoiseV1V1Request) Execute() (*NoiseV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunNoiseV1V1Execute(r)
}

/*
OperationsControllerRunNoiseV1V1 Method for OperationsControllerRunNoiseV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunNoiseV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunNoiseV1V1(ctx context.Context) ApiOperationsControllerRunNoiseV1V1Request {
	return ApiOperationsControllerRunNoiseV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NoiseV1Response
func (a *OperationsAPIService) OperationsControllerRunNoiseV1V1Execute(r ApiOperationsControllerRunNoiseV1V1Request) (*NoiseV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NoiseV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunNoiseV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/noise.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.noiseV1Request == nil {
		return localVarReturnValue, nil, reportError("noiseV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.noiseV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunObjectDetectionV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	objectDetectionV1Request *ObjectDetectionV1Request
}

func (r ApiOperationsControllerRunObjectDetectionV1V1Request) ObjectDetectionV1Request(objectDetectionV1Request ObjectDetectionV1Request) ApiOperationsControllerRunObjectDetectionV1V1Request {
	r.objectDetectionV1Request = &objectDetectionV1Request
	return r
}

func (r ApiOperationsControllerRunObjectDetectionV1V1Request) Execute() (*ObjectDetectionV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunObjectDetectionV1V1Execute(r)
}

/*
OperationsControllerRunObjectDetectionV1V1 Method for OperationsControllerRunObjectDetectionV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunObjectDetectionV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunObjectDetectionV1V1(ctx context.Context) ApiOperationsControllerRunObjectDetectionV1V1Request {
	return ApiOperationsControllerRunObjectDetectionV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObjectDetectionV1Response
func (a *OperationsAPIService) OperationsControllerRunObjectDetectionV1V1Execute(r ApiOperationsControllerRunObjectDetectionV1V1Request) (*ObjectDetectionV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectDetectionV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunObjectDetectionV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/objectDetection.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.objectDetectionV1Request == nil {
		return localVarReturnValue, nil, reportError("objectDetectionV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.objectDetectionV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunPoseEstimationV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	poseEstimationV1Request *PoseEstimationV1Request
}

func (r ApiOperationsControllerRunPoseEstimationV1V1Request) PoseEstimationV1Request(poseEstimationV1Request PoseEstimationV1Request) ApiOperationsControllerRunPoseEstimationV1V1Request {
	r.poseEstimationV1Request = &poseEstimationV1Request
	return r
}

func (r ApiOperationsControllerRunPoseEstimationV1V1Request) Execute() (*PoseEstimationV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunPoseEstimationV1V1Execute(r)
}

/*
OperationsControllerRunPoseEstimationV1V1 Method for OperationsControllerRunPoseEstimationV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunPoseEstimationV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunPoseEstimationV1V1(ctx context.Context) ApiOperationsControllerRunPoseEstimationV1V1Request {
	return ApiOperationsControllerRunPoseEstimationV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PoseEstimationV1Response
func (a *OperationsAPIService) OperationsControllerRunPoseEstimationV1V1Execute(r ApiOperationsControllerRunPoseEstimationV1V1Request) (*PoseEstimationV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PoseEstimationV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunPoseEstimationV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/poseEstimation.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.poseEstimationV1Request == nil {
		return localVarReturnValue, nil, reportError("poseEstimationV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.poseEstimationV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	segmentAnythingEmbeddingsV1Request *SegmentAnythingEmbeddingsV1Request
}

func (r ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request) SegmentAnythingEmbeddingsV1Request(segmentAnythingEmbeddingsV1Request SegmentAnythingEmbeddingsV1Request) ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request {
	r.segmentAnythingEmbeddingsV1Request = &segmentAnythingEmbeddingsV1Request
	return r
}

func (r ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request) Execute() (*SegmentAnythingEmbeddingsV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunSegmentAnythingEmbeddingsV1V1Execute(r)
}

/*
OperationsControllerRunSegmentAnythingEmbeddingsV1V1 Method for OperationsControllerRunSegmentAnythingEmbeddingsV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunSegmentAnythingEmbeddingsV1V1(ctx context.Context) ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request {
	return ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SegmentAnythingEmbeddingsV1Response
func (a *OperationsAPIService) OperationsControllerRunSegmentAnythingEmbeddingsV1V1Execute(r ApiOperationsControllerRunSegmentAnythingEmbeddingsV1V1Request) (*SegmentAnythingEmbeddingsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SegmentAnythingEmbeddingsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunSegmentAnythingEmbeddingsV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/segmentAnything.embeddings.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.segmentAnythingEmbeddingsV1Request == nil {
		return localVarReturnValue, nil, reportError("segmentAnythingEmbeddingsV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.segmentAnythingEmbeddingsV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunSegmentAnythingMaskV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	segmentAnythingMaskV1Request *SegmentAnythingMaskV1Request
}

func (r ApiOperationsControllerRunSegmentAnythingMaskV1V1Request) SegmentAnythingMaskV1Request(segmentAnythingMaskV1Request SegmentAnythingMaskV1Request) ApiOperationsControllerRunSegmentAnythingMaskV1V1Request {
	r.segmentAnythingMaskV1Request = &segmentAnythingMaskV1Request
	return r
}

func (r ApiOperationsControllerRunSegmentAnythingMaskV1V1Request) Execute() (*SegmentAnythingMaskV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunSegmentAnythingMaskV1V1Execute(r)
}

/*
OperationsControllerRunSegmentAnythingMaskV1V1 Method for OperationsControllerRunSegmentAnythingMaskV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunSegmentAnythingMaskV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunSegmentAnythingMaskV1V1(ctx context.Context) ApiOperationsControllerRunSegmentAnythingMaskV1V1Request {
	return ApiOperationsControllerRunSegmentAnythingMaskV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SegmentAnythingMaskV1Response
func (a *OperationsAPIService) OperationsControllerRunSegmentAnythingMaskV1V1Execute(r ApiOperationsControllerRunSegmentAnythingMaskV1V1Request) (*SegmentAnythingMaskV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SegmentAnythingMaskV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunSegmentAnythingMaskV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/segmentAnything.mask.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.segmentAnythingMaskV1Request == nil {
		return localVarReturnValue, nil, reportError("segmentAnythingMaskV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.segmentAnythingMaskV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunUpscaleV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	upscaleV1Request *UpscaleV1Request
}

func (r ApiOperationsControllerRunUpscaleV1V1Request) UpscaleV1Request(upscaleV1Request UpscaleV1Request) ApiOperationsControllerRunUpscaleV1V1Request {
	r.upscaleV1Request = &upscaleV1Request
	return r
}

func (r ApiOperationsControllerRunUpscaleV1V1Request) Execute() (*UpscaleV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunUpscaleV1V1Execute(r)
}

/*
OperationsControllerRunUpscaleV1V1 Method for OperationsControllerRunUpscaleV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunUpscaleV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunUpscaleV1V1(ctx context.Context) ApiOperationsControllerRunUpscaleV1V1Request {
	return ApiOperationsControllerRunUpscaleV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpscaleV1Response
func (a *OperationsAPIService) OperationsControllerRunUpscaleV1V1Execute(r ApiOperationsControllerRunUpscaleV1V1Request) (*UpscaleV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpscaleV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunUpscaleV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/upscale.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.upscaleV1Request == nil {
		return localVarReturnValue, nil, reportError("upscaleV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upscaleV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerRunVtonGiseleV1V1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	vtonGiseleV1Request *VtonGiseleV1Request
}

func (r ApiOperationsControllerRunVtonGiseleV1V1Request) VtonGiseleV1Request(vtonGiseleV1Request VtonGiseleV1Request) ApiOperationsControllerRunVtonGiseleV1V1Request {
	r.vtonGiseleV1Request = &vtonGiseleV1Request
	return r
}

func (r ApiOperationsControllerRunVtonGiseleV1V1Request) Execute() (*VtonGiseleV1Response, *http.Response, error) {
	return r.ApiService.OperationsControllerRunVtonGiseleV1V1Execute(r)
}

/*
OperationsControllerRunVtonGiseleV1V1 Method for OperationsControllerRunVtonGiseleV1V1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOperationsControllerRunVtonGiseleV1V1Request
*/
func (a *OperationsAPIService) OperationsControllerRunVtonGiseleV1V1(ctx context.Context) ApiOperationsControllerRunVtonGiseleV1V1Request {
	return ApiOperationsControllerRunVtonGiseleV1V1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VtonGiseleV1Response
func (a *OperationsAPIService) OperationsControllerRunVtonGiseleV1V1Execute(r ApiOperationsControllerRunVtonGiseleV1V1Request) (*VtonGiseleV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VtonGiseleV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerRunVtonGiseleV1V1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/run/vton.gisele.v1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vtonGiseleV1Request == nil {
		return localVarReturnValue, nil, reportError("vtonGiseleV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vtonGiseleV1Request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOperationsControllerUpdateMetadataV1Request struct {
	ctx context.Context
	ApiService OperationsAPI
	id string
	updateMetadataDto *UpdateMetadataDto
}

func (r ApiOperationsControllerUpdateMetadataV1Request) UpdateMetadataDto(updateMetadataDto UpdateMetadataDto) ApiOperationsControllerUpdateMetadataV1Request {
	r.updateMetadataDto = &updateMetadataDto
	return r
}

func (r ApiOperationsControllerUpdateMetadataV1Request) Execute() (*ResourceEntity, *http.Response, error) {
	return r.ApiService.OperationsControllerUpdateMetadataV1Execute(r)
}

/*
OperationsControllerUpdateMetadataV1 Method for OperationsControllerUpdateMetadataV1

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiOperationsControllerUpdateMetadataV1Request
*/
func (a *OperationsAPIService) OperationsControllerUpdateMetadataV1(ctx context.Context, id string) ApiOperationsControllerUpdateMetadataV1Request {
	return ApiOperationsControllerUpdateMetadataV1Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ResourceEntity
func (a *OperationsAPIService) OperationsControllerUpdateMetadataV1Execute(r ApiOperationsControllerUpdateMetadataV1Request) (*ResourceEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OperationsAPIService.OperationsControllerUpdateMetadataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/operations/{id}/metadata"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateMetadataDto == nil {
		return localVarReturnValue, nil, reportError("updateMetadataDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateMetadataDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

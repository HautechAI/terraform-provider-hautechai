/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListCollectionItemsParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListCollectionItemsParamsDto{}

// ListCollectionItemsParamsDto struct for ListCollectionItemsParamsDto
type ListCollectionItemsParamsDto struct {
	CollectionId string `json:"collectionId"`
	OrderBy *string `json:"orderBy,omitempty"`
	Limit *float32 `json:"limit,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Cursor *string `json:"cursor,omitempty"`
}

type _ListCollectionItemsParamsDto ListCollectionItemsParamsDto

// NewListCollectionItemsParamsDto instantiates a new ListCollectionItemsParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCollectionItemsParamsDto(collectionId string) *ListCollectionItemsParamsDto {
	this := ListCollectionItemsParamsDto{}
	this.CollectionId = collectionId
	var orderBy string = "createdAt_DESC"
	this.OrderBy = &orderBy
	var limit float32 = 50
	this.Limit = &limit
	return &this
}

// NewListCollectionItemsParamsDtoWithDefaults instantiates a new ListCollectionItemsParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCollectionItemsParamsDtoWithDefaults() *ListCollectionItemsParamsDto {
	this := ListCollectionItemsParamsDto{}
	var orderBy string = "createdAt_DESC"
	this.OrderBy = &orderBy
	var limit float32 = 50
	this.Limit = &limit
	return &this
}

// GetCollectionId returns the CollectionId field value
func (o *ListCollectionItemsParamsDto) GetCollectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value
// and a boolean to check if the value has been set.
func (o *ListCollectionItemsParamsDto) GetCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionId, true
}

// SetCollectionId sets field value
func (o *ListCollectionItemsParamsDto) SetCollectionId(v string) {
	o.CollectionId = v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ListCollectionItemsParamsDto) GetOrderBy() string {
	if o == nil || IsNil(o.OrderBy) {
		var ret string
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCollectionItemsParamsDto) GetOrderByOk() (*string, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ListCollectionItemsParamsDto) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given string and assigns it to the OrderBy field.
func (o *ListCollectionItemsParamsDto) SetOrderBy(v string) {
	o.OrderBy = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ListCollectionItemsParamsDto) GetLimit() float32 {
	if o == nil || IsNil(o.Limit) {
		var ret float32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCollectionItemsParamsDto) GetLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ListCollectionItemsParamsDto) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given float32 and assigns it to the Limit field.
func (o *ListCollectionItemsParamsDto) SetLimit(v float32) {
	o.Limit = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ListCollectionItemsParamsDto) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCollectionItemsParamsDto) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ListCollectionItemsParamsDto) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ListCollectionItemsParamsDto) SetKind(v string) {
	o.Kind = &v
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *ListCollectionItemsParamsDto) GetCursor() string {
	if o == nil || IsNil(o.Cursor) {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCollectionItemsParamsDto) GetCursorOk() (*string, bool) {
	if o == nil || IsNil(o.Cursor) {
		return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *ListCollectionItemsParamsDto) HasCursor() bool {
	if o != nil && !IsNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *ListCollectionItemsParamsDto) SetCursor(v string) {
	o.Cursor = &v
}

func (o ListCollectionItemsParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListCollectionItemsParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collectionId"] = o.CollectionId
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	return toSerialize, nil
}

func (o *ListCollectionItemsParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collectionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListCollectionItemsParamsDto := _ListCollectionItemsParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListCollectionItemsParamsDto)

	if err != nil {
		return err
	}

	*o = ListCollectionItemsParamsDto(varListCollectionItemsParamsDto)

	return err
}

type NullableListCollectionItemsParamsDto struct {
	value *ListCollectionItemsParamsDto
	isSet bool
}

func (v NullableListCollectionItemsParamsDto) Get() *ListCollectionItemsParamsDto {
	return v.value
}

func (v *NullableListCollectionItemsParamsDto) Set(val *ListCollectionItemsParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableListCollectionItemsParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableListCollectionItemsParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCollectionItemsParamsDto(val *ListCollectionItemsParamsDto) *NullableListCollectionItemsParamsDto {
	return &NullableListCollectionItemsParamsDto{value: val, isSet: true}
}

func (v NullableListCollectionItemsParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCollectionItemsParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



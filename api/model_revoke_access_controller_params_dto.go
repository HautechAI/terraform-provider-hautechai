/*
Hautech API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hautechapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RevokeAccessControllerParamsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevokeAccessControllerParamsDto{}

// RevokeAccessControllerParamsDto struct for RevokeAccessControllerParamsDto
type RevokeAccessControllerParamsDto struct {
	PrincipalType string `json:"principalType"`
	PrincipalId string `json:"principalId"`
	Access string `json:"access"`
}

type _RevokeAccessControllerParamsDto RevokeAccessControllerParamsDto

// NewRevokeAccessControllerParamsDto instantiates a new RevokeAccessControllerParamsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevokeAccessControllerParamsDto(principalType string, principalId string, access string) *RevokeAccessControllerParamsDto {
	this := RevokeAccessControllerParamsDto{}
	this.PrincipalType = principalType
	this.PrincipalId = principalId
	this.Access = access
	return &this
}

// NewRevokeAccessControllerParamsDtoWithDefaults instantiates a new RevokeAccessControllerParamsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevokeAccessControllerParamsDtoWithDefaults() *RevokeAccessControllerParamsDto {
	this := RevokeAccessControllerParamsDto{}
	return &this
}

// GetPrincipalType returns the PrincipalType field value
func (o *RevokeAccessControllerParamsDto) GetPrincipalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalType
}

// GetPrincipalTypeOk returns a tuple with the PrincipalType field value
// and a boolean to check if the value has been set.
func (o *RevokeAccessControllerParamsDto) GetPrincipalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalType, true
}

// SetPrincipalType sets field value
func (o *RevokeAccessControllerParamsDto) SetPrincipalType(v string) {
	o.PrincipalType = v
}

// GetPrincipalId returns the PrincipalId field value
func (o *RevokeAccessControllerParamsDto) GetPrincipalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrincipalId
}

// GetPrincipalIdOk returns a tuple with the PrincipalId field value
// and a boolean to check if the value has been set.
func (o *RevokeAccessControllerParamsDto) GetPrincipalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrincipalId, true
}

// SetPrincipalId sets field value
func (o *RevokeAccessControllerParamsDto) SetPrincipalId(v string) {
	o.PrincipalId = v
}

// GetAccess returns the Access field value
func (o *RevokeAccessControllerParamsDto) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *RevokeAccessControllerParamsDto) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *RevokeAccessControllerParamsDto) SetAccess(v string) {
	o.Access = v
}

func (o RevokeAccessControllerParamsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevokeAccessControllerParamsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["principalType"] = o.PrincipalType
	toSerialize["principalId"] = o.PrincipalId
	toSerialize["access"] = o.Access
	return toSerialize, nil
}

func (o *RevokeAccessControllerParamsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"principalType",
		"principalId",
		"access",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevokeAccessControllerParamsDto := _RevokeAccessControllerParamsDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRevokeAccessControllerParamsDto)

	if err != nil {
		return err
	}

	*o = RevokeAccessControllerParamsDto(varRevokeAccessControllerParamsDto)

	return err
}

type NullableRevokeAccessControllerParamsDto struct {
	value *RevokeAccessControllerParamsDto
	isSet bool
}

func (v NullableRevokeAccessControllerParamsDto) Get() *RevokeAccessControllerParamsDto {
	return v.value
}

func (v *NullableRevokeAccessControllerParamsDto) Set(val *RevokeAccessControllerParamsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRevokeAccessControllerParamsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRevokeAccessControllerParamsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevokeAccessControllerParamsDto(val *RevokeAccessControllerParamsDto) *NullableRevokeAccessControllerParamsDto {
	return &NullableRevokeAccessControllerParamsDto{value: val, isSet: true}
}

func (v NullableRevokeAccessControllerParamsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevokeAccessControllerParamsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


